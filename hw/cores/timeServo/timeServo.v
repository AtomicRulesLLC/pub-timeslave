// Copyright (c) 2021 Atomic Rules LLC - All Rights Reserved
// This file contains "Licensed Materials" as defined in the Software License
// Agreement (SLA). It is provided strictly under the terms of the SLA.



//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// s_axi_awready                  O     1 reg
// s_axi_wready                   O     1 reg
// s_axi_bvalid                   O     1
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1 reg
// s_axi_rvalid                   O     1
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// pfd_monitor                    O     2
// now_ref                        O    80 reg
// now_pps_ref                    O     1
// now_0                      O    80
// now_1                      O    80
// now_2                      O    80
// now_3                      O    80
// now_4                      O    80
// now_5                      O    80
// now_6                      O    80
// now_7                      O    80
// now_8                      O    80
// now_9                      O    80
// now_10                     O    80
// now_11                     O    80
// now_12                     O    80
// now_13                     O    80
// now_14                     O    80
// now_15                     O    80
// now_16                     O    80
// now_17                     O    80
// now_18                     O    80
// now_19                     O    80
// now_20                     O    80
// now_21                     O    80
// now_22                     O    80
// now_23                     O    80
// now_24                     O    80
// now_25                     O    80
// now_26                     O    80
// now_27                     O    80
// now_28                     O    80
// now_29                     O    80
// now_30                     O    80
// now_31                     O    80
// now_pps_0                  O     1
// now_pps_1                  O     1
// now_pps_2                  O     1
// now_pps_3                  O     1
// now_pps_4                  O     1
// now_pps_5                  O     1
// now_pps_6                  O     1
// now_pps_7                  O     1
// now_pps_8                  O     1
// now_pps_9                  O     1
// now_pps_10                 O     1
// now_pps_11                 O     1
// now_pps_12                 O     1
// now_pps_13                 O     1
// now_pps_14                 O     1
// now_pps_15                 O     1
// now_pps_16                 O     1
// now_pps_17                 O     1
// now_pps_18                 O     1
// now_pps_19                 O     1
// now_pps_20                 O     1
// now_pps_21                 O     1
// now_pps_22                 O     1
// now_pps_23                 O     1
// now_pps_24                 O     1
// now_pps_25                 O     1
// now_pps_26                 O     1
// now_pps_27                 O     1
// now_pps_28                 O     1
// now_pps_29                 O     1
// now_pps_30                 O     1
// now_pps_31                 O     1
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// now_clk_0                      I     1 clock
// now_clk_1                      I     1 clock
// now_clk_2                      I     1 clock
// now_clk_3                      I     1 clock
// now_clk_4                      I     1 clock
// now_clk_5                      I     1 clock
// now_clk_6                      I     1 clock
// now_clk_7                      I     1 clock
// now_clk_8                      I     1 clock
// now_clk_9                      I     1 clock
// now_clk_10                     I     1 clock
// now_clk_11                     I     1 clock
// now_clk_12                     I     1 clock
// now_clk_13                     I     1 clock
// now_clk_14                     I     1 clock
// now_clk_15                     I     1 clock
// now_clk_16                     I     1 clock
// now_clk_17                     I     1 clock
// now_clk_18                     I     1 clock
// now_clk_19                     I     1 clock
// now_clk_20                     I     1 clock
// now_clk_21                     I     1 clock
// now_clk_22                     I     1 clock
// now_clk_23                     I     1 clock
// now_clk_24                     I     1 clock
// now_clk_25                     I     1 clock
// now_clk_26                     I     1 clock
// now_clk_27                     I     1 clock
// now_clk_28                     I     1 clock
// now_clk_29                     I     1 clock
// now_clk_30                     I     1 clock
// now_clk_31                     I     1 clock
// ref_clk                        I     1 clock
// ref_rstn                       I     1 reset
// s_axi_awaddr                   I    12 reg
// s_axi_awprot                   I     3 reg
// s_axi_wdata                    I    32 reg
// s_axi_wstrb                    I     4 reg
// s_axi_araddr                   I    12 reg
// s_axi_arprot                   I     3 reg
// pps_src                        I     1 reg
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
// DELAY_RESET ref_rstn ref_clk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module timeServo(s_axi_aclk,
		 s_axi_aresetn,
		 now_clk_0,
		 now_clk_1,
		 now_clk_2,
		 now_clk_3,
		 now_clk_4,
		 now_clk_5,
		 now_clk_6,
		 now_clk_7,
		 now_clk_8,
		 now_clk_9,
		 now_clk_10,
		 now_clk_11,
		 now_clk_12,
		 now_clk_13,
		 now_clk_14,
		 now_clk_15,
		 now_clk_16,
		 now_clk_17,
		 now_clk_18,
		 now_clk_19,
		 now_clk_20,
		 now_clk_21,
		 now_clk_22,
		 now_clk_23,
		 now_clk_24,
		 now_clk_25,
		 now_clk_26,
		 now_clk_27,
		 now_clk_28,
		 now_clk_29,
		 now_clk_30,
		 now_clk_31,
		 ref_clk,
		 ref_rstn,

		 s_axi_awvalid,

		 s_axi_awready,

		 s_axi_awaddr,

		 s_axi_awprot,

		 s_axi_wvalid,

		 s_axi_wready,

		 s_axi_wdata,

		 s_axi_wstrb,

		 s_axi_bvalid,

		 s_axi_bready,

		 s_axi_bresp,

		 s_axi_arvalid,

		 s_axi_arready,

		 s_axi_araddr,

		 s_axi_arprot,

		 s_axi_rvalid,

		 s_axi_rready,

		 s_axi_rdata,

		 s_axi_rresp,

		 pps_src,

		 pfd_monitor,

		 now_ref,

		 now_pps_ref,

		 now_0,

		 now_1,

		 now_2,

		 now_3,

		 now_4,

		 now_5,

		 now_6,

		 now_7,

		 now_8,

		 now_9,

		 now_10,

		 now_11,

		 now_12,

		 now_13,

		 now_14,

		 now_15,

		 now_16,

		 now_17,

		 now_18,

		 now_19,

		 now_20,

		 now_21,

		 now_22,

		 now_23,

		 now_24,

		 now_25,

		 now_26,

		 now_27,

		 now_28,

		 now_29,

		 now_30,

		 now_31,

		 now_pps_0,

		 now_pps_1,

		 now_pps_2,

		 now_pps_3,

		 now_pps_4,

		 now_pps_5,

		 now_pps_6,

		 now_pps_7,

		 now_pps_8,

		 now_pps_9,

		 now_pps_10,

		 now_pps_11,

		 now_pps_12,

		 now_pps_13,

		 now_pps_14,

		 now_pps_15,

		 now_pps_16,

		 now_pps_17,

		 now_pps_18,

		 now_pps_19,

		 now_pps_20,

		 now_pps_21,

		 now_pps_22,

		 now_pps_23,

		 now_pps_24,

		 now_pps_25,

		 now_pps_26,

		 now_pps_27,

		 now_pps_28,

		 now_pps_29,

		 now_pps_30,

		 now_pps_31);
  input  s_axi_aclk;
  input  s_axi_aresetn;
  input  now_clk_0;
  input  now_clk_1;
  input  now_clk_2;
  input  now_clk_3;
  input  now_clk_4;
  input  now_clk_5;
  input  now_clk_6;
  input  now_clk_7;
  input  now_clk_8;
  input  now_clk_9;
  input  now_clk_10;
  input  now_clk_11;
  input  now_clk_12;
  input  now_clk_13;
  input  now_clk_14;
  input  now_clk_15;
  input  now_clk_16;
  input  now_clk_17;
  input  now_clk_18;
  input  now_clk_19;
  input  now_clk_20;
  input  now_clk_21;
  input  now_clk_22;
  input  now_clk_23;
  input  now_clk_24;
  input  now_clk_25;
  input  now_clk_26;
  input  now_clk_27;
  input  now_clk_28;
  input  now_clk_29;
  input  now_clk_30;
  input  now_clk_31;
  input  ref_clk;
  input  ref_rstn;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // action method pps
  input  pps_src;

  // value method pfd_monitor
  output [1 : 0] pfd_monitor;

  // value method now_ref
  output [79 : 0] now_ref;

  // value method now_pps_ref
  output now_pps_ref;

  // value method now_0_now
  output [79 : 0] now_0;

  // value method now_1_now
  output [79 : 0] now_1;

  // value method now_2_now
  output [79 : 0] now_2;

  // value method now_3_now
  output [79 : 0] now_3;

  // value method now_4_now
  output [79 : 0] now_4;

  // value method now_5_now
  output [79 : 0] now_5;

  // value method now_6_now
  output [79 : 0] now_6;

  // value method now_7_now
  output [79 : 0] now_7;

  // value method now_8_now
  output [79 : 0] now_8;

  // value method now_9_now
  output [79 : 0] now_9;

  // value method now_10_now
  output [79 : 0] now_10;

  // value method now_11_now
  output [79 : 0] now_11;

  // value method now_12_now
  output [79 : 0] now_12;

  // value method now_13_now
  output [79 : 0] now_13;

  // value method now_14_now
  output [79 : 0] now_14;

  // value method now_15_now
  output [79 : 0] now_15;

  // value method now_16_now
  output [79 : 0] now_16;

  // value method now_17_now
  output [79 : 0] now_17;

  // value method now_18_now
  output [79 : 0] now_18;

  // value method now_19_now
  output [79 : 0] now_19;

  // value method now_20_now
  output [79 : 0] now_20;

  // value method now_21_now
  output [79 : 0] now_21;

  // value method now_22_now
  output [79 : 0] now_22;

  // value method now_23_now
  output [79 : 0] now_23;

  // value method now_24_now
  output [79 : 0] now_24;

  // value method now_25_now
  output [79 : 0] now_25;

  // value method now_26_now
  output [79 : 0] now_26;

  // value method now_27_now
  output [79 : 0] now_27;

  // value method now_28_now
  output [79 : 0] now_28;

  // value method now_29_now
  output [79 : 0] now_29;

  // value method now_30_now
  output [79 : 0] now_30;

  // value method now_31_now
  output [79 : 0] now_31;

  // value method now_pps_0_now_pps
  output now_pps_0;

  // value method now_pps_1_now_pps
  output now_pps_1;

  // value method now_pps_2_now_pps
  output now_pps_2;

  // value method now_pps_3_now_pps
  output now_pps_3;

  // value method now_pps_4_now_pps
  output now_pps_4;

  // value method now_pps_5_now_pps
  output now_pps_5;

  // value method now_pps_6_now_pps
  output now_pps_6;

  // value method now_pps_7_now_pps
  output now_pps_7;

  // value method now_pps_8_now_pps
  output now_pps_8;

  // value method now_pps_9_now_pps
  output now_pps_9;

  // value method now_pps_10_now_pps
  output now_pps_10;

  // value method now_pps_11_now_pps
  output now_pps_11;

  // value method now_pps_12_now_pps
  output now_pps_12;

  // value method now_pps_13_now_pps
  output now_pps_13;

  // value method now_pps_14_now_pps
  output now_pps_14;

  // value method now_pps_15_now_pps
  output now_pps_15;

  // value method now_pps_16_now_pps
  output now_pps_16;

  // value method now_pps_17_now_pps
  output now_pps_17;

  // value method now_pps_18_now_pps
  output now_pps_18;

  // value method now_pps_19_now_pps
  output now_pps_19;

  // value method now_pps_20_now_pps
  output now_pps_20;

  // value method now_pps_21_now_pps
  output now_pps_21;

  // value method now_pps_22_now_pps
  output now_pps_22;

  // value method now_pps_23_now_pps
  output now_pps_23;

  // value method now_pps_24_now_pps
  output now_pps_24;

  // value method now_pps_25_now_pps
  output now_pps_25;

  // value method now_pps_26_now_pps
  output now_pps_26;

  // value method now_pps_27_now_pps
  output now_pps_27;

  // value method now_pps_28_now_pps
  output now_pps_28;

  // value method now_pps_29_now_pps
  output now_pps_29;

  // value method now_pps_30_now_pps
  output now_pps_30;

  // value method now_pps_31_now_pps
  output now_pps_31;

  // RESET DELAY FLOPS for `ref_rstn'
  (* max_fanout = 256 *)  reg ref_rstn__DELAYED;
  always @(posedge ref_clk) ref_rstn__DELAYED <= ref_rstn;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [79 : 0] now_0,
		now_10,
		now_11,
		now_12,
		now_13,
		now_14,
		now_15,
		now_16,
		now_17,
		now_18,
		now_19,
		now_1,
		now_20,
		now_21,
		now_22,
		now_23,
		now_24,
		now_25,
		now_26,
		now_27,
		now_28,
		now_29,
		now_2,
		now_30,
		now_31,
		now_3,
		now_4,
		now_5,
		now_6,
		now_7,
		now_8,
		now_9,
		now_ref;
  wire [31 : 0] s_axi_rdata;
  wire [1 : 0] pfd_monitor, s_axi_bresp, s_axi_rresp;
  wire now_pps_0,
       now_pps_10,
       now_pps_11,
       now_pps_12,
       now_pps_13,
       now_pps_14,
       now_pps_15,
       now_pps_16,
       now_pps_17,
       now_pps_18,
       now_pps_19,
       now_pps_1,
       now_pps_20,
       now_pps_21,
       now_pps_22,
       now_pps_23,
       now_pps_24,
       now_pps_25,
       now_pps_26,
       now_pps_27,
       now_pps_28,
       now_pps_29,
       now_pps_2,
       now_pps_30,
       now_pps_31,
       now_pps_3,
       now_pps_4,
       now_pps_5,
       now_pps_6,
       now_pps_7,
       now_pps_8,
       now_pps_9,
       now_pps_ref,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready;

  // inlined wires
  wire [120 : 0] incr_valueOp_wget;
  wire incr_valueOp_whas, ppsEventNow_whas, ppsEventTst_whas;

  // register cfg_regs_ifc_reg_axiClkCnt
  reg [31 : 0] cfg_regs_ifc_reg_axiClkCnt;
  wire [31 : 0] cfg_regs_ifc_reg_axiClkCnt_D_IN;
  wire cfg_regs_ifc_reg_axiClkCnt_EN;

  // register cfg_regs_ifc_reg_axiClockPeriod
  reg [31 : 0] cfg_regs_ifc_reg_axiClockPeriod;
  wire [31 : 0] cfg_regs_ifc_reg_axiClockPeriod_D_IN;
  wire cfg_regs_ifc_reg_axiClockPeriod_EN;

  // register cfg_regs_ifc_reg_phaseInc_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_phaseInc_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_phaseInc_crView_1_D_IN;
  wire cfg_regs_ifc_reg_phaseInc_crView_1_EN;

  // register cfg_regs_ifc_reg_phaseInc_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_phaseInc_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_phaseInc_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_phaseInc_dutView_0_EN;

  // register cfg_regs_ifc_reg_phaseInc_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_phaseInc_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_phaseInc_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_phaseInc_dutView_1_EN;

  // register cfg_regs_ifc_reg_phaseInc_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_phaseInc_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_phaseInc_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_phaseInc_ifcs_0_EN;

  // register cfg_regs_ifc_reg_phaseInc_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_phaseInc_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_phaseInc_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_phaseInc_ifcs_1_EN;

  // register cfg_regs_ifc_reg_phaseInc_midBusWrite
  reg cfg_regs_ifc_reg_phaseInc_midBusWrite;
  wire cfg_regs_ifc_reg_phaseInc_midBusWrite_D_IN,
       cfg_regs_ifc_reg_phaseInc_midBusWrite_EN;

  // register cfg_regs_ifc_reg_ppsCnt
  reg [31 : 0] cfg_regs_ifc_reg_ppsCnt;
  wire [31 : 0] cfg_regs_ifc_reg_ppsCnt_D_IN;
  wire cfg_regs_ifc_reg_ppsCnt_EN;

  // register cfg_regs_ifc_reg_refClkCnt
  reg [31 : 0] cfg_regs_ifc_reg_refClkCnt;
  wire [31 : 0] cfg_regs_ifc_reg_refClkCnt_D_IN;
  wire cfg_regs_ifc_reg_refClkCnt_EN;

  // register cfg_regs_ifc_reg_refClkPerPPS
  reg [31 : 0] cfg_regs_ifc_reg_refClkPerPPS;
  wire [31 : 0] cfg_regs_ifc_reg_refClkPerPPS_D_IN;
  wire cfg_regs_ifc_reg_refClkPerPPS_EN;

  // register cfg_regs_ifc_reg_refClockPeriod
  reg [31 : 0] cfg_regs_ifc_reg_refClockPeriod;
  wire [31 : 0] cfg_regs_ifc_reg_refClockPeriod_D_IN;
  wire cfg_regs_ifc_reg_refClockPeriod_EN;

  // register cfg_regs_ifc_reg_skipTimeRelative
  reg [31 : 0] cfg_regs_ifc_reg_skipTimeRelative;
  wire [31 : 0] cfg_regs_ifc_reg_skipTimeRelative_D_IN;
  wire cfg_regs_ifc_reg_skipTimeRelative_EN;

  // register cfg_regs_ifc_reg_state_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_1_D_IN;
  wire cfg_regs_ifc_reg_state_crView_1_EN;

  // register cfg_regs_ifc_reg_state_crView_10
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_10;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_10_D_IN;
  wire cfg_regs_ifc_reg_state_crView_10_EN;

  // register cfg_regs_ifc_reg_state_crView_11
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_11;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_11_D_IN;
  wire cfg_regs_ifc_reg_state_crView_11_EN;

  // register cfg_regs_ifc_reg_state_crView_12
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_12;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_12_D_IN;
  wire cfg_regs_ifc_reg_state_crView_12_EN;

  // register cfg_regs_ifc_reg_state_crView_13
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_13;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_13_D_IN;
  wire cfg_regs_ifc_reg_state_crView_13_EN;

  // register cfg_regs_ifc_reg_state_crView_14
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_14;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_14_D_IN;
  wire cfg_regs_ifc_reg_state_crView_14_EN;

  // register cfg_regs_ifc_reg_state_crView_15
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_15;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_15_D_IN;
  wire cfg_regs_ifc_reg_state_crView_15_EN;

  // register cfg_regs_ifc_reg_state_crView_2
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_2;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_2_D_IN;
  wire cfg_regs_ifc_reg_state_crView_2_EN;

  // register cfg_regs_ifc_reg_state_crView_3
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_3;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_3_D_IN;
  wire cfg_regs_ifc_reg_state_crView_3_EN;

  // register cfg_regs_ifc_reg_state_crView_4
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_4;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_4_D_IN;
  wire cfg_regs_ifc_reg_state_crView_4_EN;

  // register cfg_regs_ifc_reg_state_crView_5
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_5;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_5_D_IN;
  wire cfg_regs_ifc_reg_state_crView_5_EN;

  // register cfg_regs_ifc_reg_state_crView_6
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_6;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_6_D_IN;
  wire cfg_regs_ifc_reg_state_crView_6_EN;

  // register cfg_regs_ifc_reg_state_crView_7
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_7;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_7_D_IN;
  wire cfg_regs_ifc_reg_state_crView_7_EN;

  // register cfg_regs_ifc_reg_state_crView_8
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_8;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_8_D_IN;
  wire cfg_regs_ifc_reg_state_crView_8_EN;

  // register cfg_regs_ifc_reg_state_crView_9
  reg [31 : 0] cfg_regs_ifc_reg_state_crView_9;
  wire [31 : 0] cfg_regs_ifc_reg_state_crView_9_D_IN;
  wire cfg_regs_ifc_reg_state_crView_9_EN;

  // register cfg_regs_ifc_reg_testRegister_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_testRegister_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_testRegister_crView_1_D_IN;
  wire cfg_regs_ifc_reg_testRegister_crView_1_EN;

  // register cfg_regs_ifc_reg_testRegister_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_testRegister_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_testRegister_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_testRegister_dutView_0_EN;

  // register cfg_regs_ifc_reg_testRegister_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_testRegister_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_testRegister_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_testRegister_dutView_1_EN;

  // register cfg_regs_ifc_reg_testRegister_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_testRegister_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_testRegister_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_testRegister_ifcs_0_EN;

  // register cfg_regs_ifc_reg_testRegister_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_testRegister_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_testRegister_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_testRegister_ifcs_1_EN;

  // register cfg_regs_ifc_reg_testRegister_midBusWrite
  reg cfg_regs_ifc_reg_testRegister_midBusWrite;
  wire cfg_regs_ifc_reg_testRegister_midBusWrite_D_IN,
       cfg_regs_ifc_reg_testRegister_midBusWrite_EN;

  // register cfg_regs_ifc_reg_timeCompare_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeCompare_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeCompare_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeCompare_crView_1_EN;

  // register cfg_regs_ifc_reg_timeCompare_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_timeCompare_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeCompare_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_timeCompare_dutView_0_EN;

  // register cfg_regs_ifc_reg_timeCompare_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeCompare_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeCompare_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_timeCompare_dutView_1_EN;

  // register cfg_regs_ifc_reg_timeCompare_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeCompare_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeCompare_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeCompare_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeCompare_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeCompare_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeCompare_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeCompare_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeCompare_midBusWrite
  reg cfg_regs_ifc_reg_timeCompare_midBusWrite;
  wire cfg_regs_ifc_reg_timeCompare_midBusWrite_D_IN,
       cfg_regs_ifc_reg_timeCompare_midBusWrite_EN;

  // register cfg_regs_ifc_reg_timeControl_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeControl_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeControl_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeControl_crView_1_EN;

  // register cfg_regs_ifc_reg_timeControl_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_timeControl_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeControl_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_timeControl_dutView_0_EN;

  // register cfg_regs_ifc_reg_timeControl_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeControl_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeControl_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_timeControl_dutView_1_EN;

  // register cfg_regs_ifc_reg_timeControl_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeControl_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeControl_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeControl_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeControl_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeControl_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeControl_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeControl_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeControl_midBusWrite
  reg cfg_regs_ifc_reg_timeControl_midBusWrite;
  wire cfg_regs_ifc_reg_timeControl_midBusWrite_D_IN,
       cfg_regs_ifc_reg_timeControl_midBusWrite_EN;

  // register cfg_regs_ifc_reg_timeFormats_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeFormats_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeFormats_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeFormats_crView_1_EN;

  // register cfg_regs_ifc_reg_timeFormats_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_timeFormats_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeFormats_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_timeFormats_dutView_0_EN;

  // register cfg_regs_ifc_reg_timeFormats_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeFormats_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeFormats_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_timeFormats_dutView_1_EN;

  // register cfg_regs_ifc_reg_timeFormats_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeFormats_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeFormats_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeFormats_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeFormats_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeFormats_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeFormats_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeFormats_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeFormats_midBusWrite
  reg cfg_regs_ifc_reg_timeFormats_midBusWrite;
  wire cfg_regs_ifc_reg_timeFormats_midBusWrite_D_IN,
       cfg_regs_ifc_reg_timeFormats_midBusWrite_EN;

  // register cfg_regs_ifc_reg_timeLastPPS_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeLastPPS_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeLastPPS_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeLastPPS_crView_1_EN;

  // register cfg_regs_ifc_reg_timeLastPPS_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeLastPPS_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeLastPPS_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeLastPPS_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeLastPPS_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeLastPPS_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeLastPPS_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeLastPPS_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeNow_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeNow_crView_1_EN;

  // register cfg_regs_ifc_reg_timeNow_crView_2
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_crView_2;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_crView_2_D_IN;
  wire cfg_regs_ifc_reg_timeNow_crView_2_EN;

  // register cfg_regs_ifc_reg_timeNow_crView_3
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_crView_3;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_crView_3_D_IN;
  wire cfg_regs_ifc_reg_timeNow_crView_3_EN;

  // register cfg_regs_ifc_reg_timeNow_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_timeNow_dutView_0_EN;

  // register cfg_regs_ifc_reg_timeNow_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_timeNow_dutView_1_EN;

  // register cfg_regs_ifc_reg_timeNow_dutView_2
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_2;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_2_D_IN;
  wire cfg_regs_ifc_reg_timeNow_dutView_2_EN;

  // register cfg_regs_ifc_reg_timeNow_dutView_3
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_3;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_dutView_3_D_IN;
  wire cfg_regs_ifc_reg_timeNow_dutView_3_EN;

  // register cfg_regs_ifc_reg_timeNow_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeNow_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeNow_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeNow_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeNow_ifcs_2
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_2;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_2_D_IN;
  wire cfg_regs_ifc_reg_timeNow_ifcs_2_EN;

  // register cfg_regs_ifc_reg_timeNow_ifcs_3
  reg [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_3;
  wire [31 : 0] cfg_regs_ifc_reg_timeNow_ifcs_3_D_IN;
  wire cfg_regs_ifc_reg_timeNow_ifcs_3_EN;

  // register cfg_regs_ifc_reg_timeNow_midBusWrite
  reg cfg_regs_ifc_reg_timeNow_midBusWrite;
  wire cfg_regs_ifc_reg_timeNow_midBusWrite_D_IN,
       cfg_regs_ifc_reg_timeNow_midBusWrite_EN;

  // register cfg_regs_ifc_reg_timeStatus_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeStatus_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeStatus_crView_1_D_IN;
  wire cfg_regs_ifc_reg_timeStatus_crView_1_EN;

  // register cfg_regs_ifc_reg_timeStatus_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_timeStatus_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeStatus_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_timeStatus_dutView_0_EN;

  // register cfg_regs_ifc_reg_timeStatus_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_timeStatus_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeStatus_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_timeStatus_dutView_1_EN;

  // register cfg_regs_ifc_reg_timeStatus_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_timeStatus_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_timeStatus_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_timeStatus_ifcs_0_EN;

  // register cfg_regs_ifc_reg_timeStatus_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_timeStatus_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_timeStatus_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_timeStatus_ifcs_1_EN;

  // register cfg_regs_ifc_reg_timeStatus_midBusWrite
  reg cfg_regs_ifc_reg_timeStatus_midBusWrite;
  wire cfg_regs_ifc_reg_timeStatus_midBusWrite_D_IN,
       cfg_regs_ifc_reg_timeStatus_midBusWrite_EN;

  // register cfg_regs_ifc_reg_version_crView_1
  reg [31 : 0] cfg_regs_ifc_reg_version_crView_1;
  wire [31 : 0] cfg_regs_ifc_reg_version_crView_1_D_IN;
  wire cfg_regs_ifc_reg_version_crView_1_EN;

  // register cfg_regs_ifc_reg_version_dutView_0
  reg [31 : 0] cfg_regs_ifc_reg_version_dutView_0;
  wire [31 : 0] cfg_regs_ifc_reg_version_dutView_0_D_IN;
  wire cfg_regs_ifc_reg_version_dutView_0_EN;

  // register cfg_regs_ifc_reg_version_dutView_1
  reg [31 : 0] cfg_regs_ifc_reg_version_dutView_1;
  wire [31 : 0] cfg_regs_ifc_reg_version_dutView_1_D_IN;
  wire cfg_regs_ifc_reg_version_dutView_1_EN;

  // register cfg_regs_ifc_reg_version_ifcs_0
  reg [31 : 0] cfg_regs_ifc_reg_version_ifcs_0;
  wire [31 : 0] cfg_regs_ifc_reg_version_ifcs_0_D_IN;
  wire cfg_regs_ifc_reg_version_ifcs_0_EN;

  // register cfg_regs_ifc_reg_version_ifcs_1
  reg [31 : 0] cfg_regs_ifc_reg_version_ifcs_1;
  wire [31 : 0] cfg_regs_ifc_reg_version_ifcs_1_D_IN;
  wire cfg_regs_ifc_reg_version_ifcs_1_EN;

  // register cfg_regs_ifc_reg_version_midBusWrite
  reg cfg_regs_ifc_reg_version_midBusWrite;
  wire cfg_regs_ifc_reg_version_midBusWrite_D_IN,
       cfg_regs_ifc_reg_version_midBusWrite_EN;

  // register cfg_regs_ifc_wd_skipTimeRelative_wasWritten
  reg cfg_regs_ifc_wd_skipTimeRelative_wasWritten;
  wire cfg_regs_ifc_wd_skipTimeRelative_wasWritten_D_IN,
       cfg_regs_ifc_wd_skipTimeRelative_wasWritten_EN;

  // register cfg_regs_ifc_wd_timeCompare_wasWritten
  reg cfg_regs_ifc_wd_timeCompare_wasWritten;
  wire cfg_regs_ifc_wd_timeCompare_wasWritten_D_IN,
       cfg_regs_ifc_wd_timeCompare_wasWritten_EN;

  // register cfg_regs_ifc_wd_timeNow_wasWritten
  reg cfg_regs_ifc_wd_timeNow_wasWritten;
  wire cfg_regs_ifc_wd_timeNow_wasWritten_D_IN,
       cfg_regs_ifc_wd_timeNow_wasWritten_EN;

  // register counter_axiClkCnt
  reg [31 : 0] counter_axiClkCnt;
  wire [31 : 0] counter_axiClkCnt_D_IN;
  wire counter_axiClkCnt_EN;

  // register counter_refClkCnt
  reg [31 : 0] counter_refClkCnt;
  wire [31 : 0] counter_refClkCnt_D_IN;
  wire counter_refClkCnt_EN;

  // register counter_refClkPerPPS
  reg [31 : 0] counter_refClkPerPPS;
  wire [31 : 0] counter_refClkPerPPS_D_IN;
  wire counter_refClkPerPPS_EN;

  // register fall001MS
  reg fall001MS;
  wire fall001MS_D_IN, fall001MS_EN;

  // register fall250MS
  reg fall250MS;
  wire fall250MS_D_IN, fall250MS_EN;

  // register incr_last
  reg [119 : 0] incr_last;
  wire [119 : 0] incr_last_D_IN;
  wire incr_last_EN;

  // register incr_lsb
  reg [36 : 0] incr_lsb;
  wire [36 : 0] incr_lsb_D_IN;
  wire incr_lsb_EN;

  // register incr_lsb1
  reg [35 : 0] incr_lsb1;
  wire [35 : 0] incr_lsb1_D_IN;
  wire incr_lsb1_EN;

  // register incr_ltZero
  reg incr_ltZero;
  wire incr_ltZero_D_IN, incr_ltZero_EN;

  // register incr_ltZero1
  reg incr_ltZero1;
  wire incr_ltZero1_D_IN, incr_ltZero1_EN;

  // register incr_msb1
  reg [36 : 0] incr_msb1;
  wire [36 : 0] incr_msb1_D_IN;
  wire incr_msb1_EN;

  // register incr_msbD
  reg incr_msbD;
  wire incr_msbD_D_IN, incr_msbD_EN;

  // register incr_msbIncr
  reg [37 : 0] incr_msbIncr;
  wire [37 : 0] incr_msbIncr_D_IN;
  wire incr_msbIncr_EN;

  // register incr_whole
  reg [48 : 0] incr_whole;
  wire [48 : 0] incr_whole_D_IN;
  wire incr_whole_EN;

  // register incr_whole1
  reg [48 : 0] incr_whole1;
  wire [48 : 0] incr_whole1_D_IN;
  wire incr_whole1_EN;

  // register k1AccumDump
  reg [48 : 0] k1AccumDump;
  wire [48 : 0] k1AccumDump_D_IN;
  wire k1AccumDump_EN;

  // register k2Integrator
  reg [48 : 0] k2Integrator;
  wire [48 : 0] k2Integrator_D_IN;
  wire k2Integrator_EN;

  // register msbD
  reg msbD;
  wire msbD_D_IN, msbD_EN;

  // register oneSecondD
  reg oneSecondD;
  wire oneSecondD_D_IN, oneSecondD_EN;

  // register pfdFaster
  reg pfdFaster;
  wire pfdFaster_D_IN, pfdFaster_EN;

  // register pfdSlower
  reg pfdSlower;
  wire pfdSlower_D_IN, pfdSlower_EN;

  // register ppsD
  reg ppsD;
  wire ppsD_D_IN, ppsD_EN;

  // register ppsSync
  reg ppsSync;
  wire ppsSync_D_IN, ppsSync_EN;

  // register pulseIn001MS
  reg pulseIn001MS;
  wire pulseIn001MS_D_IN, pulseIn001MS_EN;

  // register pulseIn250MS
  reg pulseIn250MS;
  wire pulseIn250MS_D_IN, pulseIn250MS_EN;

  // register rise001MS
  reg rise001MS;
  wire rise001MS_D_IN, rise001MS_EN;

  // register rise250MS
  reg rise250MS;
  wire rise250MS_D_IN, rise250MS_EN;

  // register testCount
  reg [41 : 0] testCount;
  wire [41 : 0] testCount_D_IN;
  wire testCount_EN;

  // register toNB_nowBinary
  reg [79 : 0] toNB_nowBinary;
  wire [79 : 0] toNB_nowBinary_D_IN;
  wire toNB_nowBinary_EN;

  // register toNB_nowBinary1
  reg [79 : 0] toNB_nowBinary1;
  wire [79 : 0] toNB_nowBinary1_D_IN;
  wire toNB_nowBinary1_EN;

  // register toNO_mult_lev2a
  reg [63 : 0] toNO_mult_lev2a;
  wire [63 : 0] toNO_mult_lev2a_D_IN;
  wire toNO_mult_lev2a_EN;

  // register toNO_mult_lev2b
  reg [63 : 0] toNO_mult_lev2b;
  wire [63 : 0] toNO_mult_lev2b_D_IN;
  wire toNO_mult_lev2b_EN;

  // register toNO_nowOrdinary
  reg [79 : 0] toNO_nowOrdinary;
  wire [79 : 0] toNO_nowOrdinary_D_IN;
  wire toNO_nowOrdinary_EN;

  // register toNO_whole
  reg [47 : 0] toNO_whole;
  wire [47 : 0] toNO_whole_D_IN;
  wire toNO_whole_EN;

  // register toNT_mult_lev2a
  reg [63 : 0] toNT_mult_lev2a;
  wire [63 : 0] toNT_mult_lev2a_D_IN;
  wire toNT_mult_lev2a_EN;

  // register toNT_mult_lev2b
  reg [63 : 0] toNT_mult_lev2b;
  wire [63 : 0] toNT_mult_lev2b_D_IN;
  wire toNT_mult_lev2b_EN;

  // register toNT_nowTransparent
  reg [63 : 0] toNT_nowTransparent;
  wire [63 : 0] toNT_nowTransparent_D_IN;
  wire toNT_nowTransparent_EN;

  // register window001MSD
  reg window001MSD;
  wire window001MSD_D_IN, window001MSD_EN;

  // register window250MSD
  reg window250MSD;
  wire window250MSD_D_IN, window250MSD_EN;

  // ports of submodule cdcs_0
  wire [79 : 0] cdcs_0_now_phase,
		cdcs_0_phaseOrdinary_phase_src,
		cdcs_0_phase_src;
  wire [63 : 0] cdcs_0_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_0_timeFormat_format;
  wire cdcs_0_now_pps;

  // ports of submodule cdcs_1
  wire [79 : 0] cdcs_1_now_phase,
		cdcs_1_phaseOrdinary_phase_src,
		cdcs_1_phase_src;
  wire [63 : 0] cdcs_1_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_1_timeFormat_format;
  wire cdcs_1_now_pps;

  // ports of submodule cdcs_10
  wire [79 : 0] cdcs_10_now_phase,
		cdcs_10_phaseOrdinary_phase_src,
		cdcs_10_phase_src;
  wire [63 : 0] cdcs_10_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_10_timeFormat_format;
  wire cdcs_10_now_pps;

  // ports of submodule cdcs_11
  wire [79 : 0] cdcs_11_now_phase,
		cdcs_11_phaseOrdinary_phase_src,
		cdcs_11_phase_src;
  wire [63 : 0] cdcs_11_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_11_timeFormat_format;
  wire cdcs_11_now_pps;

  // ports of submodule cdcs_12
  wire [79 : 0] cdcs_12_now_phase,
		cdcs_12_phaseOrdinary_phase_src,
		cdcs_12_phase_src;
  wire [63 : 0] cdcs_12_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_12_timeFormat_format;
  wire cdcs_12_now_pps;

  // ports of submodule cdcs_13
  wire [79 : 0] cdcs_13_now_phase,
		cdcs_13_phaseOrdinary_phase_src,
		cdcs_13_phase_src;
  wire [63 : 0] cdcs_13_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_13_timeFormat_format;
  wire cdcs_13_now_pps;

  // ports of submodule cdcs_14
  wire [79 : 0] cdcs_14_now_phase,
		cdcs_14_phaseOrdinary_phase_src,
		cdcs_14_phase_src;
  wire [63 : 0] cdcs_14_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_14_timeFormat_format;
  wire cdcs_14_now_pps;

  // ports of submodule cdcs_15
  wire [79 : 0] cdcs_15_now_phase,
		cdcs_15_phaseOrdinary_phase_src,
		cdcs_15_phase_src;
  wire [63 : 0] cdcs_15_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_15_timeFormat_format;
  wire cdcs_15_now_pps;

  // ports of submodule cdcs_16
  wire [79 : 0] cdcs_16_now_phase,
		cdcs_16_phaseOrdinary_phase_src,
		cdcs_16_phase_src;
  wire [63 : 0] cdcs_16_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_16_timeFormat_format;
  wire cdcs_16_now_pps;

  // ports of submodule cdcs_17
  wire [79 : 0] cdcs_17_now_phase,
		cdcs_17_phaseOrdinary_phase_src,
		cdcs_17_phase_src;
  wire [63 : 0] cdcs_17_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_17_timeFormat_format;
  wire cdcs_17_now_pps;

  // ports of submodule cdcs_18
  wire [79 : 0] cdcs_18_now_phase,
		cdcs_18_phaseOrdinary_phase_src,
		cdcs_18_phase_src;
  wire [63 : 0] cdcs_18_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_18_timeFormat_format;
  wire cdcs_18_now_pps;

  // ports of submodule cdcs_19
  wire [79 : 0] cdcs_19_now_phase,
		cdcs_19_phaseOrdinary_phase_src,
		cdcs_19_phase_src;
  wire [63 : 0] cdcs_19_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_19_timeFormat_format;
  wire cdcs_19_now_pps;

  // ports of submodule cdcs_2
  wire [79 : 0] cdcs_2_now_phase,
		cdcs_2_phaseOrdinary_phase_src,
		cdcs_2_phase_src;
  wire [63 : 0] cdcs_2_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_2_timeFormat_format;
  wire cdcs_2_now_pps;

  // ports of submodule cdcs_20
  wire [79 : 0] cdcs_20_now_phase,
		cdcs_20_phaseOrdinary_phase_src,
		cdcs_20_phase_src;
  wire [63 : 0] cdcs_20_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_20_timeFormat_format;
  wire cdcs_20_now_pps;

  // ports of submodule cdcs_21
  wire [79 : 0] cdcs_21_now_phase,
		cdcs_21_phaseOrdinary_phase_src,
		cdcs_21_phase_src;
  wire [63 : 0] cdcs_21_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_21_timeFormat_format;
  wire cdcs_21_now_pps;

  // ports of submodule cdcs_22
  wire [79 : 0] cdcs_22_now_phase,
		cdcs_22_phaseOrdinary_phase_src,
		cdcs_22_phase_src;
  wire [63 : 0] cdcs_22_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_22_timeFormat_format;
  wire cdcs_22_now_pps;

  // ports of submodule cdcs_23
  wire [79 : 0] cdcs_23_now_phase,
		cdcs_23_phaseOrdinary_phase_src,
		cdcs_23_phase_src;
  wire [63 : 0] cdcs_23_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_23_timeFormat_format;
  wire cdcs_23_now_pps;

  // ports of submodule cdcs_24
  wire [79 : 0] cdcs_24_now_phase,
		cdcs_24_phaseOrdinary_phase_src,
		cdcs_24_phase_src;
  wire [63 : 0] cdcs_24_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_24_timeFormat_format;
  wire cdcs_24_now_pps;

  // ports of submodule cdcs_25
  wire [79 : 0] cdcs_25_now_phase,
		cdcs_25_phaseOrdinary_phase_src,
		cdcs_25_phase_src;
  wire [63 : 0] cdcs_25_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_25_timeFormat_format;
  wire cdcs_25_now_pps;

  // ports of submodule cdcs_26
  wire [79 : 0] cdcs_26_now_phase,
		cdcs_26_phaseOrdinary_phase_src,
		cdcs_26_phase_src;
  wire [63 : 0] cdcs_26_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_26_timeFormat_format;
  wire cdcs_26_now_pps;

  // ports of submodule cdcs_27
  wire [79 : 0] cdcs_27_now_phase,
		cdcs_27_phaseOrdinary_phase_src,
		cdcs_27_phase_src;
  wire [63 : 0] cdcs_27_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_27_timeFormat_format;
  wire cdcs_27_now_pps;

  // ports of submodule cdcs_28
  wire [79 : 0] cdcs_28_now_phase,
		cdcs_28_phaseOrdinary_phase_src,
		cdcs_28_phase_src;
  wire [63 : 0] cdcs_28_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_28_timeFormat_format;
  wire cdcs_28_now_pps;

  // ports of submodule cdcs_29
  wire [79 : 0] cdcs_29_now_phase,
		cdcs_29_phaseOrdinary_phase_src,
		cdcs_29_phase_src;
  wire [63 : 0] cdcs_29_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_29_timeFormat_format;
  wire cdcs_29_now_pps;

  // ports of submodule cdcs_3
  wire [79 : 0] cdcs_3_now_phase,
		cdcs_3_phaseOrdinary_phase_src,
		cdcs_3_phase_src;
  wire [63 : 0] cdcs_3_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_3_timeFormat_format;
  wire cdcs_3_now_pps;

  // ports of submodule cdcs_30
  wire [79 : 0] cdcs_30_now_phase,
		cdcs_30_phaseOrdinary_phase_src,
		cdcs_30_phase_src;
  wire [63 : 0] cdcs_30_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_30_timeFormat_format;
  wire cdcs_30_now_pps;

  // ports of submodule cdcs_31
  wire [79 : 0] cdcs_31_now_phase,
		cdcs_31_phaseOrdinary_phase_src,
		cdcs_31_phase_src;
  wire [63 : 0] cdcs_31_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_31_timeFormat_format;
  wire cdcs_31_now_pps;

  // ports of submodule cdcs_4
  wire [79 : 0] cdcs_4_now_phase,
		cdcs_4_phaseOrdinary_phase_src,
		cdcs_4_phase_src;
  wire [63 : 0] cdcs_4_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_4_timeFormat_format;
  wire cdcs_4_now_pps;

  // ports of submodule cdcs_5
  wire [79 : 0] cdcs_5_now_phase,
		cdcs_5_phaseOrdinary_phase_src,
		cdcs_5_phase_src;
  wire [63 : 0] cdcs_5_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_5_timeFormat_format;
  wire cdcs_5_now_pps;

  // ports of submodule cdcs_6
  wire [79 : 0] cdcs_6_now_phase,
		cdcs_6_phaseOrdinary_phase_src,
		cdcs_6_phase_src;
  wire [63 : 0] cdcs_6_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_6_timeFormat_format;
  wire cdcs_6_now_pps;

  // ports of submodule cdcs_7
  wire [79 : 0] cdcs_7_now_phase,
		cdcs_7_phaseOrdinary_phase_src,
		cdcs_7_phase_src;
  wire [63 : 0] cdcs_7_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_7_timeFormat_format;
  wire cdcs_7_now_pps;

  // ports of submodule cdcs_8
  wire [79 : 0] cdcs_8_now_phase,
		cdcs_8_phaseOrdinary_phase_src,
		cdcs_8_phase_src;
  wire [63 : 0] cdcs_8_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_8_timeFormat_format;
  wire cdcs_8_now_pps;

  // ports of submodule cdcs_9
  wire [79 : 0] cdcs_9_now_phase,
		cdcs_9_phaseOrdinary_phase_src,
		cdcs_9_phase_src;
  wire [63 : 0] cdcs_9_phaseTransparent_phase_src;
  wire [1 : 0] cdcs_9_timeFormat_format;
  wire cdcs_9_now_pps;

  // ports of submodule cfg_tlm_tlm_fifo_out
  wire [35 : 0] cfg_tlm_tlm_fifo_out_D_IN, cfg_tlm_tlm_fifo_out_D_OUT;
  wire cfg_tlm_tlm_fifo_out_CLR,
       cfg_tlm_tlm_fifo_out_DEQ,
       cfg_tlm_tlm_fifo_out_EMPTY_N,
       cfg_tlm_tlm_fifo_out_ENQ,
       cfg_tlm_tlm_fifo_out_FULL_N;

  // ports of submodule counter_axiClkCntCross
  wire [31 : 0] counter_axiClkCntCross_dD_OUT, counter_axiClkCntCross_sD_IN;
  wire counter_axiClkCntCross_sEN, counter_axiClkCntCross_sRDY;

  // ports of submodule crossing_sync_req
  wire [52 : 0] crossing_sync_req_dD_OUT, crossing_sync_req_sD_IN;
  wire crossing_sync_req_dDEQ,
       crossing_sync_req_dEMPTY_N,
       crossing_sync_req_sENQ,
       crossing_sync_req_sFULL_N;

  // ports of submodule crossing_sync_resp
  wire [35 : 0] crossing_sync_resp_dD_OUT, crossing_sync_resp_sD_IN;
  wire crossing_sync_resp_dDEQ,
       crossing_sync_resp_dEMPTY_N,
       crossing_sync_resp_sENQ,
       crossing_sync_resp_sFULL_N;

  // ports of submodule noCDC
  wire [79 : 0] noCDC_now_phase,
		noCDC_phaseOrdinary_phase_src,
		noCDC_phase_src;
  wire [63 : 0] noCDC_phaseTransparent_phase_src;
  wire [1 : 0] noCDC_timeFormat_format;
  wire noCDC_now_pps;

  // ports of submodule pfd
  wire [1 : 0] pfd_direction, pfd_mode;
  wire pfd_inReset, pfd_oneSecond, pfd_pps;

  // ports of submodule xactor
  wire [52 : 0] xactor_tlm_tx_get;
  wire [35 : 0] xactor_tlm_rx_put;
  wire [31 : 0] xactor_rdata, xactor_wdata;
  wire [11 : 0] xactor_araddr, xactor_awaddr;
  wire [3 : 0] xactor_wstrb;
  wire [2 : 0] xactor_arprot, xactor_awprot;
  wire [1 : 0] xactor_bresp, xactor_rresp;
  wire xactor_EN_tlm_rx_put,
       xactor_EN_tlm_tx_get,
       xactor_RDY_tlm_rx_put,
       xactor_RDY_tlm_tx_get,
       xactor_arready,
       xactor_arvalid,
       xactor_awready,
       xactor_awvalid,
       xactor_bready,
       xactor_bvalid,
       xactor_rready,
       xactor_rvalid,
       xactor_wready,
       xactor_wvalid;

  // rule scheduling signals
  wire CAN_FIRE_RL_calculateFormats,
       CAN_FIRE_RL_cdcConnects,
       CAN_FIRE_RL_cdcSetTimeFormat,
       CAN_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_state_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_local_write,
       CAN_FIRE_RL_cfg_regs_ifc_reg_version_maintainDebugDut,
       CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear,
       CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write,
       CAN_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear,
       CAN_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write,
       CAN_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear,
       CAN_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write,
       CAN_FIRE_RL_cfg_tlm_read_op,
       CAN_FIRE_RL_cfg_tlm_write_op,
       CAN_FIRE_RL_connectCount,
       CAN_FIRE_RL_counter_updateAxiClkCnt,
       CAN_FIRE_RL_counter_updateAxiClkCntCfgReg,
       CAN_FIRE_RL_counter_updateAxiClkCntCross,
       CAN_FIRE_RL_counter_updatePpsCnt,
       CAN_FIRE_RL_counter_updateRefClkCnt,
       CAN_FIRE_RL_counter_updateRefClkCntCfgReg,
       CAN_FIRE_RL_counter_updateRefClkPerPPS,
       CAN_FIRE_RL_doInitialize,
       CAN_FIRE_RL_doLocalOrPPS,
       CAN_FIRE_RL_doPPS,
       CAN_FIRE_RL_doTestMode,
       CAN_FIRE_RL_doTimeCompare,
       CAN_FIRE_RL_edgeDetect,
       CAN_FIRE_RL_incr_doIncr,
       CAN_FIRE_RL_incr_doLoad,
       CAN_FIRE_RL_incr_every,
       CAN_FIRE_RL_incr_pipeIncr,
       CAN_FIRE_RL_incr_pipeLoad,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_pfdConnects,
       CAN_FIRE_RL_toNB_every,
       CAN_FIRE_RL_toNO_every,
       CAN_FIRE_RL_toNT_every,
       CAN_FIRE_RL_trackMsb,
       CAN_FIRE_RL_updateTimeLastPPS,
       CAN_FIRE_pps,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       WILL_FIRE_RL_calculateFormats,
       WILL_FIRE_RL_cdcConnects,
       WILL_FIRE_RL_cdcSetTimeFormat,
       WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_state_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_local_write,
       WILL_FIRE_RL_cfg_regs_ifc_reg_version_maintainDebugDut,
       WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear,
       WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write,
       WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear,
       WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write,
       WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear,
       WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write,
       WILL_FIRE_RL_cfg_tlm_read_op,
       WILL_FIRE_RL_cfg_tlm_write_op,
       WILL_FIRE_RL_connectCount,
       WILL_FIRE_RL_counter_updateAxiClkCnt,
       WILL_FIRE_RL_counter_updateAxiClkCntCfgReg,
       WILL_FIRE_RL_counter_updateAxiClkCntCross,
       WILL_FIRE_RL_counter_updatePpsCnt,
       WILL_FIRE_RL_counter_updateRefClkCnt,
       WILL_FIRE_RL_counter_updateRefClkCntCfgReg,
       WILL_FIRE_RL_counter_updateRefClkPerPPS,
       WILL_FIRE_RL_doInitialize,
       WILL_FIRE_RL_doLocalOrPPS,
       WILL_FIRE_RL_doPPS,
       WILL_FIRE_RL_doTestMode,
       WILL_FIRE_RL_doTimeCompare,
       WILL_FIRE_RL_edgeDetect,
       WILL_FIRE_RL_incr_doIncr,
       WILL_FIRE_RL_incr_doLoad,
       WILL_FIRE_RL_incr_every,
       WILL_FIRE_RL_incr_pipeIncr,
       WILL_FIRE_RL_incr_pipeLoad,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_pfdConnects,
       WILL_FIRE_RL_toNB_every,
       WILL_FIRE_RL_toNO_every,
       WILL_FIRE_RL_toNT_every,
       WILL_FIRE_RL_trackMsb,
       WILL_FIRE_RL_updateTimeLastPPS,
       WILL_FIRE_pps,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID;

  // inputs to muxes for submodule ports
  wire [120 : 0] MUX_incr_valueOp_wset_1__VAL_1;
  wire [48 : 0] MUX_incr_whole_write_1__VAL_1,
		MUX_incr_whole_write_1__VAL_2,
		MUX_k1AccumDump_write_1__VAL_1,
		MUX_k2Integrator_write_1__VAL_1;
  wire [37 : 0] MUX_incr_msbIncr_write_1__VAL_1,
		MUX_incr_msbIncr_write_1__VAL_2;
  wire [36 : 0] MUX_incr_lsb_write_1__VAL_1,
		MUX_incr_lsb_write_1__VAL_2,
		MUX_incr_msb1_write_1__VAL_1;
  wire [35 : 0] MUX_cfg_tlm_tlm_fifo_out_enq_1__VAL_1;
  wire [31 : 0] MUX_cfg_regs_ifc_reg_phaseInc_dutView_1_write_1__VAL_2,
		MUX_cfg_regs_ifc_reg_ppsCnt_write_1__VAL_2,
		MUX_cfg_regs_ifc_reg_refClkCnt_write_1__VAL_2,
		MUX_cfg_regs_ifc_reg_timeNow_dutView_0_write_1__VAL_2,
		MUX_cfg_regs_ifc_reg_timeNow_dutView_2_write_1__VAL_2,
		MUX_cfg_regs_ifc_reg_timeStatus_dutView_0_write_1__VAL_2;
  wire MUX_incr_ltZero_write_1__VAL_1,
       MUX_k1AccumDump_write_1__SEL_1,
       MUX_k2Integrator_write_1__SEL_1;

  // remaining internal signals
  reg [71 : 0] x__h64861;
  reg [31 : 0] x__h56333,
	       x__h56335,
	       x__h56343,
	       x__h56345,
	       x__h56347,
	       x__h56373,
	       x__h56375,
	       x__h56379,
	       x__h56381,
	       x__h56387,
	       x__h56389,
	       x__h56391,
	       y__h56314,
	       y__h56316,
	       y__h56322,
	       y__h56346,
	       y__h56352,
	       y__h56358,
	       y__h56366,
	       y__h56374,
	       y__h56376,
	       y__h56380,
	       y__h56382,
	       y__h56388,
	       y__h56390,
	       y__h56392;
  wire [119 : 0] IF_cfg_regs_ifc_wd_timeNow_wasWritten_53_THEN__ETC___d569;
  wire [95 : 0] x__h79931, x__h80612;
  wire [71 : 0] f__h79683,
		i___1_f__h79675,
		i_f__h79681,
		next_f__h80600,
		x_f__h64619;
  wire [63 : 0] _0_CONCAT_incr_last_BITS_71_TO_40_CONCAT_0_MINU_ETC__q3,
		_0_CONCAT_incr_last_BITS_89_TO_48_CONCAT_0_MINU_ETC__q2,
		cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751,
		lev35597_BITS_61_TO_0_CONCAT_0_PLUS_lev35597__q4,
		lev35818_BITS_61_TO_0_CONCAT_0_PLUS_lev35818__q5,
		lev3__h65597,
		lev3__h65818,
		x15__h65992,
		x15__h66109,
		x262145__h65994,
		x262145__h66111,
		x__h65988,
		x__h66029,
		x__h66105,
		x__h66146,
		y__h66087,
		y__h66212;
  wire [48 : 0] IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d718,
		IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d722,
		b__h79512,
		k1AccumDump_14_PLUS_k2Integrator_25___d731;
  wire [47 : 0] IF_incr_ltZero1_04_THEN_incr_last_05_BITS_119__ETC___d414,
		b__h80608,
		incr_last_BITS_119_TO_72__q1,
		x_i__h64618;
  wire [41 : 0] x__h84600;
  wire [36 : 0] x__h64719, y__h64720, y__h64722;
  wire [31 : 0] v__h46155,
		v__h46725,
		v__h47435,
		v__h48160,
		v__h48730,
		v__h49300,
		v__h49870,
		v__h50990,
		v__h51560,
		v__h52309,
		value__h83697,
		x__h56303,
		x__h56305,
		x__h56307,
		x__h56309,
		x__h56311,
		x__h56317,
		x__h56319,
		x__h56323,
		x__h56325,
		x__h56331,
		x__h56337,
		x__h56339,
		x__h56341,
		x__h56353,
		x__h56355,
		x__h56359,
		x__h56361,
		x__h56363,
		x__h56367,
		x__h56369,
		x__h56371,
		x__h56377,
		x__h56383,
		x__h56385,
		x_data__h56417,
		y__h56304,
		y__h56306,
		y__h56308,
		y__h56310,
		y__h56312,
		y__h56318,
		y__h56320,
		y__h56324,
		y__h56332,
		y__h56338,
		y__h56340,
		y__h56342,
		y__h56348,
		y__h56354,
		y__h56356,
		y__h56360,
		y__h56362,
		y__h56364,
		y__h56368,
		y__h56370,
		y__h56372,
		y__h56378,
		y__h56384,
		y__h56386;
  wire [1 : 0] IF_ppsEventSrc_whas__55_OR_ppsEventTst_whas__5_ETC___d696,
	       x__h79695;
  wire IF_rise001MS_59_THEN_cfg_regs_ifc_reg_timeStat_ETC___d701,
       IF_rise250MS_68_THEN_cfg_regs_ifc_reg_timeStat_ETC___d706,
       NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777,
       NOT_incr_last_05_BIT_62_83_84_AND_NOT_incr_las_ETC___d609,
       _dfoo17,
       _dfoo21,
       b__h64628,
       b__h64643,
       i__h79682,
       incr_last_05_BIT_62_83_AND_incr_last_05_BIT_63_ETC___d618,
       testCount_58_ULT_1000000000000___d759;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = xactor_awready ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = xactor_wready ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = xactor_bvalid ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = xactor_bresp ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = xactor_arready ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = xactor_rvalid ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = xactor_rdata ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = xactor_rresp ;

  // action method pps
  assign CAN_FIRE_pps = 1'd1 ;
  assign WILL_FIRE_pps = 1'd1 ;

  // value method pfd_monitor
  assign pfd_monitor =
	     (pfd_direction[1] && !pfd_direction[0]) ?
	       2'd1 :
	       ((!pfd_direction[1] && pfd_direction[0]) ? 2'd3 : 2'd0) ;

  // value method now_ref
  assign now_ref = noCDC_now_phase ;

  // value method now_pps_ref
  assign now_pps_ref = noCDC_now_pps ;

  // value method now_0_now
  assign now_0 = cdcs_0_now_phase ;

  // value method now_1_now
  assign now_1 = cdcs_1_now_phase ;

  // value method now_2_now
  assign now_2 = cdcs_2_now_phase ;

  // value method now_3_now
  assign now_3 = cdcs_3_now_phase ;

  // value method now_4_now
  assign now_4 = cdcs_4_now_phase ;

  // value method now_5_now
  assign now_5 = cdcs_5_now_phase ;

  // value method now_6_now
  assign now_6 = cdcs_6_now_phase ;

  // value method now_7_now
  assign now_7 = cdcs_7_now_phase ;

  // value method now_8_now
  assign now_8 = cdcs_8_now_phase ;

  // value method now_9_now
  assign now_9 = cdcs_9_now_phase ;

  // value method now_10_now
  assign now_10 = cdcs_10_now_phase ;

  // value method now_11_now
  assign now_11 = cdcs_11_now_phase ;

  // value method now_12_now
  assign now_12 = cdcs_12_now_phase ;

  // value method now_13_now
  assign now_13 = cdcs_13_now_phase ;

  // value method now_14_now
  assign now_14 = cdcs_14_now_phase ;

  // value method now_15_now
  assign now_15 = cdcs_15_now_phase ;

  // value method now_16_now
  assign now_16 = cdcs_16_now_phase ;

  // value method now_17_now
  assign now_17 = cdcs_17_now_phase ;

  // value method now_18_now
  assign now_18 = cdcs_18_now_phase ;

  // value method now_19_now
  assign now_19 = cdcs_19_now_phase ;

  // value method now_20_now
  assign now_20 = cdcs_20_now_phase ;

  // value method now_21_now
  assign now_21 = cdcs_21_now_phase ;

  // value method now_22_now
  assign now_22 = cdcs_22_now_phase ;

  // value method now_23_now
  assign now_23 = cdcs_23_now_phase ;

  // value method now_24_now
  assign now_24 = cdcs_24_now_phase ;

  // value method now_25_now
  assign now_25 = cdcs_25_now_phase ;

  // value method now_26_now
  assign now_26 = cdcs_26_now_phase ;

  // value method now_27_now
  assign now_27 = cdcs_27_now_phase ;

  // value method now_28_now
  assign now_28 = cdcs_28_now_phase ;

  // value method now_29_now
  assign now_29 = cdcs_29_now_phase ;

  // value method now_30_now
  assign now_30 = cdcs_30_now_phase ;

  // value method now_31_now
  assign now_31 = cdcs_31_now_phase ;

  // value method now_pps_0_now_pps
  assign now_pps_0 = cdcs_0_now_pps ;

  // value method now_pps_1_now_pps
  assign now_pps_1 = cdcs_1_now_pps ;

  // value method now_pps_2_now_pps
  assign now_pps_2 = cdcs_2_now_pps ;

  // value method now_pps_3_now_pps
  assign now_pps_3 = cdcs_3_now_pps ;

  // value method now_pps_4_now_pps
  assign now_pps_4 = cdcs_4_now_pps ;

  // value method now_pps_5_now_pps
  assign now_pps_5 = cdcs_5_now_pps ;

  // value method now_pps_6_now_pps
  assign now_pps_6 = cdcs_6_now_pps ;

  // value method now_pps_7_now_pps
  assign now_pps_7 = cdcs_7_now_pps ;

  // value method now_pps_8_now_pps
  assign now_pps_8 = cdcs_8_now_pps ;

  // value method now_pps_9_now_pps
  assign now_pps_9 = cdcs_9_now_pps ;

  // value method now_pps_10_now_pps
  assign now_pps_10 = cdcs_10_now_pps ;

  // value method now_pps_11_now_pps
  assign now_pps_11 = cdcs_11_now_pps ;

  // value method now_pps_12_now_pps
  assign now_pps_12 = cdcs_12_now_pps ;

  // value method now_pps_13_now_pps
  assign now_pps_13 = cdcs_13_now_pps ;

  // value method now_pps_14_now_pps
  assign now_pps_14 = cdcs_14_now_pps ;

  // value method now_pps_15_now_pps
  assign now_pps_15 = cdcs_15_now_pps ;

  // value method now_pps_16_now_pps
  assign now_pps_16 = cdcs_16_now_pps ;

  // value method now_pps_17_now_pps
  assign now_pps_17 = cdcs_17_now_pps ;

  // value method now_pps_18_now_pps
  assign now_pps_18 = cdcs_18_now_pps ;

  // value method now_pps_19_now_pps
  assign now_pps_19 = cdcs_19_now_pps ;

  // value method now_pps_20_now_pps
  assign now_pps_20 = cdcs_20_now_pps ;

  // value method now_pps_21_now_pps
  assign now_pps_21 = cdcs_21_now_pps ;

  // value method now_pps_22_now_pps
  assign now_pps_22 = cdcs_22_now_pps ;

  // value method now_pps_23_now_pps
  assign now_pps_23 = cdcs_23_now_pps ;

  // value method now_pps_24_now_pps
  assign now_pps_24 = cdcs_24_now_pps ;

  // value method now_pps_25_now_pps
  assign now_pps_25 = cdcs_25_now_pps ;

  // value method now_pps_26_now_pps
  assign now_pps_26 = cdcs_26_now_pps ;

  // value method now_pps_27_now_pps
  assign now_pps_27 = cdcs_27_now_pps ;

  // value method now_pps_28_now_pps
  assign now_pps_28 = cdcs_28_now_pps ;

  // value method now_pps_29_now_pps
  assign now_pps_29 = cdcs_29_now_pps ;

  // value method now_pps_30_now_pps
  assign now_pps_30 = cdcs_30_now_pps ;

  // value method now_pps_31_now_pps
  assign now_pps_31 = cdcs_31_now_pps ;

  // submodule cdcs_0
  nowCDC cdcs_0(.now_clk(now_clk_0),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_0_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_0_phaseTransparent_phase_src),
		.phase_src(cdcs_0_phase_src),
		.timeFormat_format(cdcs_0_timeFormat_format),
		.now_pps(cdcs_0_now_pps),
		.now_phase(cdcs_0_now_phase));

  // submodule cdcs_1
  nowCDC cdcs_1(.now_clk(now_clk_1),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_1_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_1_phaseTransparent_phase_src),
		.phase_src(cdcs_1_phase_src),
		.timeFormat_format(cdcs_1_timeFormat_format),
		.now_pps(cdcs_1_now_pps),
		.now_phase(cdcs_1_now_phase));

  // submodule cdcs_10
  nowCDC cdcs_10(.now_clk(now_clk_10),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_10_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_10_phaseTransparent_phase_src),
		 .phase_src(cdcs_10_phase_src),
		 .timeFormat_format(cdcs_10_timeFormat_format),
		 .now_pps(cdcs_10_now_pps),
		 .now_phase(cdcs_10_now_phase));

  // submodule cdcs_11
  nowCDC cdcs_11(.now_clk(now_clk_11),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_11_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_11_phaseTransparent_phase_src),
		 .phase_src(cdcs_11_phase_src),
		 .timeFormat_format(cdcs_11_timeFormat_format),
		 .now_pps(cdcs_11_now_pps),
		 .now_phase(cdcs_11_now_phase));

  // submodule cdcs_12
  nowCDC cdcs_12(.now_clk(now_clk_12),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_12_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_12_phaseTransparent_phase_src),
		 .phase_src(cdcs_12_phase_src),
		 .timeFormat_format(cdcs_12_timeFormat_format),
		 .now_pps(cdcs_12_now_pps),
		 .now_phase(cdcs_12_now_phase));

  // submodule cdcs_13
  nowCDC cdcs_13(.now_clk(now_clk_13),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_13_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_13_phaseTransparent_phase_src),
		 .phase_src(cdcs_13_phase_src),
		 .timeFormat_format(cdcs_13_timeFormat_format),
		 .now_pps(cdcs_13_now_pps),
		 .now_phase(cdcs_13_now_phase));

  // submodule cdcs_14
  nowCDC cdcs_14(.now_clk(now_clk_14),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_14_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_14_phaseTransparent_phase_src),
		 .phase_src(cdcs_14_phase_src),
		 .timeFormat_format(cdcs_14_timeFormat_format),
		 .now_pps(cdcs_14_now_pps),
		 .now_phase(cdcs_14_now_phase));

  // submodule cdcs_15
  nowCDC cdcs_15(.now_clk(now_clk_15),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_15_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_15_phaseTransparent_phase_src),
		 .phase_src(cdcs_15_phase_src),
		 .timeFormat_format(cdcs_15_timeFormat_format),
		 .now_pps(cdcs_15_now_pps),
		 .now_phase(cdcs_15_now_phase));

  // submodule cdcs_16
  nowCDC cdcs_16(.now_clk(now_clk_16),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_16_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_16_phaseTransparent_phase_src),
		 .phase_src(cdcs_16_phase_src),
		 .timeFormat_format(cdcs_16_timeFormat_format),
		 .now_pps(cdcs_16_now_pps),
		 .now_phase(cdcs_16_now_phase));

  // submodule cdcs_17
  nowCDC cdcs_17(.now_clk(now_clk_17),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_17_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_17_phaseTransparent_phase_src),
		 .phase_src(cdcs_17_phase_src),
		 .timeFormat_format(cdcs_17_timeFormat_format),
		 .now_pps(cdcs_17_now_pps),
		 .now_phase(cdcs_17_now_phase));

  // submodule cdcs_18
  nowCDC cdcs_18(.now_clk(now_clk_18),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_18_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_18_phaseTransparent_phase_src),
		 .phase_src(cdcs_18_phase_src),
		 .timeFormat_format(cdcs_18_timeFormat_format),
		 .now_pps(cdcs_18_now_pps),
		 .now_phase(cdcs_18_now_phase));

  // submodule cdcs_19
  nowCDC cdcs_19(.now_clk(now_clk_19),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_19_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_19_phaseTransparent_phase_src),
		 .phase_src(cdcs_19_phase_src),
		 .timeFormat_format(cdcs_19_timeFormat_format),
		 .now_pps(cdcs_19_now_pps),
		 .now_phase(cdcs_19_now_phase));

  // submodule cdcs_2
  nowCDC cdcs_2(.now_clk(now_clk_2),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_2_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_2_phaseTransparent_phase_src),
		.phase_src(cdcs_2_phase_src),
		.timeFormat_format(cdcs_2_timeFormat_format),
		.now_pps(cdcs_2_now_pps),
		.now_phase(cdcs_2_now_phase));

  // submodule cdcs_20
  nowCDC cdcs_20(.now_clk(now_clk_20),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_20_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_20_phaseTransparent_phase_src),
		 .phase_src(cdcs_20_phase_src),
		 .timeFormat_format(cdcs_20_timeFormat_format),
		 .now_pps(cdcs_20_now_pps),
		 .now_phase(cdcs_20_now_phase));

  // submodule cdcs_21
  nowCDC cdcs_21(.now_clk(now_clk_21),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_21_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_21_phaseTransparent_phase_src),
		 .phase_src(cdcs_21_phase_src),
		 .timeFormat_format(cdcs_21_timeFormat_format),
		 .now_pps(cdcs_21_now_pps),
		 .now_phase(cdcs_21_now_phase));

  // submodule cdcs_22
  nowCDC cdcs_22(.now_clk(now_clk_22),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_22_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_22_phaseTransparent_phase_src),
		 .phase_src(cdcs_22_phase_src),
		 .timeFormat_format(cdcs_22_timeFormat_format),
		 .now_pps(cdcs_22_now_pps),
		 .now_phase(cdcs_22_now_phase));

  // submodule cdcs_23
  nowCDC cdcs_23(.now_clk(now_clk_23),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_23_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_23_phaseTransparent_phase_src),
		 .phase_src(cdcs_23_phase_src),
		 .timeFormat_format(cdcs_23_timeFormat_format),
		 .now_pps(cdcs_23_now_pps),
		 .now_phase(cdcs_23_now_phase));

  // submodule cdcs_24
  nowCDC cdcs_24(.now_clk(now_clk_24),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_24_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_24_phaseTransparent_phase_src),
		 .phase_src(cdcs_24_phase_src),
		 .timeFormat_format(cdcs_24_timeFormat_format),
		 .now_pps(cdcs_24_now_pps),
		 .now_phase(cdcs_24_now_phase));

  // submodule cdcs_25
  nowCDC cdcs_25(.now_clk(now_clk_25),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_25_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_25_phaseTransparent_phase_src),
		 .phase_src(cdcs_25_phase_src),
		 .timeFormat_format(cdcs_25_timeFormat_format),
		 .now_pps(cdcs_25_now_pps),
		 .now_phase(cdcs_25_now_phase));

  // submodule cdcs_26
  nowCDC cdcs_26(.now_clk(now_clk_26),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_26_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_26_phaseTransparent_phase_src),
		 .phase_src(cdcs_26_phase_src),
		 .timeFormat_format(cdcs_26_timeFormat_format),
		 .now_pps(cdcs_26_now_pps),
		 .now_phase(cdcs_26_now_phase));

  // submodule cdcs_27
  nowCDC cdcs_27(.now_clk(now_clk_27),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_27_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_27_phaseTransparent_phase_src),
		 .phase_src(cdcs_27_phase_src),
		 .timeFormat_format(cdcs_27_timeFormat_format),
		 .now_pps(cdcs_27_now_pps),
		 .now_phase(cdcs_27_now_phase));

  // submodule cdcs_28
  nowCDC cdcs_28(.now_clk(now_clk_28),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_28_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_28_phaseTransparent_phase_src),
		 .phase_src(cdcs_28_phase_src),
		 .timeFormat_format(cdcs_28_timeFormat_format),
		 .now_pps(cdcs_28_now_pps),
		 .now_phase(cdcs_28_now_phase));

  // submodule cdcs_29
  nowCDC cdcs_29(.now_clk(now_clk_29),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_29_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_29_phaseTransparent_phase_src),
		 .phase_src(cdcs_29_phase_src),
		 .timeFormat_format(cdcs_29_timeFormat_format),
		 .now_pps(cdcs_29_now_pps),
		 .now_phase(cdcs_29_now_phase));

  // submodule cdcs_3
  nowCDC cdcs_3(.now_clk(now_clk_3),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_3_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_3_phaseTransparent_phase_src),
		.phase_src(cdcs_3_phase_src),
		.timeFormat_format(cdcs_3_timeFormat_format),
		.now_pps(cdcs_3_now_pps),
		.now_phase(cdcs_3_now_phase));

  // submodule cdcs_30
  nowCDC cdcs_30(.now_clk(now_clk_30),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_30_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_30_phaseTransparent_phase_src),
		 .phase_src(cdcs_30_phase_src),
		 .timeFormat_format(cdcs_30_timeFormat_format),
		 .now_pps(cdcs_30_now_pps),
		 .now_phase(cdcs_30_now_phase));

  // submodule cdcs_31
  nowCDC cdcs_31(.now_clk(now_clk_31),
		 .ref_clk(ref_clk),
		 .ref_rstn(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(cdcs_31_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(cdcs_31_phaseTransparent_phase_src),
		 .phase_src(cdcs_31_phase_src),
		 .timeFormat_format(cdcs_31_timeFormat_format),
		 .now_pps(cdcs_31_now_pps),
		 .now_phase(cdcs_31_now_phase));

  // submodule cdcs_4
  nowCDC cdcs_4(.now_clk(now_clk_4),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_4_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_4_phaseTransparent_phase_src),
		.phase_src(cdcs_4_phase_src),
		.timeFormat_format(cdcs_4_timeFormat_format),
		.now_pps(cdcs_4_now_pps),
		.now_phase(cdcs_4_now_phase));

  // submodule cdcs_5
  nowCDC cdcs_5(.now_clk(now_clk_5),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_5_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_5_phaseTransparent_phase_src),
		.phase_src(cdcs_5_phase_src),
		.timeFormat_format(cdcs_5_timeFormat_format),
		.now_pps(cdcs_5_now_pps),
		.now_phase(cdcs_5_now_phase));

  // submodule cdcs_6
  nowCDC cdcs_6(.now_clk(now_clk_6),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_6_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_6_phaseTransparent_phase_src),
		.phase_src(cdcs_6_phase_src),
		.timeFormat_format(cdcs_6_timeFormat_format),
		.now_pps(cdcs_6_now_pps),
		.now_phase(cdcs_6_now_phase));

  // submodule cdcs_7
  nowCDC cdcs_7(.now_clk(now_clk_7),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_7_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_7_phaseTransparent_phase_src),
		.phase_src(cdcs_7_phase_src),
		.timeFormat_format(cdcs_7_timeFormat_format),
		.now_pps(cdcs_7_now_pps),
		.now_phase(cdcs_7_now_phase));

  // submodule cdcs_8
  nowCDC cdcs_8(.now_clk(now_clk_8),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_8_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_8_phaseTransparent_phase_src),
		.phase_src(cdcs_8_phase_src),
		.timeFormat_format(cdcs_8_timeFormat_format),
		.now_pps(cdcs_8_now_pps),
		.now_phase(cdcs_8_now_phase));

  // submodule cdcs_9
  nowCDC cdcs_9(.now_clk(now_clk_9),
		.ref_clk(ref_clk),
		.ref_rstn(ref_rstn__DELAYED),
		.phaseOrdinary_phase_src(cdcs_9_phaseOrdinary_phase_src),
		.phaseTransparent_phase_src(cdcs_9_phaseTransparent_phase_src),
		.phase_src(cdcs_9_phase_src),
		.timeFormat_format(cdcs_9_timeFormat_format),
		.now_pps(cdcs_9_now_pps),
		.now_phase(cdcs_9_now_phase));

  // submodule cfg_tlm_tlm_fifo_out
  FIFO2 #(.width(32'd36),
	  .guarded(32'd1)) cfg_tlm_tlm_fifo_out(.RST(ref_rstn__DELAYED),
						.CLK(ref_clk),
						.D_IN(cfg_tlm_tlm_fifo_out_D_IN),
						.ENQ(cfg_tlm_tlm_fifo_out_ENQ),
						.DEQ(cfg_tlm_tlm_fifo_out_DEQ),
						.CLR(cfg_tlm_tlm_fifo_out_CLR),
						.D_OUT(cfg_tlm_tlm_fifo_out_D_OUT),
						.FULL_N(cfg_tlm_tlm_fifo_out_FULL_N),
						.EMPTY_N(cfg_tlm_tlm_fifo_out_EMPTY_N));

  // submodule counter_axiClkCntCross
  SyncRegister #(.width(32'd32),
		 .init(32'd0)) counter_axiClkCntCross(.sCLK(s_axi_aclk),
						      .dCLK(ref_clk),
						      .sRST(s_axi_aresetn__DELAYED),
						      .sD_IN(counter_axiClkCntCross_sD_IN),
						      .sEN(counter_axiClkCntCross_sEN),
						      .sRDY(counter_axiClkCntCross_sRDY),
						      .dD_OUT(counter_axiClkCntCross_dD_OUT));

  // submodule crossing_sync_req
  SyncFIFO #(.dataWidth(32'd53),
	     .depth(32'd2),
	     .indxWidth(32'd1)) crossing_sync_req(.sCLK(s_axi_aclk),
						  .dCLK(ref_clk),
						  .sRST(s_axi_aresetn__DELAYED),
						  .sD_IN(crossing_sync_req_sD_IN),
						  .sENQ(crossing_sync_req_sENQ),
						  .dDEQ(crossing_sync_req_dDEQ),
						  .sFULL_N(crossing_sync_req_sFULL_N),
						  .dEMPTY_N(crossing_sync_req_dEMPTY_N),
						  .dD_OUT(crossing_sync_req_dD_OUT));

  // submodule crossing_sync_resp
  SyncFIFO #(.dataWidth(32'd36),
	     .depth(32'd2),
	     .indxWidth(32'd1)) crossing_sync_resp(.sCLK(ref_clk),
						   .dCLK(s_axi_aclk),
						   .sRST(ref_rstn__DELAYED),
						   .sD_IN(crossing_sync_resp_sD_IN),
						   .sENQ(crossing_sync_resp_sENQ),
						   .dDEQ(crossing_sync_resp_dDEQ),
						   .sFULL_N(crossing_sync_resp_sFULL_N),
						   .dEMPTY_N(crossing_sync_resp_dEMPTY_N),
						   .dD_OUT(crossing_sync_resp_dD_OUT));

  // submodule noCDC
  nowNoCDC noCDC(.ref_clk(ref_clk),
		 .ref_rst(ref_rstn__DELAYED),
		 .phaseOrdinary_phase_src(noCDC_phaseOrdinary_phase_src),
		 .phaseTransparent_phase_src(noCDC_phaseTransparent_phase_src),
		 .phase_src(noCDC_phase_src),
		 .timeFormat_format(noCDC_timeFormat_format),
		 .now_pps(noCDC_now_pps),
		 .now_phase(noCDC_now_phase));

  // submodule pfd
  mkPhaseFrequencyDetector pfd(.CLK(ref_clk),
			       .RST_N(ref_rstn__DELAYED),
			       .mode(pfd_mode),
			       .oneSecond(pfd_oneSecond),
			       .pps(pfd_pps),
			       .direction(pfd_direction),
			       .inReset(pfd_inReset));

  // submodule xactor
  mkA4LSlave xactor(.CLK(s_axi_aclk),
		    .RST_N(s_axi_aresetn__DELAYED),
		    .araddr(xactor_araddr),
		    .arprot(xactor_arprot),
		    .awaddr(xactor_awaddr),
		    .awprot(xactor_awprot),
		    .tlm_rx_put(xactor_tlm_rx_put),
		    .wdata(xactor_wdata),
		    .wstrb(xactor_wstrb),
		    .EN_tlm_tx_get(xactor_EN_tlm_tx_get),
		    .EN_tlm_rx_put(xactor_EN_tlm_rx_put),
		    .awvalid(xactor_awvalid),
		    .wvalid(xactor_wvalid),
		    .bready(xactor_bready),
		    .arvalid(xactor_arvalid),
		    .rready(xactor_rready),
		    .tlm_tx_get(xactor_tlm_tx_get),
		    .RDY_tlm_tx_get(xactor_RDY_tlm_tx_get),
		    .RDY_tlm_rx_put(xactor_RDY_tlm_rx_put),
		    .awready(xactor_awready),
		    .wready(xactor_wready),
		    .bvalid(xactor_bvalid),
		    .bresp(xactor_bresp),
		    .arready(xactor_arready),
		    .rvalid(xactor_rvalid),
		    .rdata(xactor_rdata),
		    .rresp(xactor_rresp));

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     crossing_sync_req_sFULL_N && xactor_RDY_tlm_tx_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     crossing_sync_resp_dEMPTY_N && xactor_RDY_tlm_rx_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     crossing_sync_req_dEMPTY_N && cfg_tlm_tlm_fifo_out_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     crossing_sync_resp_sFULL_N && cfg_tlm_tlm_fifo_out_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_trackMsb
  assign CAN_FIRE_RL_trackMsb = 1'd1 ;
  assign WILL_FIRE_RL_trackMsb = 1'd1 ;

  // rule RL_cdcConnects
  assign CAN_FIRE_RL_cdcConnects = 1'd1 ;
  assign WILL_FIRE_RL_cdcConnects = 1'd1 ;

  // rule RL_cdcSetTimeFormat
  assign CAN_FIRE_RL_cdcSetTimeFormat = 1'd1 ;
  assign WILL_FIRE_RL_cdcSetTimeFormat = 1'd1 ;

  // rule RL_doInitialize
  assign CAN_FIRE_RL_doInitialize =
	     cfg_regs_ifc_reg_timeControl_dutView_1[31:30] == 2'd0 ;
  assign WILL_FIRE_RL_doInitialize = CAN_FIRE_RL_doInitialize ;

  // rule RL_doTestMode
  assign CAN_FIRE_RL_doTestMode = cfg_regs_ifc_reg_timeControl_dutView_0[16] ;
  assign WILL_FIRE_RL_doTestMode = CAN_FIRE_RL_doTestMode ;

  // rule RL_edgeDetect
  assign CAN_FIRE_RL_edgeDetect = 1'd1 ;
  assign WILL_FIRE_RL_edgeDetect = 1'd1 ;

  // rule RL_pfdConnects
  assign CAN_FIRE_RL_pfdConnects = 1'd1 ;
  assign WILL_FIRE_RL_pfdConnects = 1'd1 ;

  // rule RL_connectCount
  assign CAN_FIRE_RL_connectCount = 1'd1 ;
  assign WILL_FIRE_RL_connectCount = 1'd1 ;

  // rule RL_updateTimeLastPPS
  assign CAN_FIRE_RL_updateTimeLastPPS =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_updateTimeLastPPS =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;

  // rule RL_cfg_regs_ifc_reg_version_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_version_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_version_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_testRegister_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeCompare_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_maintainDebugDut = 1'd1 ;

  // rule RL_doTimeCompare
  assign CAN_FIRE_RL_doTimeCompare = 1'd1 ;
  assign WILL_FIRE_RL_doTimeCompare = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeFormats_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeStatus_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeControl_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeNow_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_phaseInc_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_timeLastPPS_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_state_maintainDebugDut
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_state_maintainDebugDut = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_state_maintainDebugDut = 1'd1 ;

  // rule RL_cfg_tlm_read_op
  assign CAN_FIRE_RL_cfg_tlm_read_op =
	     CAN_FIRE_RL_mkConnectionGetPut_2 &&
	     cfg_tlm_tlm_fifo_out_FULL_N &&
	     crossing_sync_req_dD_OUT[52:51] == 2'd0 ;
  assign WILL_FIRE_RL_cfg_tlm_read_op = CAN_FIRE_RL_cfg_tlm_read_op ;

  // rule RL_doLocalOrPPS
  assign CAN_FIRE_RL_doLocalOrPPS =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;
  assign WILL_FIRE_RL_doLocalOrPPS =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // rule RL_doPPS
  assign CAN_FIRE_RL_doPPS =
	     cfg_regs_ifc_reg_timeControl_dutView_1[31:30] == 2'd2 ;
  assign WILL_FIRE_RL_doPPS = CAN_FIRE_RL_doPPS ;

  // rule RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_bus_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_bus_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write =
	     NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	     ppsEventTst_whas ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;

  // rule RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_bus_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_bus_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write ;

  // rule RL_cfg_tlm_write_op
  assign CAN_FIRE_RL_cfg_tlm_write_op =
	     CAN_FIRE_RL_mkConnectionGetPut_2 &&
	     cfg_tlm_tlm_fifo_out_FULL_N &&
	     crossing_sync_req_dD_OUT[52:51] == 2'd1 ;
  assign WILL_FIRE_RL_cfg_tlm_write_op = CAN_FIRE_RL_cfg_tlm_write_op ;

  // rule RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_version_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_local_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_local_write = 1'b0 ;

  // rule RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd4 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_version_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_local_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_local_write = 1'b0 ;

  // rule RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd8 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd12 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd16 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_axiClockPeriod_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_local_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_local_write = 1'b0 ;

  // rule RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd20 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_refClockPeriod_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_local_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_local_write = 1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd24 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write =
	     cfg_regs_ifc_wd_timeCompare_wasWritten &&
	     !cfg_regs_ifc_reg_timeCompare_midBusWrite ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd28 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_wd_timeCompare_do_clear
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear =
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write ;

  // rule RL_cfg_regs_ifc_wd_timeCompare_do_write
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd32 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_skipTimeRelative_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_local_write = 1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear =
	     cfg_regs_ifc_reg_timeControl_dutView_1[31:30] == 2'd1 ||
	     cfg_regs_ifc_reg_timeControl_dutView_1[31:30] == 2'd2 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear &&
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write ;

  // rule RL_cfg_regs_ifc_wd_skipTimeRelative_do_write
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd40 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd44 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd64 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write =
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_reg_timeStatus_midBusWrite ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd68 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd72 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd76 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_local_write =
	     1'b0 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_local_write =
	     1'b0 ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd80 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write =
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_wd_timeNow_wasWritten &&
	     !cfg_regs_ifc_reg_timeNow_midBusWrite ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd84 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd88 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd92 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ;

  // rule RL_cfg_regs_ifc_wd_timeNow_do_clear
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear &&
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write ;

  // rule RL_cfg_regs_ifc_wd_timeNow_do_write
  assign CAN_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd96 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write =
	     WILL_FIRE_RL_doPPS && pfd_inReset &&
	     !cfg_regs_ifc_reg_phaseInc_midBusWrite ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd100 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd116 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd120 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd124 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write ;

  // rule RL_toNB_every
  assign CAN_FIRE_RL_toNB_every = 1'd1 ;
  assign WILL_FIRE_RL_toNB_every = 1'd1 ;

  // rule RL_toNO_every
  assign CAN_FIRE_RL_toNO_every = 1'd1 ;
  assign WILL_FIRE_RL_toNO_every = 1'd1 ;

  // rule RL_toNT_every
  assign CAN_FIRE_RL_toNT_every = 1'd1 ;
  assign WILL_FIRE_RL_toNT_every = 1'd1 ;

  // rule RL_calculateFormats
  assign CAN_FIRE_RL_calculateFormats = 1'd1 ;
  assign WILL_FIRE_RL_calculateFormats = 1'd1 ;

  // rule RL_incr_every
  assign CAN_FIRE_RL_incr_every = 1'd1 ;
  assign WILL_FIRE_RL_incr_every = 1'd1 ;

  // rule RL_incr_pipeIncr
  assign CAN_FIRE_RL_incr_pipeIncr = !incr_msbIncr[37] ;
  assign WILL_FIRE_RL_incr_pipeIncr = CAN_FIRE_RL_incr_pipeIncr ;

  // rule RL_incr_pipeLoad
  assign CAN_FIRE_RL_incr_pipeLoad = incr_msbIncr[37] ;
  assign WILL_FIRE_RL_incr_pipeLoad = CAN_FIRE_RL_incr_pipeLoad ;

  // rule RL_incr_doIncr
  assign CAN_FIRE_RL_incr_doIncr =
	     !incr_valueOp_whas || !incr_valueOp_wget[120] ;
  assign WILL_FIRE_RL_incr_doIncr = CAN_FIRE_RL_incr_doIncr ;

  // rule RL_incr_doLoad
  assign CAN_FIRE_RL_incr_doLoad =
	     incr_valueOp_whas && incr_valueOp_wget[120] ;
  assign WILL_FIRE_RL_incr_doLoad = CAN_FIRE_RL_incr_doLoad ;

  // rule RL_counter_updateRefClkCntCfgReg
  assign CAN_FIRE_RL_counter_updateRefClkCntCfgReg = 1'd1 ;
  assign WILL_FIRE_RL_counter_updateRefClkCntCfgReg = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_refClkCnt_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_local_write = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_local_write =
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write ;

  // rule RL_counter_updateRefClkCnt
  assign CAN_FIRE_RL_counter_updateRefClkCnt = 1'd1 ;
  assign WILL_FIRE_RL_counter_updateRefClkCnt = 1'd1 ;

  // rule RL_counter_updateAxiClkCntCross
  assign CAN_FIRE_RL_counter_updateAxiClkCntCross =
	     counter_axiClkCntCross_sRDY ;
  assign WILL_FIRE_RL_counter_updateAxiClkCntCross =
	     counter_axiClkCntCross_sRDY ;

  // rule RL_counter_updateAxiClkCnt
  assign CAN_FIRE_RL_counter_updateAxiClkCnt = 1'd1 ;
  assign WILL_FIRE_RL_counter_updateAxiClkCnt = 1'd1 ;

  // rule RL_counter_updateAxiClkCntCfgReg
  assign CAN_FIRE_RL_counter_updateAxiClkCntCfgReg = 1'd1 ;
  assign WILL_FIRE_RL_counter_updateAxiClkCntCfgReg = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write = 1'd1 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write =
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write ;

  // rule RL_counter_updateRefClkPerPPS
  assign CAN_FIRE_RL_counter_updateRefClkPerPPS = 1'd1 ;
  assign WILL_FIRE_RL_counter_updateRefClkPerPPS = 1'd1 ;

  // rule RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write ;

  // rule RL_counter_updatePpsCnt
  assign CAN_FIRE_RL_counter_updatePpsCnt =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_counter_updatePpsCnt =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;

  // rule RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd112 ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write ;

  // rule RL_cfg_regs_ifc_reg_ppsCnt_do_local_write
  assign CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;
  assign WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write &&
	     !WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write ;

  // inputs to muxes for submodule ports
  assign MUX_k1AccumDump_write_1__SEL_1 = WILL_FIRE_RL_doPPS && _dfoo21 ;
  assign MUX_k2Integrator_write_1__SEL_1 = WILL_FIRE_RL_doPPS && _dfoo17 ;
  assign MUX_cfg_regs_ifc_reg_phaseInc_dutView_1_write_1__VAL_2 =
	     { 15'd0, k1AccumDump_14_PLUS_k2Integrator_25___d731[48:32] } ;
  assign MUX_cfg_regs_ifc_reg_ppsCnt_write_1__VAL_2 =
	     cfg_regs_ifc_reg_ppsCnt + 32'd1 ;
  assign MUX_cfg_regs_ifc_reg_refClkCnt_write_1__VAL_2 =
	     counter_refClkCnt + 32'd1 ;
  assign MUX_cfg_regs_ifc_reg_timeNow_dutView_0_write_1__VAL_2 =
	     { incr_last[23:0], 8'd0 } ;
  assign MUX_cfg_regs_ifc_reg_timeNow_dutView_2_write_1__VAL_2 =
	     { x__h79931[15:0], incr_last[71:56] } ;
  assign MUX_cfg_regs_ifc_reg_timeStatus_dutView_0_write_1__VAL_2 =
	     { cfg_regs_ifc_reg_timeStatus_dutView_0[31:4],
	       IF_ppsEventSrc_whas__55_OR_ppsEventTst_whas__5_ETC___d696,
	       IF_rise001MS_59_THEN_cfg_regs_ifc_reg_timeStat_ETC___d701,
	       IF_rise250MS_68_THEN_cfg_regs_ifc_reg_timeStat_ETC___d706 } ;
  assign MUX_cfg_tlm_tlm_fifo_out_enq_1__VAL_1 =
	     { 2'd0, x_data__h56417, 2'd0 } ;
  assign MUX_incr_lsb_write_1__VAL_1 = { 1'b0, incr_valueOp_wget[35:0] } ;
  assign MUX_incr_lsb_write_1__VAL_2 =
	     { 1'b0, incr_lsb[35:0] } + { 1'b0, x__h64861[35:0] } ;
  assign MUX_incr_ltZero_write_1__VAL_1 =
	     incr_valueOp_whas && incr_valueOp_wget[72] ;
  assign MUX_incr_msb1_write_1__VAL_1 = x__h64719 + y__h64720 ;
  assign MUX_incr_msbIncr_write_1__VAL_1 = { 2'd0, x__h64861[71:36] } ;
  assign MUX_incr_msbIncr_write_1__VAL_2 =
	     { 1'd1, incr_valueOp_wget[72:36] } ;
  assign MUX_incr_valueOp_wset_1__VAL_1 =
	     { cfg_regs_ifc_wd_timeNow_wasWritten,
	       IF_cfg_regs_ifc_wd_timeNow_wasWritten_53_THEN__ETC___d569 } ;
  assign MUX_incr_whole_write_1__VAL_1 =
	     { 1'd0,
	       48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_incr_whole_write_1__VAL_2 = { 1'd1, incr_valueOp_wget[119:72] } ;
  assign MUX_k1AccumDump_write_1__VAL_1 =
	     (pfd_direction[1] && !pfd_direction[0]) ?
	       IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d718 :
	       ((pfd_direction[0] && !pfd_direction[1]) ?
		  IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d722 :
		  49'd0) ;
  assign MUX_k2Integrator_write_1__VAL_1 =
	     (pfd_direction[1] && !pfd_direction[0]) ?
	       k2Integrator +
	       { 27'd0,
		 cfg_regs_ifc_reg_timeControl_dutView_1[7:0],
		 cfg_regs_ifc_reg_timeControl_dutView_0[31:18] } :
	       k2Integrator -
	       { 27'd0,
		 cfg_regs_ifc_reg_timeControl_dutView_1[7:0],
		 cfg_regs_ifc_reg_timeControl_dutView_0[31:18] } ;

  // inlined wires
  assign incr_valueOp_wget =
	     WILL_FIRE_RL_doLocalOrPPS ?
	       MUX_incr_valueOp_wset_1__VAL_1 :
	       121'h1000000000000000000000000000000 ;
  assign incr_valueOp_whas =
	     WILL_FIRE_RL_doLocalOrPPS || WILL_FIRE_RL_doInitialize ;
  assign ppsEventTst_whas =
	     cfg_regs_ifc_reg_timeControl_dutView_0[16] &&
	     !testCount_58_ULT_1000000000000___d759 ;
  assign ppsEventNow_whas = msbD && !incr_last[71] ;

  // register cfg_regs_ifc_reg_axiClkCnt
  assign cfg_regs_ifc_reg_axiClkCnt_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       counter_axiClkCntCross_dD_OUT ;
  assign cfg_regs_ifc_reg_axiClkCnt_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_axiClkCnt_do_local_write ;

  // register cfg_regs_ifc_reg_axiClockPeriod
  assign cfg_regs_ifc_reg_axiClockPeriod_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_axiClockPeriod_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_axiClockPeriod_do_bus_write ;

  // register cfg_regs_ifc_reg_phaseInc_crView_1
  assign cfg_regs_ifc_reg_phaseInc_crView_1_D_IN =
	     cfg_regs_ifc_reg_phaseInc_ifcs_1 ;
  assign cfg_regs_ifc_reg_phaseInc_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd96 ;

  // register cfg_regs_ifc_reg_phaseInc_dutView_0
  assign cfg_regs_ifc_reg_phaseInc_dutView_0_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ?
	       cfg_regs_ifc_reg_phaseInc_ifcs_0 :
	       k1AccumDump_14_PLUS_k2Integrator_25___d731[31:0] ;
  assign cfg_regs_ifc_reg_phaseInc_dutView_0_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd100 ||
	     WILL_FIRE_RL_doPPS && pfd_inReset ;

  // register cfg_regs_ifc_reg_phaseInc_dutView_1
  assign cfg_regs_ifc_reg_phaseInc_dutView_1_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_phaseInc_dutView_1_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_phaseInc_dutView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd100 ||
	     WILL_FIRE_RL_doPPS && pfd_inReset ;

  // register cfg_regs_ifc_reg_phaseInc_ifcs_0
  assign cfg_regs_ifc_reg_phaseInc_ifcs_0_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       k1AccumDump_14_PLUS_k2Integrator_25___d731[31:0] ;
  assign cfg_regs_ifc_reg_phaseInc_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_0_do_local_write ;

  // register cfg_regs_ifc_reg_phaseInc_ifcs_1
  assign cfg_regs_ifc_reg_phaseInc_ifcs_1_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_phaseInc_dutView_1_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_phaseInc_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_phaseInc_ifcs_1_do_local_write ;

  // register cfg_regs_ifc_reg_phaseInc_midBusWrite
  assign cfg_regs_ifc_reg_phaseInc_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd96 ;
  assign cfg_regs_ifc_reg_phaseInc_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd96 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd100) ;

  // register cfg_regs_ifc_reg_ppsCnt
  assign cfg_regs_ifc_reg_ppsCnt_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_ppsCnt_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_ppsCnt_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_ppsCnt_do_local_write ;

  // register cfg_regs_ifc_reg_refClkCnt
  assign cfg_regs_ifc_reg_refClkCnt_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_refClkCnt_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_refClkCnt_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkCnt_do_local_write ;

  // register cfg_regs_ifc_reg_refClkPerPPS
  assign cfg_regs_ifc_reg_refClkPerPPS_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       value__h83697 ;
  assign cfg_regs_ifc_reg_refClkPerPPS_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClkPerPPS_do_local_write ;

  // register cfg_regs_ifc_reg_refClockPeriod
  assign cfg_regs_ifc_reg_refClockPeriod_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_refClockPeriod_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_refClockPeriod_do_bus_write ;

  // register cfg_regs_ifc_reg_skipTimeRelative
  assign cfg_regs_ifc_reg_skipTimeRelative_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_skipTimeRelative_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_skipTimeRelative_do_bus_write ;

  // register cfg_regs_ifc_reg_state_crView_1
  assign cfg_regs_ifc_reg_state_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeStatus_dutView_1 ;
  assign cfg_regs_ifc_reg_state_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_10
  assign cfg_regs_ifc_reg_state_crView_10_D_IN =
	     cfg_regs_ifc_reg_timeLastPPS_ifcs_0 ;
  assign cfg_regs_ifc_reg_state_crView_10_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_11
  assign cfg_regs_ifc_reg_state_crView_11_D_IN =
	     cfg_regs_ifc_reg_timeLastPPS_ifcs_1 ;
  assign cfg_regs_ifc_reg_state_crView_11_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_12
  assign cfg_regs_ifc_reg_state_crView_12_D_IN = cfg_regs_ifc_reg_ppsCnt ;
  assign cfg_regs_ifc_reg_state_crView_12_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_13
  assign cfg_regs_ifc_reg_state_crView_13_D_IN =
	     cfg_regs_ifc_reg_refClkPerPPS ;
  assign cfg_regs_ifc_reg_state_crView_13_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_14
  assign cfg_regs_ifc_reg_state_crView_14_D_IN = cfg_regs_ifc_reg_refClkCnt ;
  assign cfg_regs_ifc_reg_state_crView_14_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_15
  assign cfg_regs_ifc_reg_state_crView_15_D_IN = cfg_regs_ifc_reg_axiClkCnt ;
  assign cfg_regs_ifc_reg_state_crView_15_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_2
  assign cfg_regs_ifc_reg_state_crView_2_D_IN =
	     cfg_regs_ifc_reg_timeControl_dutView_0 ;
  assign cfg_regs_ifc_reg_state_crView_2_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_3
  assign cfg_regs_ifc_reg_state_crView_3_D_IN =
	     cfg_regs_ifc_reg_timeControl_dutView_1 ;
  assign cfg_regs_ifc_reg_state_crView_3_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_4
  assign cfg_regs_ifc_reg_state_crView_4_D_IN =
	     cfg_regs_ifc_reg_timeNow_dutView_0 ;
  assign cfg_regs_ifc_reg_state_crView_4_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_5
  assign cfg_regs_ifc_reg_state_crView_5_D_IN =
	     cfg_regs_ifc_reg_timeNow_dutView_1 ;
  assign cfg_regs_ifc_reg_state_crView_5_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_6
  assign cfg_regs_ifc_reg_state_crView_6_D_IN =
	     cfg_regs_ifc_reg_timeNow_dutView_2 ;
  assign cfg_regs_ifc_reg_state_crView_6_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_7
  assign cfg_regs_ifc_reg_state_crView_7_D_IN =
	     cfg_regs_ifc_reg_timeNow_dutView_3 ;
  assign cfg_regs_ifc_reg_state_crView_7_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_8
  assign cfg_regs_ifc_reg_state_crView_8_D_IN =
	     cfg_regs_ifc_reg_phaseInc_dutView_0 ;
  assign cfg_regs_ifc_reg_state_crView_8_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_state_crView_9
  assign cfg_regs_ifc_reg_state_crView_9_D_IN =
	     cfg_regs_ifc_reg_phaseInc_dutView_1 ;
  assign cfg_regs_ifc_reg_state_crView_9_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd128 ;

  // register cfg_regs_ifc_reg_testRegister_crView_1
  assign cfg_regs_ifc_reg_testRegister_crView_1_D_IN =
	     cfg_regs_ifc_reg_testRegister_ifcs_1 ;
  assign cfg_regs_ifc_reg_testRegister_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd8 ;

  // register cfg_regs_ifc_reg_testRegister_dutView_0
  assign cfg_regs_ifc_reg_testRegister_dutView_0_D_IN =
	     cfg_regs_ifc_reg_testRegister_ifcs_0 ;
  assign cfg_regs_ifc_reg_testRegister_dutView_0_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_testRegister_dutView_1
  assign cfg_regs_ifc_reg_testRegister_dutView_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_testRegister_dutView_1_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_testRegister_ifcs_0
  assign cfg_regs_ifc_reg_testRegister_ifcs_0_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_testRegister_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_0_do_bus_write ;

  // register cfg_regs_ifc_reg_testRegister_ifcs_1
  assign cfg_regs_ifc_reg_testRegister_ifcs_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_testRegister_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_testRegister_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_testRegister_midBusWrite
  assign cfg_regs_ifc_reg_testRegister_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd8 ;
  assign cfg_regs_ifc_reg_testRegister_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd8 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd12) ;

  // register cfg_regs_ifc_reg_timeCompare_crView_1
  assign cfg_regs_ifc_reg_timeCompare_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeCompare_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeCompare_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd24 ;

  // register cfg_regs_ifc_reg_timeCompare_dutView_0
  assign cfg_regs_ifc_reg_timeCompare_dutView_0_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ?
	       cfg_regs_ifc_reg_timeCompare_ifcs_0 :
	       cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751[31:0] ;
  assign cfg_regs_ifc_reg_timeCompare_dutView_0_EN =
	     cfg_regs_ifc_wd_timeCompare_wasWritten ||
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd28 ;

  // register cfg_regs_ifc_reg_timeCompare_dutView_1
  assign cfg_regs_ifc_reg_timeCompare_dutView_1_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751[63:32] ;
  assign cfg_regs_ifc_reg_timeCompare_dutView_1_EN =
	     cfg_regs_ifc_wd_timeCompare_wasWritten ||
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd28 ;

  // register cfg_regs_ifc_reg_timeCompare_ifcs_0
  assign cfg_regs_ifc_reg_timeCompare_ifcs_0_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751[31:0] ;
  assign cfg_regs_ifc_reg_timeCompare_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_0_do_local_write ;

  // register cfg_regs_ifc_reg_timeCompare_ifcs_1
  assign cfg_regs_ifc_reg_timeCompare_ifcs_1_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751[63:32] ;
  assign cfg_regs_ifc_reg_timeCompare_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeCompare_ifcs_1_do_local_write ;

  // register cfg_regs_ifc_reg_timeCompare_midBusWrite
  assign cfg_regs_ifc_reg_timeCompare_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd24 ;
  assign cfg_regs_ifc_reg_timeCompare_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd24 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd28) ;

  // register cfg_regs_ifc_reg_timeControl_crView_1
  assign cfg_regs_ifc_reg_timeControl_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeControl_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeControl_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd72 ;

  // register cfg_regs_ifc_reg_timeControl_dutView_0
  assign cfg_regs_ifc_reg_timeControl_dutView_0_D_IN =
	     cfg_regs_ifc_reg_timeControl_ifcs_0 ;
  assign cfg_regs_ifc_reg_timeControl_dutView_0_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeControl_dutView_1
  assign cfg_regs_ifc_reg_timeControl_dutView_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeControl_dutView_1_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeControl_ifcs_0
  assign cfg_regs_ifc_reg_timeControl_ifcs_0_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeControl_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_0_do_bus_write ;

  // register cfg_regs_ifc_reg_timeControl_ifcs_1
  assign cfg_regs_ifc_reg_timeControl_ifcs_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeControl_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeControl_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeControl_midBusWrite
  assign cfg_regs_ifc_reg_timeControl_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd72 ;
  assign cfg_regs_ifc_reg_timeControl_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd72 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd76) ;

  // register cfg_regs_ifc_reg_timeFormats_crView_1
  assign cfg_regs_ifc_reg_timeFormats_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeFormats_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeFormats_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd40 ;

  // register cfg_regs_ifc_reg_timeFormats_dutView_0
  assign cfg_regs_ifc_reg_timeFormats_dutView_0_D_IN =
	     cfg_regs_ifc_reg_timeFormats_ifcs_0 ;
  assign cfg_regs_ifc_reg_timeFormats_dutView_0_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeFormats_dutView_1
  assign cfg_regs_ifc_reg_timeFormats_dutView_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeFormats_dutView_1_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeFormats_ifcs_0
  assign cfg_regs_ifc_reg_timeFormats_ifcs_0_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeFormats_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_0_do_bus_write ;

  // register cfg_regs_ifc_reg_timeFormats_ifcs_1
  assign cfg_regs_ifc_reg_timeFormats_ifcs_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_timeFormats_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeFormats_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_timeFormats_midBusWrite
  assign cfg_regs_ifc_reg_timeFormats_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd40 ;
  assign cfg_regs_ifc_reg_timeFormats_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd40 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd44) ;

  // register cfg_regs_ifc_reg_timeLastPPS_crView_1
  assign cfg_regs_ifc_reg_timeLastPPS_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeLastPPS_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeLastPPS_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd104 ;

  // register cfg_regs_ifc_reg_timeLastPPS_ifcs_0
  assign cfg_regs_ifc_reg_timeLastPPS_ifcs_0_D_IN = incr_last[71:40] ;
  assign cfg_regs_ifc_reg_timeLastPPS_ifcs_0_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;

  // register cfg_regs_ifc_reg_timeLastPPS_ifcs_1
  assign cfg_regs_ifc_reg_timeLastPPS_ifcs_1_D_IN = incr_last[103:72] ;
  assign cfg_regs_ifc_reg_timeLastPPS_ifcs_1_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_1_do_local_write ;

  // register cfg_regs_ifc_reg_timeNow_crView_1
  assign cfg_regs_ifc_reg_timeNow_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeNow_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeNow_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd80 ;

  // register cfg_regs_ifc_reg_timeNow_crView_2
  assign cfg_regs_ifc_reg_timeNow_crView_2_D_IN =
	     cfg_regs_ifc_reg_timeNow_ifcs_2 ;
  assign cfg_regs_ifc_reg_timeNow_crView_2_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd80 ;

  // register cfg_regs_ifc_reg_timeNow_crView_3
  assign cfg_regs_ifc_reg_timeNow_crView_3_D_IN =
	     cfg_regs_ifc_reg_timeNow_ifcs_3 ;
  assign cfg_regs_ifc_reg_timeNow_crView_3_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd80 ;

  // register cfg_regs_ifc_reg_timeNow_dutView_0
  assign cfg_regs_ifc_reg_timeNow_dutView_0_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ?
	       cfg_regs_ifc_reg_timeNow_ifcs_0 :
	       MUX_cfg_regs_ifc_reg_timeNow_dutView_0_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeNow_dutView_0_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd92 ||
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_wd_timeNow_wasWritten ;

  // register cfg_regs_ifc_reg_timeNow_dutView_1
  assign cfg_regs_ifc_reg_timeNow_dutView_1_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ?
	       cfg_regs_ifc_reg_timeNow_ifcs_1 :
	       incr_last[55:24] ;
  assign cfg_regs_ifc_reg_timeNow_dutView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd92 ||
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_wd_timeNow_wasWritten ;

  // register cfg_regs_ifc_reg_timeNow_dutView_2
  assign cfg_regs_ifc_reg_timeNow_dutView_2_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ?
	       cfg_regs_ifc_reg_timeNow_ifcs_2 :
	       MUX_cfg_regs_ifc_reg_timeNow_dutView_2_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeNow_dutView_2_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd92 ||
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_wd_timeNow_wasWritten ;

  // register cfg_regs_ifc_reg_timeNow_dutView_3
  assign cfg_regs_ifc_reg_timeNow_dutView_3_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       x__h79931[47:16] ;
  assign cfg_regs_ifc_reg_timeNow_dutView_3_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd92 ||
	     WILL_FIRE_RL_doLocalOrPPS &&
	     !cfg_regs_ifc_wd_timeNow_wasWritten ;

  // register cfg_regs_ifc_reg_timeNow_ifcs_0
  assign cfg_regs_ifc_reg_timeNow_ifcs_0_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_timeNow_dutView_0_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeNow_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_0_do_local_write ;

  // register cfg_regs_ifc_reg_timeNow_ifcs_1
  assign cfg_regs_ifc_reg_timeNow_ifcs_1_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       incr_last[55:24] ;
  assign cfg_regs_ifc_reg_timeNow_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_1_do_local_write ;

  // register cfg_regs_ifc_reg_timeNow_ifcs_2
  assign cfg_regs_ifc_reg_timeNow_ifcs_2_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_timeNow_dutView_2_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeNow_ifcs_2_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_2_do_local_write ;

  // register cfg_regs_ifc_reg_timeNow_ifcs_3
  assign cfg_regs_ifc_reg_timeNow_ifcs_3_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       x__h79931[47:16] ;
  assign cfg_regs_ifc_reg_timeNow_ifcs_3_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeNow_ifcs_3_do_local_write ;

  // register cfg_regs_ifc_reg_timeNow_midBusWrite
  assign cfg_regs_ifc_reg_timeNow_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd80 ;
  assign cfg_regs_ifc_reg_timeNow_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd80 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd92) ;

  // register cfg_regs_ifc_reg_timeStatus_crView_1
  assign cfg_regs_ifc_reg_timeStatus_crView_1_D_IN =
	     cfg_regs_ifc_reg_timeStatus_ifcs_1 ;
  assign cfg_regs_ifc_reg_timeStatus_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd64 ;

  // register cfg_regs_ifc_reg_timeStatus_dutView_0
  assign cfg_regs_ifc_reg_timeStatus_dutView_0_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ?
	       cfg_regs_ifc_reg_timeStatus_ifcs_0 :
	       MUX_cfg_regs_ifc_reg_timeStatus_dutView_0_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeStatus_dutView_0_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd68 ||
	     WILL_FIRE_RL_doLocalOrPPS ;

  // register cfg_regs_ifc_reg_timeStatus_dutView_1
  assign cfg_regs_ifc_reg_timeStatus_dutView_1_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       cfg_regs_ifc_reg_timeStatus_dutView_1 ;
  assign cfg_regs_ifc_reg_timeStatus_dutView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd68 ||
	     WILL_FIRE_RL_doLocalOrPPS ;

  // register cfg_regs_ifc_reg_timeStatus_ifcs_0
  assign cfg_regs_ifc_reg_timeStatus_ifcs_0_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       MUX_cfg_regs_ifc_reg_timeStatus_dutView_0_write_1__VAL_2 ;
  assign cfg_regs_ifc_reg_timeStatus_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_0_do_local_write ;

  // register cfg_regs_ifc_reg_timeStatus_ifcs_1
  assign cfg_regs_ifc_reg_timeStatus_ifcs_1_D_IN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ?
	       crossing_sync_req_dD_OUT[38:7] :
	       cfg_regs_ifc_reg_timeStatus_dutView_1 ;
  assign cfg_regs_ifc_reg_timeStatus_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_bus_write ||
	     WILL_FIRE_RL_cfg_regs_ifc_reg_timeStatus_ifcs_1_do_local_write ;

  // register cfg_regs_ifc_reg_timeStatus_midBusWrite
  assign cfg_regs_ifc_reg_timeStatus_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd64 ;
  assign cfg_regs_ifc_reg_timeStatus_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd64 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd68) ;

  // register cfg_regs_ifc_reg_version_crView_1
  assign cfg_regs_ifc_reg_version_crView_1_D_IN =
	     cfg_regs_ifc_reg_version_ifcs_1 ;
  assign cfg_regs_ifc_reg_version_crView_1_EN =
	     WILL_FIRE_RL_cfg_tlm_read_op &&
	     crossing_sync_req_dD_OUT[50:39] == 12'd0 ;

  // register cfg_regs_ifc_reg_version_dutView_0
  assign cfg_regs_ifc_reg_version_dutView_0_D_IN =
	     cfg_regs_ifc_reg_version_ifcs_0 ;
  assign cfg_regs_ifc_reg_version_dutView_0_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_version_dutView_1
  assign cfg_regs_ifc_reg_version_dutView_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_version_dutView_1_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_version_ifcs_0
  assign cfg_regs_ifc_reg_version_ifcs_0_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_version_ifcs_0_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_0_do_bus_write ;

  // register cfg_regs_ifc_reg_version_ifcs_1
  assign cfg_regs_ifc_reg_version_ifcs_1_D_IN =
	     crossing_sync_req_dD_OUT[38:7] ;
  assign cfg_regs_ifc_reg_version_ifcs_1_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_reg_version_ifcs_1_do_bus_write ;

  // register cfg_regs_ifc_reg_version_midBusWrite
  assign cfg_regs_ifc_reg_version_midBusWrite_D_IN =
	     crossing_sync_req_dD_OUT[50:39] == 12'd0 ;
  assign cfg_regs_ifc_reg_version_midBusWrite_EN =
	     WILL_FIRE_RL_cfg_tlm_write_op &&
	     (crossing_sync_req_dD_OUT[50:39] == 12'd0 ||
	      crossing_sync_req_dD_OUT[50:39] == 12'd4) ;

  // register cfg_regs_ifc_wd_skipTimeRelative_wasWritten
  assign cfg_regs_ifc_wd_skipTimeRelative_wasWritten_D_IN =
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;
  assign cfg_regs_ifc_wd_skipTimeRelative_wasWritten_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ||
	     WILL_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_write ;

  // register cfg_regs_ifc_wd_timeCompare_wasWritten
  assign cfg_regs_ifc_wd_timeCompare_wasWritten_D_IN =
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear ;
  assign cfg_regs_ifc_wd_timeCompare_wasWritten_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_clear ||
	     WILL_FIRE_RL_cfg_regs_ifc_wd_timeCompare_do_write ;

  // register cfg_regs_ifc_wd_timeNow_wasWritten
  assign cfg_regs_ifc_wd_timeNow_wasWritten_D_IN =
	     !WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear ;
  assign cfg_regs_ifc_wd_timeNow_wasWritten_EN =
	     WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_clear ||
	     WILL_FIRE_RL_cfg_regs_ifc_wd_timeNow_do_write ;

  // register counter_axiClkCnt
  assign counter_axiClkCnt_D_IN = counter_axiClkCnt + 32'd1 ;
  assign counter_axiClkCnt_EN = 1'd1 ;

  // register counter_refClkCnt
  assign counter_refClkCnt_D_IN =
	     MUX_cfg_regs_ifc_reg_refClkCnt_write_1__VAL_2 ;
  assign counter_refClkCnt_EN = 1'd1 ;

  // register counter_refClkPerPPS
  assign counter_refClkPerPPS_D_IN =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ?
	       32'd0 :
	       value__h83697 ;
  assign counter_refClkPerPPS_EN = 1'd1 ;

  // register fall001MS
  assign fall001MS_D_IN =
	     (incr_last[62] || incr_last[63] || incr_last[64] ||
	      incr_last[65] ||
	      incr_last[66] ||
	      incr_last[67] ||
	      incr_last[68] ||
	      incr_last[69] ||
	      incr_last[70] ||
	      incr_last[71]) &&
	     (!incr_last[62] || !incr_last[63] || !incr_last[64] ||
	      !incr_last[65] ||
	      !incr_last[66] ||
	      !incr_last[67] ||
	      !incr_last[68] ||
	      !incr_last[69] ||
	      !incr_last[70] ||
	      !incr_last[71]) &&
	     !ppsEventNow_whas &&
	     window001MSD ;
  assign fall001MS_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register fall250MS
  assign fall250MS_D_IN =
	     (incr_last[70] || incr_last[71]) &&
	     (!incr_last[70] || !incr_last[71]) &&
	     !ppsEventNow_whas &&
	     window250MSD ;
  assign fall250MS_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register incr_last
  assign incr_last_D_IN = { x_i__h64618, x_f__h64619 } ;
  assign incr_last_EN = 1'd1 ;

  // register incr_lsb
  assign incr_lsb_D_IN =
	     WILL_FIRE_RL_incr_doLoad ?
	       MUX_incr_lsb_write_1__VAL_1 :
	       MUX_incr_lsb_write_1__VAL_2 ;
  assign incr_lsb_EN = WILL_FIRE_RL_incr_doLoad || WILL_FIRE_RL_incr_doIncr ;

  // register incr_lsb1
  assign incr_lsb1_D_IN = incr_lsb[35:0] ;
  assign incr_lsb1_EN = 1'd1 ;

  // register incr_ltZero
  assign incr_ltZero_D_IN =
	     WILL_FIRE_RL_incr_doIncr && MUX_incr_ltZero_write_1__VAL_1 ;
  assign incr_ltZero_EN =
	     WILL_FIRE_RL_incr_doIncr || WILL_FIRE_RL_incr_doLoad ;

  // register incr_ltZero1
  assign incr_ltZero1_D_IN = incr_ltZero ;
  assign incr_ltZero1_EN = 1'd1 ;

  // register incr_msb1
  assign incr_msb1_D_IN =
	     WILL_FIRE_RL_incr_pipeIncr ?
	       MUX_incr_msb1_write_1__VAL_1 :
	       y__h64722 ;
  assign incr_msb1_EN = WILL_FIRE_RL_incr_pipeIncr || incr_msbIncr[37] ;

  // register incr_msbD
  assign incr_msbD_D_IN = incr_msb1[36] ;
  assign incr_msbD_EN = 1'd1 ;

  // register incr_msbIncr
  assign incr_msbIncr_D_IN =
	     WILL_FIRE_RL_incr_doIncr ?
	       MUX_incr_msbIncr_write_1__VAL_1 :
	       MUX_incr_msbIncr_write_1__VAL_2 ;
  assign incr_msbIncr_EN =
	     WILL_FIRE_RL_incr_doIncr || WILL_FIRE_RL_incr_doLoad ;

  // register incr_whole
  assign incr_whole_D_IN =
	     WILL_FIRE_RL_incr_doIncr ?
	       MUX_incr_whole_write_1__VAL_1 :
	       MUX_incr_whole_write_1__VAL_2 ;
  assign incr_whole_EN =
	     WILL_FIRE_RL_incr_doIncr || WILL_FIRE_RL_incr_doLoad ;

  // register incr_whole1
  assign incr_whole1_D_IN = incr_whole ;
  assign incr_whole1_EN = 1'd1 ;

  // register k1AccumDump
  assign k1AccumDump_D_IN =
	     MUX_k1AccumDump_write_1__SEL_1 ?
	       MUX_k1AccumDump_write_1__VAL_1 :
	       49'd0 ;
  assign k1AccumDump_EN =
	     WILL_FIRE_RL_doPPS && _dfoo21 || WILL_FIRE_RL_doInitialize ;

  // register k2Integrator
  assign k2Integrator_D_IN =
	     MUX_k2Integrator_write_1__SEL_1 ?
	       MUX_k2Integrator_write_1__VAL_1 :
	       b__h79512 ;
  assign k2Integrator_EN =
	     WILL_FIRE_RL_doPPS && _dfoo17 || WILL_FIRE_RL_doInitialize ;

  // register msbD
  assign msbD_D_IN = incr_last[71] ;
  assign msbD_EN = 1'd1 ;

  // register oneSecondD
  assign oneSecondD_D_IN = !incr_last[71] ;
  assign oneSecondD_EN = 1'd1 ;

  // register pfdFaster
  assign pfdFaster_D_IN =
	     (NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	      ppsEventTst_whas) &&
	     pfd_direction[1] ||
	     (pfdFaster || pfd_direction[1]) &&
	     !NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 &&
	     !ppsEventTst_whas ;
  assign pfdFaster_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register pfdSlower
  assign pfdSlower_D_IN =
	     (NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	      ppsEventTst_whas) &&
	     pfd_direction[0] ||
	     (pfdSlower || pfd_direction[0]) &&
	     !NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 &&
	     !ppsEventTst_whas ;
  assign pfdSlower_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register ppsD
  assign ppsD_D_IN = ppsSync ;
  assign ppsD_EN = 1'd1 ;

  // register ppsSync
  assign ppsSync_D_IN = pps_src ;
  assign ppsSync_EN = 1'd1 ;

  // register pulseIn001MS
  assign pulseIn001MS_D_IN =
	     rise001MS ?
	       NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	       ppsEventTst_whas :
	       !fall001MS &&
	       (pulseIn001MS ||
		NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
		ppsEventTst_whas) ;
  assign pulseIn001MS_EN =
	     WILL_FIRE_RL_doLocalOrPPS &&
	     (rise001MS || fall001MS ||
	      NOT_incr_last_05_BIT_62_83_84_AND_NOT_incr_las_ETC___d609 ||
	      incr_last_05_BIT_62_83_AND_incr_last_05_BIT_63_ETC___d618 ||
	      ppsEventNow_whas) ;

  // register pulseIn250MS
  assign pulseIn250MS_D_IN =
	     rise250MS ?
	       NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	       ppsEventTst_whas :
	       !fall250MS &&
	       (pulseIn250MS ||
		NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
		ppsEventTst_whas) ;
  assign pulseIn250MS_EN =
	     WILL_FIRE_RL_doLocalOrPPS &&
	     (rise250MS || fall250MS || !incr_last[70] && !incr_last[71] ||
	      incr_last[70] && incr_last[71] ||
	      ppsEventNow_whas) ;

  // register rise001MS
  assign rise001MS_D_IN =
	     (NOT_incr_last_05_BIT_62_83_84_AND_NOT_incr_las_ETC___d609 ||
	      incr_last_05_BIT_62_83_AND_incr_last_05_BIT_63_ETC___d618 ||
	      ppsEventNow_whas) &&
	     !window001MSD ;
  assign rise001MS_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register rise250MS
  assign rise250MS_D_IN =
	     (!incr_last[70] && !incr_last[71] ||
	      incr_last[70] && incr_last[71] ||
	      ppsEventNow_whas) &&
	     !window250MSD ;
  assign rise250MS_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register testCount
  assign testCount_D_IN =
	     testCount_58_ULT_1000000000000___d759 ? x__h84600 : 42'd0 ;
  assign testCount_EN = CAN_FIRE_RL_doTestMode ;

  // register toNB_nowBinary
  assign toNB_nowBinary_D_IN = incr_last[119:40] ;
  assign toNB_nowBinary_EN = 1'd1 ;

  // register toNB_nowBinary1
  assign toNB_nowBinary1_D_IN = toNB_nowBinary ;
  assign toNB_nowBinary1_EN = 1'd1 ;

  // register toNO_mult_lev2a
  assign toNO_mult_lev2a_D_IN = x__h66029 + x15__h65992 ;
  assign toNO_mult_lev2a_EN = 1'd1 ;

  // register toNO_mult_lev2b
  assign toNO_mult_lev2b_D_IN = x262145__h65994 + y__h66087 ;
  assign toNO_mult_lev2b_EN = 1'd1 ;

  // register toNO_nowOrdinary
  assign toNO_nowOrdinary_D_IN =
	     { toNO_whole,
	       lev35597_BITS_61_TO_0_CONCAT_0_PLUS_lev35597__q4[54:23] } ;
  assign toNO_nowOrdinary_EN = 1'd1 ;

  // register toNO_whole
  assign toNO_whole_D_IN = incr_last[119:72] ;
  assign toNO_whole_EN = 1'd1 ;

  // register toNT_mult_lev2a
  assign toNT_mult_lev2a_D_IN = x__h66146 + x15__h66109 ;
  assign toNT_mult_lev2a_EN = 1'd1 ;

  // register toNT_mult_lev2b
  assign toNT_mult_lev2b_D_IN = x262145__h66111 + y__h66212 ;
  assign toNT_mult_lev2b_EN = 1'd1 ;

  // register toNT_nowTransparent
  assign toNT_nowTransparent_D_IN =
	     { lev35818_BITS_61_TO_0_CONCAT_0_PLUS_lev35818__q5[62:0],
	       1'd0 } ;
  assign toNT_nowTransparent_EN = 1'd1 ;

  // register window001MSD
  assign window001MSD_D_IN =
	     NOT_incr_last_05_BIT_62_83_84_AND_NOT_incr_las_ETC___d609 ||
	     incr_last_05_BIT_62_83_AND_incr_last_05_BIT_63_ETC___d618 ||
	     ppsEventNow_whas ;
  assign window001MSD_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // register window250MSD
  assign window250MSD_D_IN =
	     !incr_last[70] && !incr_last[71] ||
	     incr_last[70] && incr_last[71] ||
	     ppsEventNow_whas ;
  assign window250MSD_EN =
	     CAN_FIRE_RL_cfg_regs_ifc_wd_skipTimeRelative_do_clear ;

  // submodule cdcs_0
  assign cdcs_0_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_0_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_0_phase_src = toNB_nowBinary1 ;
  assign cdcs_0_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[1:0] ;

  // submodule cdcs_1
  assign cdcs_1_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_1_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_1_phase_src = toNB_nowBinary1 ;
  assign cdcs_1_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[3:2] ;

  // submodule cdcs_10
  assign cdcs_10_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_10_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_10_phase_src = toNB_nowBinary1 ;
  assign cdcs_10_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[21:20] ;

  // submodule cdcs_11
  assign cdcs_11_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_11_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_11_phase_src = toNB_nowBinary1 ;
  assign cdcs_11_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[23:22] ;

  // submodule cdcs_12
  assign cdcs_12_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_12_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_12_phase_src = toNB_nowBinary1 ;
  assign cdcs_12_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[25:24] ;

  // submodule cdcs_13
  assign cdcs_13_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_13_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_13_phase_src = toNB_nowBinary1 ;
  assign cdcs_13_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[27:26] ;

  // submodule cdcs_14
  assign cdcs_14_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_14_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_14_phase_src = toNB_nowBinary1 ;
  assign cdcs_14_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[29:28] ;

  // submodule cdcs_15
  assign cdcs_15_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_15_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_15_phase_src = toNB_nowBinary1 ;
  assign cdcs_15_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[31:30] ;

  // submodule cdcs_16
  assign cdcs_16_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_16_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_16_phase_src = toNB_nowBinary1 ;
  assign cdcs_16_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[1:0] ;

  // submodule cdcs_17
  assign cdcs_17_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_17_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_17_phase_src = toNB_nowBinary1 ;
  assign cdcs_17_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[3:2] ;

  // submodule cdcs_18
  assign cdcs_18_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_18_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_18_phase_src = toNB_nowBinary1 ;
  assign cdcs_18_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[5:4] ;

  // submodule cdcs_19
  assign cdcs_19_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_19_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_19_phase_src = toNB_nowBinary1 ;
  assign cdcs_19_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[7:6] ;

  // submodule cdcs_2
  assign cdcs_2_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_2_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_2_phase_src = toNB_nowBinary1 ;
  assign cdcs_2_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[5:4] ;

  // submodule cdcs_20
  assign cdcs_20_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_20_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_20_phase_src = toNB_nowBinary1 ;
  assign cdcs_20_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[9:8] ;

  // submodule cdcs_21
  assign cdcs_21_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_21_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_21_phase_src = toNB_nowBinary1 ;
  assign cdcs_21_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[11:10] ;

  // submodule cdcs_22
  assign cdcs_22_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_22_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_22_phase_src = toNB_nowBinary1 ;
  assign cdcs_22_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[13:12] ;

  // submodule cdcs_23
  assign cdcs_23_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_23_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_23_phase_src = toNB_nowBinary1 ;
  assign cdcs_23_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[15:14] ;

  // submodule cdcs_24
  assign cdcs_24_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_24_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_24_phase_src = toNB_nowBinary1 ;
  assign cdcs_24_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[17:16] ;

  // submodule cdcs_25
  assign cdcs_25_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_25_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_25_phase_src = toNB_nowBinary1 ;
  assign cdcs_25_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[19:18] ;

  // submodule cdcs_26
  assign cdcs_26_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_26_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_26_phase_src = toNB_nowBinary1 ;
  assign cdcs_26_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[21:20] ;

  // submodule cdcs_27
  assign cdcs_27_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_27_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_27_phase_src = toNB_nowBinary1 ;
  assign cdcs_27_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[23:22] ;

  // submodule cdcs_28
  assign cdcs_28_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_28_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_28_phase_src = toNB_nowBinary1 ;
  assign cdcs_28_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[25:24] ;

  // submodule cdcs_29
  assign cdcs_29_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_29_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_29_phase_src = toNB_nowBinary1 ;
  assign cdcs_29_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[27:26] ;

  // submodule cdcs_3
  assign cdcs_3_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_3_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_3_phase_src = toNB_nowBinary1 ;
  assign cdcs_3_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[7:6] ;

  // submodule cdcs_30
  assign cdcs_30_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_30_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_30_phase_src = toNB_nowBinary1 ;
  assign cdcs_30_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[29:28] ;

  // submodule cdcs_31
  assign cdcs_31_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_31_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_31_phase_src = toNB_nowBinary1 ;
  assign cdcs_31_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_1[31:30] ;

  // submodule cdcs_4
  assign cdcs_4_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_4_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_4_phase_src = toNB_nowBinary1 ;
  assign cdcs_4_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[9:8] ;

  // submodule cdcs_5
  assign cdcs_5_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_5_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_5_phase_src = toNB_nowBinary1 ;
  assign cdcs_5_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[11:10] ;

  // submodule cdcs_6
  assign cdcs_6_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_6_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_6_phase_src = toNB_nowBinary1 ;
  assign cdcs_6_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[13:12] ;

  // submodule cdcs_7
  assign cdcs_7_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_7_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_7_phase_src = toNB_nowBinary1 ;
  assign cdcs_7_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[15:14] ;

  // submodule cdcs_8
  assign cdcs_8_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_8_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_8_phase_src = toNB_nowBinary1 ;
  assign cdcs_8_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[17:16] ;

  // submodule cdcs_9
  assign cdcs_9_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign cdcs_9_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign cdcs_9_phase_src = toNB_nowBinary1 ;
  assign cdcs_9_timeFormat_format =
	     cfg_regs_ifc_reg_timeFormats_dutView_0[19:18] ;

  // submodule cfg_tlm_tlm_fifo_out
  assign cfg_tlm_tlm_fifo_out_D_IN =
	     WILL_FIRE_RL_cfg_tlm_read_op ?
	       MUX_cfg_tlm_tlm_fifo_out_enq_1__VAL_1 :
	       36'h400000000 ;
  assign cfg_tlm_tlm_fifo_out_ENQ =
	     WILL_FIRE_RL_cfg_tlm_read_op || WILL_FIRE_RL_cfg_tlm_write_op ;
  assign cfg_tlm_tlm_fifo_out_DEQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign cfg_tlm_tlm_fifo_out_CLR = 1'b0 ;

  // submodule counter_axiClkCntCross
  assign counter_axiClkCntCross_sD_IN = counter_axiClkCnt + 32'd1 ;
  assign counter_axiClkCntCross_sEN = counter_axiClkCntCross_sRDY ;

  // submodule crossing_sync_req
  assign crossing_sync_req_sD_IN = xactor_tlm_tx_get ;
  assign crossing_sync_req_sENQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign crossing_sync_req_dDEQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // submodule crossing_sync_resp
  assign crossing_sync_resp_sD_IN = cfg_tlm_tlm_fifo_out_D_OUT ;
  assign crossing_sync_resp_sENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign crossing_sync_resp_dDEQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule noCDC
  assign noCDC_phaseOrdinary_phase_src = toNO_nowOrdinary ;
  assign noCDC_phaseTransparent_phase_src = toNT_nowTransparent ;
  assign noCDC_phase_src = toNB_nowBinary1 ;
  assign noCDC_timeFormat_format =
	     cfg_regs_ifc_reg_timeControl_dutView_0[15:14] ;

  // submodule pfd
  assign pfd_mode = cfg_regs_ifc_reg_timeControl_dutView_1[31:30] ;
  assign pfd_oneSecond = oneSecondD ;
  assign pfd_pps =
	     CAN_FIRE_RL_cfg_regs_ifc_reg_timeLastPPS_ifcs_0_do_local_write ;

  // submodule xactor
  assign xactor_araddr = s_axi_araddr ;
  assign xactor_arprot = s_axi_arprot ;
  assign xactor_awaddr = s_axi_awaddr ;
  assign xactor_awprot = s_axi_awprot ;
  assign xactor_tlm_rx_put = crossing_sync_resp_dD_OUT ;
  assign xactor_wdata = s_axi_wdata ;
  assign xactor_wstrb = s_axi_wstrb ;
  assign xactor_EN_tlm_tx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign xactor_EN_tlm_rx_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign xactor_awvalid = s_axi_awvalid ;
  assign xactor_wvalid = s_axi_wvalid ;
  assign xactor_bready = s_axi_bready ;
  assign xactor_arvalid = s_axi_arvalid ;
  assign xactor_rready = s_axi_rready ;

  // remaining internal signals
  assign IF_cfg_regs_ifc_wd_timeNow_wasWritten_53_THEN__ETC___d569 =
	     cfg_regs_ifc_wd_timeNow_wasWritten ?
	       { x__h80612[47:0], next_f__h80600 } :
	       { 47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 i__h79682,
		 f__h79683 } ;
  assign IF_incr_ltZero1_04_THEN_incr_last_05_BITS_119__ETC___d414 =
	     incr_ltZero1 ?
	       incr_last[119:72] - { 47'd0, b__h64628 } :
	       incr_last[119:72] + { 47'd0, b__h64643 } ;
  assign IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d718 =
	     pfd_inReset ?
	       49'd0 :
	       k1AccumDump +
	       { 27'd0, cfg_regs_ifc_reg_timeControl_dutView_1[29:8] } ;
  assign IF_pfd_inReset__13_THEN_0_ELSE_k1AccumDump_14__ETC___d722 =
	     pfd_inReset ?
	       49'd0 :
	       k1AccumDump -
	       { 27'd0, cfg_regs_ifc_reg_timeControl_dutView_1[29:8] } ;
  assign IF_ppsEventSrc_whas__55_OR_ppsEventTst_whas__5_ETC___d696 =
	     (NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 ||
	      ppsEventTst_whas) ?
	       { pfdFaster, pfdSlower } :
	       cfg_regs_ifc_reg_timeStatus_dutView_0[3:2] ;
  assign IF_rise001MS_59_THEN_cfg_regs_ifc_reg_timeStat_ETC___d701 =
	     rise001MS ?
	       cfg_regs_ifc_reg_timeStatus_dutView_0[1] :
	       (fall001MS ?
		  !pulseIn001MS || cfg_regs_ifc_reg_timeStatus_dutView_0[1] :
		  cfg_regs_ifc_reg_timeStatus_dutView_0[1]) ;
  assign IF_rise250MS_68_THEN_cfg_regs_ifc_reg_timeStat_ETC___d706 =
	     rise250MS ?
	       cfg_regs_ifc_reg_timeStatus_dutView_0[0] :
	       (fall250MS ?
		  !pulseIn250MS || cfg_regs_ifc_reg_timeStatus_dutView_0[0] :
		  cfg_regs_ifc_reg_timeStatus_dutView_0[0]) ;
  assign NOT_cfg_regs_ifc_reg_timeControl_dutView_0_1_B_ETC___d777 =
	     !cfg_regs_ifc_reg_timeControl_dutView_0[16] &&
	     (!ppsD && ppsSync &&
	      !cfg_regs_ifc_reg_timeControl_dutView_0[17] ||
	      ppsD && !ppsSync &&
	      cfg_regs_ifc_reg_timeControl_dutView_0[17]) ;
  assign NOT_incr_last_05_BIT_62_83_84_AND_NOT_incr_las_ETC___d609 =
	     !incr_last[62] && !incr_last[63] && !incr_last[64] &&
	     !incr_last[65] &&
	     !incr_last[66] &&
	     !incr_last[67] &&
	     !incr_last[68] &&
	     !incr_last[69] &&
	     !incr_last[70] &&
	     !incr_last[71] ;
  assign _0_CONCAT_incr_last_BITS_71_TO_40_CONCAT_0_MINU_ETC__q3 =
	     { 27'd0, incr_last[71:40], 5'd0 } - x__h65988 ;
  assign _0_CONCAT_incr_last_BITS_89_TO_48_CONCAT_0_MINU_ETC__q2 =
	     { 17'd0, incr_last[89:48], 5'd0 } - x__h66105 ;
  assign _dfoo17 =
	     pfd_direction[1] && !pfd_direction[0] ||
	     pfd_direction[0] && !pfd_direction[1] ;
  assign _dfoo21 =
	     pfd_direction[1] && !pfd_direction[0] ||
	     pfd_direction[0] && !pfd_direction[1] ||
	     pfd_direction[0] == pfd_direction[1] && pfd_inReset ;
  assign b__h64628 = incr_msbD == incr_msb1[36] ;
  assign b__h64643 = !b__h64628 ;
  assign b__h79512 =
	     { cfg_regs_ifc_reg_phaseInc_dutView_1[16:0],
	       cfg_regs_ifc_reg_phaseInc_dutView_0 } ;
  assign b__h80608 =
	     { cfg_regs_ifc_reg_timeNow_dutView_3,
	       cfg_regs_ifc_reg_timeNow_dutView_2[31:16] } ;
  assign cfg_regs_ifc_reg_timeCompare_dutView_1_9_CONCA_ETC___d751 =
	     { cfg_regs_ifc_reg_timeCompare_dutView_1,
	       cfg_regs_ifc_reg_timeCompare_dutView_0 } -
	     incr_last[103:40] ;
  assign f__h79683 =
	     cfg_regs_ifc_wd_skipTimeRelative_wasWritten ?
	       i___1_f__h79675 :
	       i_f__h79681 ;
  assign i___1_f__h79675 =
	     { cfg_regs_ifc_reg_skipTimeRelative[30:0], 41'd0 } ;
  assign i__h79682 =
	     cfg_regs_ifc_wd_skipTimeRelative_wasWritten && x__h79695[0] ;
  assign i_f__h79681 = { 23'd0, b__h79512 } ;
  assign incr_last_05_BIT_62_83_AND_incr_last_05_BIT_63_ETC___d618 =
	     incr_last[62] && incr_last[63] && incr_last[64] &&
	     incr_last[65] &&
	     incr_last[66] &&
	     incr_last[67] &&
	     incr_last[68] &&
	     incr_last[69] &&
	     incr_last[70] &&
	     incr_last[71] ;
  assign incr_last_BITS_119_TO_72__q1 = incr_last[119:72] ;
  assign k1AccumDump_14_PLUS_k2Integrator_25___d731 =
	     k1AccumDump + k2Integrator ;
  assign lev35597_BITS_61_TO_0_CONCAT_0_PLUS_lev35597__q4 =
	     { lev3__h65597[61:0], 2'd0 } + lev3__h65597 ;
  assign lev35818_BITS_61_TO_0_CONCAT_0_PLUS_lev35818__q5 =
	     { lev3__h65818[61:0], 2'd0 } + lev3__h65818 ;
  assign lev3__h65597 = { toNO_mult_lev2a[58:0], 5'd0 } + toNO_mult_lev2b ;
  assign lev3__h65818 = { toNT_mult_lev2a[58:0], 5'd0 } + toNT_mult_lev2b ;
  assign next_f__h80600 =
	     { cfg_regs_ifc_reg_timeNow_dutView_2[15:0],
	       cfg_regs_ifc_reg_timeNow_dutView_1,
	       cfg_regs_ifc_reg_timeNow_dutView_0[31:8] } ;
  assign testCount_58_ULT_1000000000000___d759 = testCount < 42'h0E8D4A51000 ;
  assign v__h46155 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd0) ?
	       cfg_regs_ifc_reg_version_ifcs_0 :
	       32'd0 ;
  assign v__h46725 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd8) ?
	       cfg_regs_ifc_reg_testRegister_ifcs_0 :
	       32'd0 ;
  assign v__h47435 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd24) ?
	       cfg_regs_ifc_reg_timeCompare_ifcs_0 :
	       32'd0 ;
  assign v__h48160 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd40) ?
	       cfg_regs_ifc_reg_timeFormats_ifcs_0 :
	       32'd0 ;
  assign v__h48730 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd64) ?
	       cfg_regs_ifc_reg_timeStatus_ifcs_0 :
	       32'd0 ;
  assign v__h49300 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd72) ?
	       cfg_regs_ifc_reg_timeControl_ifcs_0 :
	       32'd0 ;
  assign v__h49870 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd80) ?
	       cfg_regs_ifc_reg_timeNow_ifcs_0 :
	       32'd0 ;
  assign v__h50990 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd96) ?
	       cfg_regs_ifc_reg_phaseInc_ifcs_0 :
	       32'd0 ;
  assign v__h51560 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd104) ?
	       cfg_regs_ifc_reg_timeLastPPS_ifcs_0 :
	       32'd0 ;
  assign v__h52309 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd128) ?
	       cfg_regs_ifc_reg_timeStatus_dutView_0 :
	       32'd0 ;
  assign value__h83697 = counter_refClkPerPPS + 32'd1 ;
  assign x15__h65992 = { 28'd0, incr_last[71:40], 4'd0 } - x__h65988 ;
  assign x15__h66109 = { 18'd0, incr_last[89:48], 4'd0 } - x__h66105 ;
  assign x262145__h65994 = { 14'd0, incr_last[71:40], 18'd0 } + x__h65988 ;
  assign x262145__h66111 = { 4'd0, incr_last[89:48], 18'd0 } + x__h66105 ;
  assign x__h56303 = x__h56305 | y__h56306 ;
  assign x__h56305 = x__h56307 | y__h56308 ;
  assign x__h56307 = x__h56309 | y__h56310 ;
  assign x__h56309 = x__h56311 | y__h56312 ;
  assign x__h56311 = v__h46155 | y__h56314 ;
  assign x__h56317 = x__h56319 | y__h56320 ;
  assign x__h56319 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd16) ?
	       cfg_regs_ifc_reg_axiClockPeriod :
	       32'd0 ;
  assign x__h56323 = x__h56325 | v__h48160 ;
  assign x__h56325 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd32) ?
	       cfg_regs_ifc_reg_skipTimeRelative :
	       32'd0 ;
  assign x__h56331 = x__h56333 | v__h48730 ;
  assign x__h56337 = x__h56339 | y__h56340 ;
  assign x__h56339 = x__h56341 | y__h56342 ;
  assign x__h56341 = x__h56343 | v__h49870 ;
  assign x__h56353 = x__h56355 | y__h56356 ;
  assign x__h56355 = v__h51560 | y__h56358 ;
  assign x__h56359 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd112) ?
	       cfg_regs_ifc_reg_ppsCnt :
	       32'd0 ;
  assign x__h56361 = x__h56363 | y__h56364 ;
  assign x__h56363 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd120) ?
	       cfg_regs_ifc_reg_refClkCnt :
	       32'd0 ;
  assign x__h56367 = x__h56369 | y__h56370 ;
  assign x__h56369 = x__h56371 | y__h56372 ;
  assign x__h56371 = x__h56373 | y__h56374 ;
  assign x__h56377 = x__h56379 | y__h56380 ;
  assign x__h56383 = x__h56385 | y__h56386 ;
  assign x__h56385 = x__h56387 | y__h56388 ;
  assign x__h64719 = incr_msb1 + y__h64722 ;
  assign x__h65988 = { 32'd0, incr_last[71:40] } ;
  assign x__h66029 =
	     { _0_CONCAT_incr_last_BITS_71_TO_40_CONCAT_0_MINU_ETC__q3[56:0],
	       7'd0 } ;
  assign x__h66105 = { 22'd0, incr_last[89:48] } ;
  assign x__h66146 =
	     { _0_CONCAT_incr_last_BITS_89_TO_48_CONCAT_0_MINU_ETC__q2[56:0],
	       7'd0 } ;
  assign x__h79695 = {2{cfg_regs_ifc_reg_skipTimeRelative[31]}} ;
  assign x__h79931 =
	     { {48{incr_last_BITS_119_TO_72__q1[47]}},
	       incr_last_BITS_119_TO_72__q1 } ;
  assign x__h80612 = { {48{b__h80608[47]}}, b__h80608 } ;
  assign x__h84600 = testCount + { 10'd0, cfg_regs_ifc_reg_refClockPeriod } ;
  assign x_data__h56417 = x__h56303 | y__h56304 ;
  assign x_f__h64619 = { incr_msb1[35:0], incr_lsb1 } ;
  assign x_i__h64618 =
	     incr_whole1[48] ?
	       incr_whole1[47:0] :
	       IF_incr_ltZero1_04_THEN_incr_last_05_BITS_119__ETC___d414 ;
  assign y__h56304 = x__h56367 | y__h56368 ;
  assign y__h56306 = x__h56337 | y__h56338 ;
  assign y__h56308 = x__h56323 | y__h56324 ;
  assign y__h56310 = x__h56317 | y__h56318 ;
  assign y__h56312 = v__h46725 | y__h56316 ;
  assign y__h56318 = v__h47435 | y__h56322 ;
  assign y__h56320 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd20) ?
	       cfg_regs_ifc_reg_refClockPeriod :
	       32'd0 ;
  assign y__h56324 = x__h56331 | y__h56332 ;
  assign y__h56332 = x__h56335 | v__h49300 ;
  assign y__h56338 = x__h56353 | y__h56354 ;
  assign y__h56340 = x__h56347 | y__h56348 ;
  assign y__h56342 = x__h56345 | y__h56346 ;
  assign y__h56348 = v__h50990 | y__h56352 ;
  assign y__h56354 = x__h56361 | y__h56362 ;
  assign y__h56356 = x__h56359 | y__h56360 ;
  assign y__h56360 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd116) ?
	       cfg_regs_ifc_reg_refClkPerPPS :
	       32'd0 ;
  assign y__h56362 = v__h52309 | y__h56366 ;
  assign y__h56364 =
	     (crossing_sync_req_dD_OUT[50:39] == 12'd124) ?
	       cfg_regs_ifc_reg_axiClkCnt :
	       32'd0 ;
  assign y__h56368 = x__h56383 | y__h56384 ;
  assign y__h56370 = x__h56377 | y__h56378 ;
  assign y__h56372 = x__h56375 | y__h56376 ;
  assign y__h56378 = x__h56381 | y__h56382 ;
  assign y__h56384 = x__h56391 | y__h56392 ;
  assign y__h56386 = x__h56389 | y__h56390 ;
  assign y__h64720 = { 36'd0, incr_lsb[36] } ;
  assign y__h64722 = { 1'b0, incr_msbIncr[35:0] } ;
  assign y__h66087 = { 22'd0, incr_last[71:40], 10'd0 } ;
  assign y__h66212 = { 12'd0, incr_last[89:48], 10'd0 } ;
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_version_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd4: y__h56314 = cfg_regs_ifc_reg_version_crView_1;
      default: y__h56314 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_testRegister_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd12: y__h56316 = cfg_regs_ifc_reg_testRegister_crView_1;
      default: y__h56316 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeCompare_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd28: y__h56322 = cfg_regs_ifc_reg_timeCompare_crView_1;
      default: y__h56322 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeFormats_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd44: x__h56333 = cfg_regs_ifc_reg_timeFormats_crView_1;
      default: x__h56333 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeStatus_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd68: x__h56335 = cfg_regs_ifc_reg_timeStatus_crView_1;
      default: x__h56335 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeControl_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd76: x__h56343 = cfg_regs_ifc_reg_timeControl_crView_1;
      default: x__h56343 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeNow_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd84: x__h56345 = cfg_regs_ifc_reg_timeNow_crView_1;
      default: x__h56345 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeNow_crView_2)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd88: y__h56346 = cfg_regs_ifc_reg_timeNow_crView_2;
      default: y__h56346 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeNow_crView_3)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd92: x__h56347 = cfg_regs_ifc_reg_timeNow_crView_3;
      default: x__h56347 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_phaseInc_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd100: y__h56352 = cfg_regs_ifc_reg_phaseInc_crView_1;
      default: y__h56352 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_timeLastPPS_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd108: y__h56358 = cfg_regs_ifc_reg_timeLastPPS_crView_1;
      default: y__h56358 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_1)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd132: y__h56366 = cfg_regs_ifc_reg_state_crView_1;
      default: y__h56366 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_2)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd136: x__h56373 = cfg_regs_ifc_reg_state_crView_2;
      default: x__h56373 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_3)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd140: y__h56374 = cfg_regs_ifc_reg_state_crView_3;
      default: y__h56374 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_4)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd144: x__h56375 = cfg_regs_ifc_reg_state_crView_4;
      default: x__h56375 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_5)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd148: y__h56376 = cfg_regs_ifc_reg_state_crView_5;
      default: y__h56376 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_6)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd152: x__h56379 = cfg_regs_ifc_reg_state_crView_6;
      default: x__h56379 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_7)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd156: y__h56380 = cfg_regs_ifc_reg_state_crView_7;
      default: y__h56380 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_10)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd168: x__h56387 = cfg_regs_ifc_reg_state_crView_10;
      default: x__h56387 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_8)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd160: x__h56381 = cfg_regs_ifc_reg_state_crView_8;
      default: x__h56381 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_9)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd164: y__h56382 = cfg_regs_ifc_reg_state_crView_9;
      default: y__h56382 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_11)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd172: y__h56388 = cfg_regs_ifc_reg_state_crView_11;
      default: y__h56388 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_12)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd176: x__h56389 = cfg_regs_ifc_reg_state_crView_12;
      default: x__h56389 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_13)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd180: y__h56390 = cfg_regs_ifc_reg_state_crView_13;
      default: y__h56390 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_14)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd184: x__h56391 = cfg_regs_ifc_reg_state_crView_14;
      default: x__h56391 = 32'd0;
    endcase
  end
  always@(crossing_sync_req_dD_OUT or cfg_regs_ifc_reg_state_crView_15)
  begin
    case (crossing_sync_req_dD_OUT[50:39])
      12'd188: y__h56392 = cfg_regs_ifc_reg_state_crView_15;
      default: y__h56392 = 32'd0;
    endcase
  end
  always@(cfg_regs_ifc_reg_timeControl_dutView_1 or incr_valueOp_wget)
  begin
    case (cfg_regs_ifc_reg_timeControl_dutView_1[31:30])
      2'd0, 2'd1, 2'd2: x__h64861 = incr_valueOp_wget[71:0];
      2'd3: x__h64861 = 72'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        counter_axiClkCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (counter_axiClkCnt_EN)
	  counter_axiClkCnt <= `BSV_ASSIGNMENT_DELAY counter_axiClkCnt_D_IN;
      end
  end

  always@(posedge ref_clk)
  begin
    if (ref_rstn__DELAYED == `BSV_RESET_VALUE)
      begin
        cfg_regs_ifc_reg_axiClkCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_axiClockPeriod <= `BSV_ASSIGNMENT_DELAY 32'd8000;
	cfg_regs_ifc_reg_phaseInc_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_phaseInc_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_phaseInc_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_phaseInc_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_phaseInc_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_phaseInc_midBusWrite <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfg_regs_ifc_reg_ppsCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_refClkCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_refClkPerPPS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_refClockPeriod <= `BSV_ASSIGNMENT_DELAY 32'd4000;
	cfg_regs_ifc_reg_skipTimeRelative <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_testRegister_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_testRegister_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	cfg_regs_ifc_reg_testRegister_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	cfg_regs_ifc_reg_testRegister_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_testRegister_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_testRegister_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	cfg_regs_ifc_reg_timeCompare_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeCompare_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeCompare_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeCompare_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeCompare_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeCompare_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	cfg_regs_ifc_reg_timeControl_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeControl_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeControl_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeControl_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeControl_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeControl_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	cfg_regs_ifc_reg_timeFormats_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeFormats_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeFormats_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeFormats_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeFormats_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeFormats_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	cfg_regs_ifc_reg_timeLastPPS_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeLastPPS_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeLastPPS_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_crView_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_crView_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_dutView_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_dutView_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_ifcs_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_ifcs_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeNow_midBusWrite <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfg_regs_ifc_reg_timeStatus_crView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeStatus_dutView_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeStatus_dutView_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeStatus_ifcs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeStatus_ifcs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cfg_regs_ifc_reg_timeStatus_midBusWrite <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfg_regs_ifc_reg_version_crView_1 <= `BSV_ASSIGNMENT_DELAY
	    32'd808333600;
	cfg_regs_ifc_reg_version_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	    32'd1985178964;
	cfg_regs_ifc_reg_version_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	    32'd808333600;
	cfg_regs_ifc_reg_version_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	    32'd1985178964;
	cfg_regs_ifc_reg_version_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	    32'd808333600;
	cfg_regs_ifc_reg_version_midBusWrite <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfg_regs_ifc_wd_skipTimeRelative_wasWritten <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	cfg_regs_ifc_wd_timeCompare_wasWritten <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfg_regs_ifc_wd_timeNow_wasWritten <= `BSV_ASSIGNMENT_DELAY 1'd0;
	counter_refClkCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter_refClkPerPPS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fall001MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fall250MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	incr_last <= `BSV_ASSIGNMENT_DELAY 120'd0;
	incr_lsb <= `BSV_ASSIGNMENT_DELAY 37'd0;
	incr_lsb1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	incr_ltZero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	incr_ltZero1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	incr_msb1 <= `BSV_ASSIGNMENT_DELAY 37'd0;
	incr_msbD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	incr_msbIncr <= `BSV_ASSIGNMENT_DELAY 38'd0;
	incr_whole <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	incr_whole1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	k1AccumDump <= `BSV_ASSIGNMENT_DELAY 49'd0;
	k2Integrator <= `BSV_ASSIGNMENT_DELAY 49'd0;
	msbD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	oneSecondD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pfdFaster <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pfdSlower <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ppsD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ppsSync <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pulseIn001MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pulseIn250MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rise001MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rise250MS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	testCount <= `BSV_ASSIGNMENT_DELAY 42'd0;
	toNB_nowBinary <= `BSV_ASSIGNMENT_DELAY 80'd0;
	toNB_nowBinary1 <= `BSV_ASSIGNMENT_DELAY 80'd0;
	toNO_mult_lev2a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	toNO_mult_lev2b <= `BSV_ASSIGNMENT_DELAY 64'd0;
	toNO_nowOrdinary <= `BSV_ASSIGNMENT_DELAY 80'd0;
	toNO_whole <= `BSV_ASSIGNMENT_DELAY 48'd0;
	toNT_mult_lev2a <= `BSV_ASSIGNMENT_DELAY 64'd0;
	toNT_mult_lev2b <= `BSV_ASSIGNMENT_DELAY 64'd0;
	toNT_nowTransparent <= `BSV_ASSIGNMENT_DELAY 64'd0;
	window001MSD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	window250MSD <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_regs_ifc_reg_axiClkCnt_EN)
	  cfg_regs_ifc_reg_axiClkCnt <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_axiClkCnt_D_IN;
	if (cfg_regs_ifc_reg_axiClockPeriod_EN)
	  cfg_regs_ifc_reg_axiClockPeriod <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_axiClockPeriod_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_crView_1_EN)
	  cfg_regs_ifc_reg_phaseInc_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_crView_1_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_dutView_0_EN)
	  cfg_regs_ifc_reg_phaseInc_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_dutView_1_EN)
	  cfg_regs_ifc_reg_phaseInc_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_ifcs_0_EN)
	  cfg_regs_ifc_reg_phaseInc_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_ifcs_1_EN)
	  cfg_regs_ifc_reg_phaseInc_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_phaseInc_midBusWrite_EN)
	  cfg_regs_ifc_reg_phaseInc_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_phaseInc_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_ppsCnt_EN)
	  cfg_regs_ifc_reg_ppsCnt <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_ppsCnt_D_IN;
	if (cfg_regs_ifc_reg_refClkCnt_EN)
	  cfg_regs_ifc_reg_refClkCnt <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_refClkCnt_D_IN;
	if (cfg_regs_ifc_reg_refClkPerPPS_EN)
	  cfg_regs_ifc_reg_refClkPerPPS <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_refClkPerPPS_D_IN;
	if (cfg_regs_ifc_reg_refClockPeriod_EN)
	  cfg_regs_ifc_reg_refClockPeriod <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_refClockPeriod_D_IN;
	if (cfg_regs_ifc_reg_skipTimeRelative_EN)
	  cfg_regs_ifc_reg_skipTimeRelative <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_skipTimeRelative_D_IN;
	if (cfg_regs_ifc_reg_testRegister_crView_1_EN)
	  cfg_regs_ifc_reg_testRegister_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_crView_1_D_IN;
	if (cfg_regs_ifc_reg_testRegister_dutView_0_EN)
	  cfg_regs_ifc_reg_testRegister_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_testRegister_dutView_1_EN)
	  cfg_regs_ifc_reg_testRegister_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_testRegister_ifcs_0_EN)
	  cfg_regs_ifc_reg_testRegister_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_testRegister_ifcs_1_EN)
	  cfg_regs_ifc_reg_testRegister_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_testRegister_midBusWrite_EN)
	  cfg_regs_ifc_reg_testRegister_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_testRegister_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_crView_1_EN)
	  cfg_regs_ifc_reg_timeCompare_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_dutView_0_EN)
	  cfg_regs_ifc_reg_timeCompare_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_dutView_1_EN)
	  cfg_regs_ifc_reg_timeCompare_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeCompare_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeCompare_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeCompare_midBusWrite_EN)
	  cfg_regs_ifc_reg_timeCompare_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeCompare_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_timeControl_crView_1_EN)
	  cfg_regs_ifc_reg_timeControl_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeControl_dutView_0_EN)
	  cfg_regs_ifc_reg_timeControl_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_timeControl_dutView_1_EN)
	  cfg_regs_ifc_reg_timeControl_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_timeControl_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeControl_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeControl_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeControl_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeControl_midBusWrite_EN)
	  cfg_regs_ifc_reg_timeControl_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeControl_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_crView_1_EN)
	  cfg_regs_ifc_reg_timeFormats_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_dutView_0_EN)
	  cfg_regs_ifc_reg_timeFormats_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_dutView_1_EN)
	  cfg_regs_ifc_reg_timeFormats_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeFormats_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeFormats_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeFormats_midBusWrite_EN)
	  cfg_regs_ifc_reg_timeFormats_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeFormats_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_timeLastPPS_crView_1_EN)
	  cfg_regs_ifc_reg_timeLastPPS_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeLastPPS_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeLastPPS_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeLastPPS_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeLastPPS_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeLastPPS_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeLastPPS_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeLastPPS_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeNow_crView_1_EN)
	  cfg_regs_ifc_reg_timeNow_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeNow_crView_2_EN)
	  cfg_regs_ifc_reg_timeNow_crView_2 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_crView_2_D_IN;
	if (cfg_regs_ifc_reg_timeNow_crView_3_EN)
	  cfg_regs_ifc_reg_timeNow_crView_3 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_crView_3_D_IN;
	if (cfg_regs_ifc_reg_timeNow_dutView_0_EN)
	  cfg_regs_ifc_reg_timeNow_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_timeNow_dutView_1_EN)
	  cfg_regs_ifc_reg_timeNow_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_timeNow_dutView_2_EN)
	  cfg_regs_ifc_reg_timeNow_dutView_2 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_dutView_2_D_IN;
	if (cfg_regs_ifc_reg_timeNow_dutView_3_EN)
	  cfg_regs_ifc_reg_timeNow_dutView_3 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_dutView_3_D_IN;
	if (cfg_regs_ifc_reg_timeNow_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeNow_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeNow_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeNow_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeNow_ifcs_2_EN)
	  cfg_regs_ifc_reg_timeNow_ifcs_2 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_ifcs_2_D_IN;
	if (cfg_regs_ifc_reg_timeNow_ifcs_3_EN)
	  cfg_regs_ifc_reg_timeNow_ifcs_3 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_ifcs_3_D_IN;
	if (cfg_regs_ifc_reg_timeNow_midBusWrite_EN)
	  cfg_regs_ifc_reg_timeNow_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeNow_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_crView_1_EN)
	  cfg_regs_ifc_reg_timeStatus_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_crView_1_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_dutView_0_EN)
	  cfg_regs_ifc_reg_timeStatus_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_dutView_1_EN)
	  cfg_regs_ifc_reg_timeStatus_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_ifcs_0_EN)
	  cfg_regs_ifc_reg_timeStatus_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_ifcs_1_EN)
	  cfg_regs_ifc_reg_timeStatus_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_timeStatus_midBusWrite_EN)
	  cfg_regs_ifc_reg_timeStatus_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_timeStatus_midBusWrite_D_IN;
	if (cfg_regs_ifc_reg_version_crView_1_EN)
	  cfg_regs_ifc_reg_version_crView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_crView_1_D_IN;
	if (cfg_regs_ifc_reg_version_dutView_0_EN)
	  cfg_regs_ifc_reg_version_dutView_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_dutView_0_D_IN;
	if (cfg_regs_ifc_reg_version_dutView_1_EN)
	  cfg_regs_ifc_reg_version_dutView_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_dutView_1_D_IN;
	if (cfg_regs_ifc_reg_version_ifcs_0_EN)
	  cfg_regs_ifc_reg_version_ifcs_0 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_ifcs_0_D_IN;
	if (cfg_regs_ifc_reg_version_ifcs_1_EN)
	  cfg_regs_ifc_reg_version_ifcs_1 <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_ifcs_1_D_IN;
	if (cfg_regs_ifc_reg_version_midBusWrite_EN)
	  cfg_regs_ifc_reg_version_midBusWrite <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_reg_version_midBusWrite_D_IN;
	if (cfg_regs_ifc_wd_skipTimeRelative_wasWritten_EN)
	  cfg_regs_ifc_wd_skipTimeRelative_wasWritten <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_wd_skipTimeRelative_wasWritten_D_IN;
	if (cfg_regs_ifc_wd_timeCompare_wasWritten_EN)
	  cfg_regs_ifc_wd_timeCompare_wasWritten <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_wd_timeCompare_wasWritten_D_IN;
	if (cfg_regs_ifc_wd_timeNow_wasWritten_EN)
	  cfg_regs_ifc_wd_timeNow_wasWritten <= `BSV_ASSIGNMENT_DELAY
	      cfg_regs_ifc_wd_timeNow_wasWritten_D_IN;
	if (counter_refClkCnt_EN)
	  counter_refClkCnt <= `BSV_ASSIGNMENT_DELAY counter_refClkCnt_D_IN;
	if (counter_refClkPerPPS_EN)
	  counter_refClkPerPPS <= `BSV_ASSIGNMENT_DELAY
	      counter_refClkPerPPS_D_IN;
	if (fall001MS_EN) fall001MS <= `BSV_ASSIGNMENT_DELAY fall001MS_D_IN;
	if (fall250MS_EN) fall250MS <= `BSV_ASSIGNMENT_DELAY fall250MS_D_IN;
	if (incr_last_EN) incr_last <= `BSV_ASSIGNMENT_DELAY incr_last_D_IN;
	if (incr_lsb_EN) incr_lsb <= `BSV_ASSIGNMENT_DELAY incr_lsb_D_IN;
	if (incr_lsb1_EN) incr_lsb1 <= `BSV_ASSIGNMENT_DELAY incr_lsb1_D_IN;
	if (incr_ltZero_EN)
	  incr_ltZero <= `BSV_ASSIGNMENT_DELAY incr_ltZero_D_IN;
	if (incr_ltZero1_EN)
	  incr_ltZero1 <= `BSV_ASSIGNMENT_DELAY incr_ltZero1_D_IN;
	if (incr_msb1_EN) incr_msb1 <= `BSV_ASSIGNMENT_DELAY incr_msb1_D_IN;
	if (incr_msbD_EN) incr_msbD <= `BSV_ASSIGNMENT_DELAY incr_msbD_D_IN;
	if (incr_msbIncr_EN)
	  incr_msbIncr <= `BSV_ASSIGNMENT_DELAY incr_msbIncr_D_IN;
	if (incr_whole_EN)
	  incr_whole <= `BSV_ASSIGNMENT_DELAY incr_whole_D_IN;
	if (incr_whole1_EN)
	  incr_whole1 <= `BSV_ASSIGNMENT_DELAY incr_whole1_D_IN;
	if (k1AccumDump_EN)
	  k1AccumDump <= `BSV_ASSIGNMENT_DELAY k1AccumDump_D_IN;
	if (k2Integrator_EN)
	  k2Integrator <= `BSV_ASSIGNMENT_DELAY k2Integrator_D_IN;
	if (msbD_EN) msbD <= `BSV_ASSIGNMENT_DELAY msbD_D_IN;
	if (oneSecondD_EN)
	  oneSecondD <= `BSV_ASSIGNMENT_DELAY oneSecondD_D_IN;
	if (pfdFaster_EN) pfdFaster <= `BSV_ASSIGNMENT_DELAY pfdFaster_D_IN;
	if (pfdSlower_EN) pfdSlower <= `BSV_ASSIGNMENT_DELAY pfdSlower_D_IN;
	if (ppsD_EN) ppsD <= `BSV_ASSIGNMENT_DELAY ppsD_D_IN;
	if (ppsSync_EN) ppsSync <= `BSV_ASSIGNMENT_DELAY ppsSync_D_IN;
	if (pulseIn001MS_EN)
	  pulseIn001MS <= `BSV_ASSIGNMENT_DELAY pulseIn001MS_D_IN;
	if (pulseIn250MS_EN)
	  pulseIn250MS <= `BSV_ASSIGNMENT_DELAY pulseIn250MS_D_IN;
	if (rise001MS_EN) rise001MS <= `BSV_ASSIGNMENT_DELAY rise001MS_D_IN;
	if (rise250MS_EN) rise250MS <= `BSV_ASSIGNMENT_DELAY rise250MS_D_IN;
	if (testCount_EN) testCount <= `BSV_ASSIGNMENT_DELAY testCount_D_IN;
	if (toNB_nowBinary_EN)
	  toNB_nowBinary <= `BSV_ASSIGNMENT_DELAY toNB_nowBinary_D_IN;
	if (toNB_nowBinary1_EN)
	  toNB_nowBinary1 <= `BSV_ASSIGNMENT_DELAY toNB_nowBinary1_D_IN;
	if (toNO_mult_lev2a_EN)
	  toNO_mult_lev2a <= `BSV_ASSIGNMENT_DELAY toNO_mult_lev2a_D_IN;
	if (toNO_mult_lev2b_EN)
	  toNO_mult_lev2b <= `BSV_ASSIGNMENT_DELAY toNO_mult_lev2b_D_IN;
	if (toNO_nowOrdinary_EN)
	  toNO_nowOrdinary <= `BSV_ASSIGNMENT_DELAY toNO_nowOrdinary_D_IN;
	if (toNO_whole_EN)
	  toNO_whole <= `BSV_ASSIGNMENT_DELAY toNO_whole_D_IN;
	if (toNT_mult_lev2a_EN)
	  toNT_mult_lev2a <= `BSV_ASSIGNMENT_DELAY toNT_mult_lev2a_D_IN;
	if (toNT_mult_lev2b_EN)
	  toNT_mult_lev2b <= `BSV_ASSIGNMENT_DELAY toNT_mult_lev2b_D_IN;
	if (toNT_nowTransparent_EN)
	  toNT_nowTransparent <= `BSV_ASSIGNMENT_DELAY
	      toNT_nowTransparent_D_IN;
	if (window001MSD_EN)
	  window001MSD <= `BSV_ASSIGNMENT_DELAY window001MSD_D_IN;
	if (window250MSD_EN)
	  window250MSD <= `BSV_ASSIGNMENT_DELAY window250MSD_D_IN;
      end
    if (cfg_regs_ifc_reg_state_crView_1_EN)
      cfg_regs_ifc_reg_state_crView_1 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_1_D_IN;
    if (cfg_regs_ifc_reg_state_crView_10_EN)
      cfg_regs_ifc_reg_state_crView_10 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_10_D_IN;
    if (cfg_regs_ifc_reg_state_crView_11_EN)
      cfg_regs_ifc_reg_state_crView_11 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_11_D_IN;
    if (cfg_regs_ifc_reg_state_crView_12_EN)
      cfg_regs_ifc_reg_state_crView_12 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_12_D_IN;
    if (cfg_regs_ifc_reg_state_crView_13_EN)
      cfg_regs_ifc_reg_state_crView_13 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_13_D_IN;
    if (cfg_regs_ifc_reg_state_crView_14_EN)
      cfg_regs_ifc_reg_state_crView_14 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_14_D_IN;
    if (cfg_regs_ifc_reg_state_crView_15_EN)
      cfg_regs_ifc_reg_state_crView_15 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_15_D_IN;
    if (cfg_regs_ifc_reg_state_crView_2_EN)
      cfg_regs_ifc_reg_state_crView_2 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_2_D_IN;
    if (cfg_regs_ifc_reg_state_crView_3_EN)
      cfg_regs_ifc_reg_state_crView_3 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_3_D_IN;
    if (cfg_regs_ifc_reg_state_crView_4_EN)
      cfg_regs_ifc_reg_state_crView_4 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_4_D_IN;
    if (cfg_regs_ifc_reg_state_crView_5_EN)
      cfg_regs_ifc_reg_state_crView_5 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_5_D_IN;
    if (cfg_regs_ifc_reg_state_crView_6_EN)
      cfg_regs_ifc_reg_state_crView_6 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_6_D_IN;
    if (cfg_regs_ifc_reg_state_crView_7_EN)
      cfg_regs_ifc_reg_state_crView_7 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_7_D_IN;
    if (cfg_regs_ifc_reg_state_crView_8_EN)
      cfg_regs_ifc_reg_state_crView_8 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_8_D_IN;
    if (cfg_regs_ifc_reg_state_crView_9_EN)
      cfg_regs_ifc_reg_state_crView_9 <= `BSV_ASSIGNMENT_DELAY
	  cfg_regs_ifc_reg_state_crView_9_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_regs_ifc_reg_axiClkCnt = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_axiClockPeriod = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_phaseInc_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_ppsCnt = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_refClkCnt = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_refClkPerPPS = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_refClockPeriod = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_skipTimeRelative = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_10 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_11 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_12 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_13 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_14 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_15 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_2 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_3 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_4 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_5 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_6 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_7 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_8 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_state_crView_9 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_testRegister_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_timeCompare_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeCompare_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeCompare_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeCompare_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeCompare_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeCompare_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_timeControl_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeControl_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeControl_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeControl_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeControl_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeControl_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_timeFormats_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeFormats_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeFormats_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeFormats_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeFormats_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeFormats_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_timeLastPPS_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeLastPPS_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeLastPPS_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_crView_2 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_crView_3 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_dutView_2 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_dutView_3 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_ifcs_2 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_ifcs_3 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeNow_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_timeStatus_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeStatus_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeStatus_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeStatus_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeStatus_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_timeStatus_midBusWrite = 1'h0;
    cfg_regs_ifc_reg_version_crView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_version_dutView_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_version_dutView_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_version_ifcs_0 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_version_ifcs_1 = 32'hAAAAAAAA;
    cfg_regs_ifc_reg_version_midBusWrite = 1'h0;
    cfg_regs_ifc_wd_skipTimeRelative_wasWritten = 1'h0;
    cfg_regs_ifc_wd_timeCompare_wasWritten = 1'h0;
    cfg_regs_ifc_wd_timeNow_wasWritten = 1'h0;
    counter_axiClkCnt = 32'hAAAAAAAA;
    counter_refClkCnt = 32'hAAAAAAAA;
    counter_refClkPerPPS = 32'hAAAAAAAA;
    fall001MS = 1'h0;
    fall250MS = 1'h0;
    incr_last = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    incr_lsb = 37'h0AAAAAAAAA;
    incr_lsb1 = 36'hAAAAAAAAA;
    incr_ltZero = 1'h0;
    incr_ltZero1 = 1'h0;
    incr_msb1 = 37'h0AAAAAAAAA;
    incr_msbD = 1'h0;
    incr_msbIncr = 38'h2AAAAAAAAA;
    incr_whole = 49'h0AAAAAAAAAAAA;
    incr_whole1 = 49'h0AAAAAAAAAAAA;
    k1AccumDump = 49'h0AAAAAAAAAAAA;
    k2Integrator = 49'h0AAAAAAAAAAAA;
    msbD = 1'h0;
    oneSecondD = 1'h0;
    pfdFaster = 1'h0;
    pfdSlower = 1'h0;
    ppsD = 1'h0;
    ppsSync = 1'h0;
    pulseIn001MS = 1'h0;
    pulseIn250MS = 1'h0;
    rise001MS = 1'h0;
    rise250MS = 1'h0;
    testCount = 42'h2AAAAAAAAAA;
    toNB_nowBinary = 80'hAAAAAAAAAAAAAAAAAAAA;
    toNB_nowBinary1 = 80'hAAAAAAAAAAAAAAAAAAAA;
    toNO_mult_lev2a = 64'hAAAAAAAAAAAAAAAA;
    toNO_mult_lev2b = 64'hAAAAAAAAAAAAAAAA;
    toNO_nowOrdinary = 80'hAAAAAAAAAAAAAAAAAAAA;
    toNO_whole = 48'hAAAAAAAAAAAA;
    toNT_mult_lev2a = 64'hAAAAAAAAAAAAAAAA;
    toNT_mult_lev2b = 64'hAAAAAAAAAAAAAAAA;
    toNT_nowTransparent = 64'hAAAAAAAAAAAAAAAA;
    window001MSD = 1'h0;
    window250MSD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // timeServo

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// now_pps                    O     1
// now_phase                  O    80
// now_clk                        I     1 clock
// ref_clk                        I     1 clock
// ref_rstn                       I     1 reset
// phase_src                      I    80
// phaseOrdinary_phase_src        I    80
// phaseTransparent_phase_src     I    64
// timeFormat_format              I     2 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module nowCDC(now_clk,
	      ref_clk,
	      ref_rstn,

	      phase_src,

	      phaseOrdinary_phase_src,

	      phaseTransparent_phase_src,

	      timeFormat_format,

	      now_pps,

	      now_phase);
  input  now_clk;
  input  ref_clk;
  input  ref_rstn;

  // action method phaseBinary
  input  [79 : 0] phase_src;

  // action method phaseOrdinary
  input  [79 : 0] phaseOrdinary_phase_src;

  // action method phaseTransparent
  input  [63 : 0] phaseTransparent_phase_src;

  // action method timeFormat
  input  [1 : 0] timeFormat_format;

  // value method now_pps_now_pps
  output now_pps;

  // value method now_phase_now
  output [79 : 0] now_phase;

  // signals for module outputs
  wire [79 : 0] now_phase;
  wire now_pps;

  // register msbD
  reg msbD;
  wire msbD_D_IN, msbD_EN;

  // register ppsCount
  reg [3 : 0] ppsCount;
  wire [3 : 0] ppsCount_D_IN;
  wire ppsCount_EN;

  // register timeFmt
  reg [1 : 0] timeFmt;
  wire [1 : 0] timeFmt_D_IN;
  wire timeFmt_EN;

  // ports of submodule syncFIFO
  wire [80 : 0] syncFIFO_dD_OUT, syncFIFO_sD_IN;
  wire syncFIFO_dDEQ, syncFIFO_sENQ, syncFIFO_sFULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_doClockCross,
       CAN_FIRE_RL_doPpsCount,
       CAN_FIRE_RL_grabSyncPhase,
       CAN_FIRE_RL_updateMsb,
       CAN_FIRE_phaseBinary,
       CAN_FIRE_phaseOrdinary,
       CAN_FIRE_phaseTransparent,
       CAN_FIRE_timeFormat,
       WILL_FIRE_RL_doClockCross,
       WILL_FIRE_RL_doPpsCount,
       WILL_FIRE_RL_grabSyncPhase,
       WILL_FIRE_RL_updateMsb,
       WILL_FIRE_phaseBinary,
       WILL_FIRE_phaseOrdinary,
       WILL_FIRE_phaseTransparent,
       WILL_FIRE_timeFormat;

  // remaining internal signals
  reg [79 : 0] g_phase__h484;

  // action method phaseBinary
  assign CAN_FIRE_phaseBinary = 1'd1 ;
  assign WILL_FIRE_phaseBinary = 1'd1 ;

  // action method phaseOrdinary
  assign CAN_FIRE_phaseOrdinary = 1'd1 ;
  assign WILL_FIRE_phaseOrdinary = 1'd1 ;

  // action method phaseTransparent
  assign CAN_FIRE_phaseTransparent = 1'd1 ;
  assign WILL_FIRE_phaseTransparent = 1'd1 ;

  // action method timeFormat
  assign CAN_FIRE_timeFormat = 1'd1 ;
  assign WILL_FIRE_timeFormat = 1'd1 ;

  // value method now_pps_now_pps
  assign now_pps = CAN_FIRE_RL_doPpsCount ;

  // value method now_phase_now
  assign now_phase = syncFIFO_dD_OUT[80:1] ;

  // submodule syncFIFO
  SyncFIFO #(.dataWidth(32'd81),
	     .depth(32'd8),
	     .indxWidth(32'd3)) syncFIFO(.sCLK(ref_clk),
					 .dCLK(now_clk),
					 .sRST(ref_rstn),
					 .sD_IN(syncFIFO_sD_IN),
					 .sENQ(syncFIFO_sENQ),
					 .dDEQ(syncFIFO_dDEQ),
					 .sFULL_N(syncFIFO_sFULL_N),
					 .dD_OUT(syncFIFO_dD_OUT),
					 .dEMPTY_N());

  // rule RL_doClockCross
  assign CAN_FIRE_RL_doClockCross = syncFIFO_sFULL_N ;
  assign WILL_FIRE_RL_doClockCross = syncFIFO_sFULL_N ;

  // rule RL_grabSyncPhase
  assign CAN_FIRE_RL_grabSyncPhase = 1'd1 ;
  assign WILL_FIRE_RL_grabSyncPhase = 1'd1 ;

  // rule RL_doPpsCount
  assign CAN_FIRE_RL_doPpsCount =
	     msbD && !syncFIFO_dD_OUT[0] || ppsCount != 4'd0 ;
  assign WILL_FIRE_RL_doPpsCount = CAN_FIRE_RL_doPpsCount ;

  // rule RL_updateMsb
  assign CAN_FIRE_RL_updateMsb = 1'd1 ;
  assign WILL_FIRE_RL_updateMsb = 1'd1 ;

  // register msbD
  assign msbD_D_IN = syncFIFO_dD_OUT[0] ;
  assign msbD_EN = 1'd1 ;

  // register ppsCount
  assign ppsCount_D_IN =
	     (msbD && !syncFIFO_dD_OUT[0]) ? 4'd1 : ppsCount + 4'd1 ;
  assign ppsCount_EN = CAN_FIRE_RL_doPpsCount ;

  // register timeFmt
  assign timeFmt_D_IN = timeFormat_format ;
  assign timeFmt_EN = 1'd1 ;

  // submodule syncFIFO
  assign syncFIFO_sD_IN = { g_phase__h484, phase_src[31] } ;
  assign syncFIFO_sENQ = syncFIFO_sFULL_N ;
  assign syncFIFO_dDEQ = 1'd1 ;

  // remaining internal signals
  always@(timeFmt or
	  phaseTransparent_phase_src or phase_src or phaseOrdinary_phase_src)
  begin
    case (timeFmt)
      2'd0: g_phase__h484 = phase_src;
      2'd1: g_phase__h484 = phaseOrdinary_phase_src;
      default: g_phase__h484 = { 16'd0, phaseTransparent_phase_src };
    endcase
  end

  // handling of inlined registers

  always@(posedge now_clk)
  begin
    if (msbD_EN) msbD <= `BSV_ASSIGNMENT_DELAY msbD_D_IN;
    if (ppsCount_EN) ppsCount <= `BSV_ASSIGNMENT_DELAY ppsCount_D_IN;
  end

  always@(posedge ref_clk)
  begin
    if (ref_rstn == `BSV_RESET_VALUE)
      begin
        timeFmt <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (timeFmt_EN) timeFmt <= `BSV_ASSIGNMENT_DELAY timeFmt_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    msbD = 1'h0;
    ppsCount = 4'hA;
    timeFmt = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // nowCDC

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// now_pps                    O     1
// now_phase                  O    80 reg
// ref_clk                        I     1 clock
// ref_rst                        I     1 reset
// phase_src                      I    80
// phaseOrdinary_phase_src        I    80
// phaseTransparent_phase_src     I    64
// timeFormat_format              I     2 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module nowNoCDC(ref_clk,
		ref_rst,

		phase_src,

		phaseOrdinary_phase_src,

		phaseTransparent_phase_src,

		timeFormat_format,

		now_pps,

		now_phase);
  input  ref_clk;
  input  ref_rst;

  // action method phaseBinary
  input  [79 : 0] phase_src;

  // action method phaseOrdinary
  input  [79 : 0] phaseOrdinary_phase_src;

  // action method phaseTransparent
  input  [63 : 0] phaseTransparent_phase_src;

  // action method timeFormat
  input  [1 : 0] timeFormat_format;

  // value method now_pps_now_pps
  output now_pps;

  // value method now_phase_now
  output [79 : 0] now_phase;

  // signals for module outputs
  wire [79 : 0] now_phase;
  wire now_pps;

  // register msbD
  reg msbD;
  wire msbD_D_IN, msbD_EN;

  // register ppsCount
  reg [3 : 0] ppsCount;
  wire [3 : 0] ppsCount_D_IN;
  wire ppsCount_EN;

  // register reg_phase
  reg [80 : 0] reg_phase;
  wire [80 : 0] reg_phase_D_IN;
  wire reg_phase_EN;

  // register timeFmt
  reg [1 : 0] timeFmt;
  wire [1 : 0] timeFmt_D_IN;
  wire timeFmt_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_doPpsCount,
       CAN_FIRE_RL_registerOutput,
       CAN_FIRE_RL_updateMsb,
       CAN_FIRE_phaseBinary,
       CAN_FIRE_phaseOrdinary,
       CAN_FIRE_phaseTransparent,
       CAN_FIRE_timeFormat,
       WILL_FIRE_RL_doPpsCount,
       WILL_FIRE_RL_registerOutput,
       WILL_FIRE_RL_updateMsb,
       WILL_FIRE_phaseBinary,
       WILL_FIRE_phaseOrdinary,
       WILL_FIRE_phaseTransparent,
       WILL_FIRE_timeFormat;

  // remaining internal signals
  reg [79 : 0] g_phase__h375;

  // action method phaseBinary
  assign CAN_FIRE_phaseBinary = 1'd1 ;
  assign WILL_FIRE_phaseBinary = 1'd1 ;

  // action method phaseOrdinary
  assign CAN_FIRE_phaseOrdinary = 1'd1 ;
  assign WILL_FIRE_phaseOrdinary = 1'd1 ;

  // action method phaseTransparent
  assign CAN_FIRE_phaseTransparent = 1'd1 ;
  assign WILL_FIRE_phaseTransparent = 1'd1 ;

  // action method timeFormat
  assign CAN_FIRE_timeFormat = 1'd1 ;
  assign WILL_FIRE_timeFormat = 1'd1 ;

  // value method now_pps_now_pps
  assign now_pps = CAN_FIRE_RL_doPpsCount ;

  // value method now_phase_now
  assign now_phase = reg_phase[80:1] ;

  // rule RL_doPpsCount
  assign CAN_FIRE_RL_doPpsCount = msbD && !reg_phase[0] || ppsCount != 4'd0 ;
  assign WILL_FIRE_RL_doPpsCount = CAN_FIRE_RL_doPpsCount ;

  // rule RL_updateMsb
  assign CAN_FIRE_RL_updateMsb = 1'd1 ;
  assign WILL_FIRE_RL_updateMsb = 1'd1 ;

  // rule RL_registerOutput
  assign CAN_FIRE_RL_registerOutput = 1'd1 ;
  assign WILL_FIRE_RL_registerOutput = 1'd1 ;

  // register msbD
  assign msbD_D_IN = reg_phase[0] ;
  assign msbD_EN = 1'd1 ;

  // register ppsCount
  assign ppsCount_D_IN = (msbD && !reg_phase[0]) ? 4'd1 : ppsCount + 4'd1 ;
  assign ppsCount_EN = CAN_FIRE_RL_doPpsCount ;

  // register reg_phase
  assign reg_phase_D_IN = { g_phase__h375, phase_src[31] } ;
  assign reg_phase_EN = 1'd1 ;

  // register timeFmt
  assign timeFmt_D_IN = timeFormat_format ;
  assign timeFmt_EN = 1'd1 ;

  // remaining internal signals
  always@(timeFmt or
	  phaseTransparent_phase_src or phase_src or phaseOrdinary_phase_src)
  begin
    case (timeFmt)
      2'd0: g_phase__h375 = phase_src;
      2'd1: g_phase__h375 = phaseOrdinary_phase_src;
      default: g_phase__h375 = { 16'd0, phaseTransparent_phase_src };
    endcase
  end

  // handling of inlined registers

  always@(posedge ref_clk)
  begin
    if (ref_rst == `BSV_RESET_VALUE)
      begin
        msbD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ppsCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	reg_phase <= `BSV_ASSIGNMENT_DELAY 81'd0;
	timeFmt <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (msbD_EN) msbD <= `BSV_ASSIGNMENT_DELAY msbD_D_IN;
	if (ppsCount_EN) ppsCount <= `BSV_ASSIGNMENT_DELAY ppsCount_D_IN;
	if (reg_phase_EN) reg_phase <= `BSV_ASSIGNMENT_DELAY reg_phase_D_IN;
	if (timeFmt_EN) timeFmt <= `BSV_ASSIGNMENT_DELAY timeFmt_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    msbD = 1'h0;
    ppsCount = 4'hA;
    reg_phase = 81'h0AAAAAAAAAAAAAAAAAAAA;
    timeFmt = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // nowNoCDC

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// direction                      O     2 reg
// inReset                        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pps                            I     1
// oneSecond                      I     1
// mode                           I     2
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPhaseFrequencyDetector(CLK,
				RST_N,

				pps,

				oneSecond,

				mode,

				direction,

				inReset);
  input  CLK;
  input  RST_N;

  // action method pps
  input  pps;

  // action method oneSecond
  input  oneSecond;

  // action method mode
  input  [1 : 0] mode;

  // value method direction
  output [1 : 0] direction;

  // value method inReset
  output inReset;

  // signals for module outputs
  wire [1 : 0] direction;
  wire inReset;

  // inlined wires
  wire [1 : 0] direct_1_wget;

  // register direct
  reg [1 : 0] direct;
  wire [1 : 0] direct_D_IN;
  wire direct_EN;

  // register pRefD
  reg pRefD;
  wire pRefD_D_IN, pRefD_EN;

  // register pSigD
  reg pSigD;
  wire pSigD_D_IN, pSigD_EN;

  // register qRefD
  reg qRefD;
  wire qRefD_D_IN, qRefD_EN;

  // register qSigD
  reg qSigD;
  wire qSigD_D_IN, qSigD_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_direct__dreg_update,
       CAN_FIRE_RL_doUpdate,
       CAN_FIRE_mode,
       CAN_FIRE_oneSecond,
       CAN_FIRE_pps,
       WILL_FIRE_RL_direct__dreg_update,
       WILL_FIRE_RL_doUpdate,
       WILL_FIRE_mode,
       WILL_FIRE_oneSecond,
       WILL_FIRE_pps;

  // remaining internal signals
  wire qRefD_OR_pRef_wget_AND_NOT_pRefD_0_1_2_AND_NOT_ETC___d17,
       qSigD_4_OR_pSig_wget_AND_NOT_pSigD_8_9_0_1_AND_ETC___d22;

  // action method pps
  assign CAN_FIRE_pps = 1'd1 ;
  assign WILL_FIRE_pps = 1'd1 ;

  // action method oneSecond
  assign CAN_FIRE_oneSecond = 1'd1 ;
  assign WILL_FIRE_oneSecond = 1'd1 ;

  // action method mode
  assign CAN_FIRE_mode = 1'd1 ;
  assign WILL_FIRE_mode = 1'd1 ;

  // value method direction
  assign direction = direct ;

  // value method inReset
  assign inReset = qRefD && qSigD ;

  // rule RL_doUpdate
  assign CAN_FIRE_RL_doUpdate = mode == 2'd2 ;
  assign WILL_FIRE_RL_doUpdate = CAN_FIRE_RL_doUpdate ;

  // rule RL_direct__dreg_update
  assign CAN_FIRE_RL_direct__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_direct__dreg_update = 1'd1 ;

  // inlined wires
  assign direct_1_wget =
	     { !qRefD && (!oneSecond || pRefD) &&
	       qSigD_4_OR_pSig_wget_AND_NOT_pSigD_8_9_0_1_AND_ETC___d22,
	       qRefD_OR_pRef_wget_AND_NOT_pRefD_0_1_2_AND_NOT_ETC___d17 &&
	       !qSigD &&
	       (!pps || pSigD) } ;

  // register direct
  assign direct_D_IN = (mode == 2'd2) ? direct_1_wget : 2'd0 ;
  assign direct_EN = 1'd1 ;

  // register pRefD
  assign pRefD_D_IN = oneSecond ;
  assign pRefD_EN = CAN_FIRE_RL_doUpdate ;

  // register pSigD
  assign pSigD_D_IN = pps ;
  assign pSigD_EN = CAN_FIRE_RL_doUpdate ;

  // register qRefD
  assign qRefD_D_IN =
	     qRefD_OR_pRef_wget_AND_NOT_pRefD_0_1_2_AND_NOT_ETC___d17 ;
  assign qRefD_EN = CAN_FIRE_RL_doUpdate ;

  // register qSigD
  assign qSigD_D_IN =
	     qSigD_4_OR_pSig_wget_AND_NOT_pSigD_8_9_0_1_AND_ETC___d22 ;
  assign qSigD_EN = CAN_FIRE_RL_doUpdate ;

  // remaining internal signals
  assign qRefD_OR_pRef_wget_AND_NOT_pRefD_0_1_2_AND_NOT_ETC___d17 =
	     (qRefD || oneSecond && !pRefD) && (!qRefD || !qSigD) ;
  assign qSigD_4_OR_pSig_wget_AND_NOT_pSigD_8_9_0_1_AND_ETC___d22 =
	     (qSigD || pps && !pSigD) && (!qRefD || !qSigD) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        direct <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (direct_EN) direct <= `BSV_ASSIGNMENT_DELAY direct_D_IN;
      end
    if (pRefD_EN) pRefD <= `BSV_ASSIGNMENT_DELAY pRefD_D_IN;
    if (pSigD_EN) pSigD <= `BSV_ASSIGNMENT_DELAY pSigD_D_IN;
    if (qRefD_EN) qRefD <= `BSV_ASSIGNMENT_DELAY qRefD_D_IN;
    if (qSigD_EN) qSigD <= `BSV_ASSIGNMENT_DELAY qSigD_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    direct = 2'h2;
    pRefD = 1'h0;
    pSigD = 1'h0;
    qRefD = 1'h0;
    qSigD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPhaseFrequencyDetector

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// tlm_tx_get                     O    53 reg
// RDY_tlm_tx_get                 O     1 reg
// RDY_tlm_rx_put                 O     1 reg
// awready                        O     1 reg
// wready                         O     1 reg
// bvalid                         O     1
// bresp                          O     2 reg
// arready                        O     1 reg
// rvalid                         O     1
// rdata                          O    32 reg
// rresp                          O     2 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tlm_rx_put                     I    36 reg
// awaddr                         I    12 reg
// awprot                         I     3 reg
// wdata                          I    32 reg
// wstrb                          I     4 reg
// araddr                         I    12 reg
// arprot                         I     3 reg
// EN_tlm_rx_put                  I     1
// awvalid                        I     1
// wvalid                         I     1
// bready                         I     1
// arvalid                        I     1
// rready                         I     1
// EN_tlm_tx_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkA4LSlave(CLK,
		  RST_N,

		  EN_tlm_tx_get,
		  tlm_tx_get,
		  RDY_tlm_tx_get,

		  tlm_rx_put,
		  EN_tlm_rx_put,
		  RDY_tlm_rx_put,

		  awvalid,

		  awready,

		  awaddr,

		  awprot,

		  wvalid,

		  wready,

		  wdata,

		  wstrb,

		  bvalid,

		  bready,

		  bresp,

		  arvalid,

		  arready,

		  araddr,

		  arprot,

		  rvalid,

		  rready,

		  rdata,

		  rresp);
  input  CLK;
  input  RST_N;

  // actionvalue method tlm_tx_get
  input  EN_tlm_tx_get;
  output [52 : 0] tlm_tx_get;
  output RDY_tlm_tx_get;

  // action method tlm_rx_put
  input  [35 : 0] tlm_rx_put;
  input  EN_tlm_rx_put;
  output RDY_tlm_rx_put;

  // action method fabric_mAWVALID
  input  awvalid;

  // value method fabric_sAWREADY
  output awready;

  // action method fabric_mAWADDR
  input  [11 : 0] awaddr;

  // action method fabric_mAWPROT
  input  [2 : 0] awprot;

  // action method fabric_mWVALID
  input  wvalid;

  // value method fabric_sWREADY
  output wready;

  // action method fabric_mWDATA
  input  [31 : 0] wdata;

  // action method fabric_mWSTRB
  input  [3 : 0] wstrb;

  // value method fabric_sBVALID
  output bvalid;

  // action method fabric_mBREADY
  input  bready;

  // value method fabric_sBRESP
  output [1 : 0] bresp;

  // action method fabric_mARVALID
  input  arvalid;

  // value method fabric_sARREADY
  output arready;

  // action method fabric_mARADDR
  input  [11 : 0] araddr;

  // action method fabric_mARPROT
  input  [2 : 0] arprot;

  // value method fabric_sRVALID
  output rvalid;

  // action method fabric_mRREADY
  input  rready;

  // value method fabric_sRDATA
  output [31 : 0] rdata;

  // value method fabric_sRRESP
  output [1 : 0] rresp;

  // signals for module outputs
  wire [52 : 0] tlm_tx_get;
  wire [31 : 0] rdata;
  wire [1 : 0] bresp, rresp;
  wire RDY_tlm_rx_put,
       RDY_tlm_tx_get,
       arready,
       awready,
       bvalid,
       rvalid,
       wready;

  // inlined wires
  wire [35 : 0] sw_wr_data_fifo_data_wire_wget;
  wire [14 : 0] sr_rd_addr_fifo_data_wire_wget,
		sw_wr_addr_fifo_data_wire_wget;

  // register sr_desc_prev
  reg [77 : 0] sr_desc_prev;
  wire [77 : 0] sr_desc_prev_D_IN;
  wire sr_desc_prev_EN;

  // register sr_just_one
  reg sr_just_one;
  wire sr_just_one_D_IN, sr_just_one_EN;

  // register sr_rd_resp_fifo_fifof_cntr_r
  reg [1 : 0] sr_rd_resp_fifo_fifof_cntr_r;
  wire [1 : 0] sr_rd_resp_fifo_fifof_cntr_r_D_IN;
  wire sr_rd_resp_fifo_fifof_cntr_r_EN;

  // register sr_rd_resp_fifo_fifof_q_0
  reg [33 : 0] sr_rd_resp_fifo_fifof_q_0;
  reg [33 : 0] sr_rd_resp_fifo_fifof_q_0_D_IN;
  wire sr_rd_resp_fifo_fifof_q_0_EN;

  // register sr_rd_resp_fifo_fifof_q_1
  reg [33 : 0] sr_rd_resp_fifo_fifof_q_1;
  reg [33 : 0] sr_rd_resp_fifo_fifof_q_1_D_IN;
  wire sr_rd_resp_fifo_fifof_q_1_EN;

  // register sw_wr_resp_fifo_fifof_cntr_r
  reg [1 : 0] sw_wr_resp_fifo_fifof_cntr_r;
  wire [1 : 0] sw_wr_resp_fifo_fifof_cntr_r_D_IN;
  wire sw_wr_resp_fifo_fifof_cntr_r_EN;

  // register sw_wr_resp_fifo_fifof_q_0
  reg [1 : 0] sw_wr_resp_fifo_fifof_q_0;
  reg [1 : 0] sw_wr_resp_fifo_fifof_q_0_D_IN;
  wire sw_wr_resp_fifo_fifof_q_0_EN;

  // register sw_wr_resp_fifo_fifof_q_1
  reg [1 : 0] sw_wr_resp_fifo_fifof_q_1;
  reg [1 : 0] sw_wr_resp_fifo_fifof_q_1_D_IN;
  wire sw_wr_resp_fifo_fifof_q_1_EN;

  // ports of submodule fifoRequest
  wire [52 : 0] fifoRequest_D_IN, fifoRequest_D_OUT;
  wire fifoRequest_CLR,
       fifoRequest_DEQ,
       fifoRequest_EMPTY_N,
       fifoRequest_ENQ,
       fifoRequest_FULL_N;

  // ports of submodule fifoResponse
  wire [35 : 0] fifoResponse_D_IN, fifoResponse_D_OUT;
  wire fifoResponse_CLR,
       fifoResponse_DEQ,
       fifoResponse_EMPTY_N,
       fifoResponse_ENQ,
       fifoResponse_FULL_N;

  // ports of submodule sr_fifo_rx
  wire [35 : 0] sr_fifo_rx_D_IN, sr_fifo_rx_D_OUT;
  wire sr_fifo_rx_CLR,
       sr_fifo_rx_DEQ,
       sr_fifo_rx_EMPTY_N,
       sr_fifo_rx_ENQ,
       sr_fifo_rx_FULL_N;

  // ports of submodule sr_fifo_tx
  wire [52 : 0] sr_fifo_tx_D_IN, sr_fifo_tx_D_OUT;
  wire sr_fifo_tx_CLR,
       sr_fifo_tx_DEQ,
       sr_fifo_tx_EMPTY_N,
       sr_fifo_tx_ENQ,
       sr_fifo_tx_FULL_N;

  // ports of submodule sr_rd_addr_fifo_fifof
  wire [14 : 0] sr_rd_addr_fifo_fifof_D_IN, sr_rd_addr_fifo_fifof_D_OUT;
  wire sr_rd_addr_fifo_fifof_CLR,
       sr_rd_addr_fifo_fifof_DEQ,
       sr_rd_addr_fifo_fifof_EMPTY_N,
       sr_rd_addr_fifo_fifof_ENQ,
       sr_rd_addr_fifo_fifof_FULL_N;

  // ports of submodule sw_fifo_rx
  wire [35 : 0] sw_fifo_rx_D_IN, sw_fifo_rx_D_OUT;
  wire sw_fifo_rx_CLR,
       sw_fifo_rx_DEQ,
       sw_fifo_rx_EMPTY_N,
       sw_fifo_rx_ENQ,
       sw_fifo_rx_FULL_N;

  // ports of submodule sw_fifo_tx
  wire [52 : 0] sw_fifo_tx_D_IN, sw_fifo_tx_D_OUT;
  wire sw_fifo_tx_CLR,
       sw_fifo_tx_DEQ,
       sw_fifo_tx_EMPTY_N,
       sw_fifo_tx_ENQ,
       sw_fifo_tx_FULL_N;

  // ports of submodule sw_wr_addr_fifo_fifof
  wire [14 : 0] sw_wr_addr_fifo_fifof_D_IN, sw_wr_addr_fifo_fifof_D_OUT;
  wire sw_wr_addr_fifo_fifof_CLR,
       sw_wr_addr_fifo_fifof_DEQ,
       sw_wr_addr_fifo_fifof_EMPTY_N,
       sw_wr_addr_fifo_fifof_ENQ,
       sw_wr_addr_fifo_fifof_FULL_N;

  // ports of submodule sw_wr_data_fifo_fifof
  wire [35 : 0] sw_wr_data_fifo_fifof_D_IN, sw_wr_data_fifo_fifof_D_OUT;
  wire sw_wr_data_fifo_fifof_CLR,
       sw_wr_data_fifo_fifof_DEQ,
       sw_wr_data_fifo_fifof_EMPTY_N,
       sw_wr_data_fifo_fifof_ENQ,
       sw_wr_data_fifo_fifof_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_grabRdResponse,
       CAN_FIRE_RL_grabWrResponse,
       CAN_FIRE_RL_sendRdRequest,
       CAN_FIRE_RL_sendWrRequest,
       CAN_FIRE_RL_sr_every,
       CAN_FIRE_RL_sr_grab_addr,
       CAN_FIRE_RL_sr_grab_tlm_response,
       CAN_FIRE_RL_sr_rd_addr_fifo_do_enq,
       CAN_FIRE_RL_sr_rd_resp_fifo_do_deq,
       CAN_FIRE_RL_sr_rd_resp_fifo_fifof_both,
       CAN_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr,
       CAN_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr,
       CAN_FIRE_RL_sw_every,
       CAN_FIRE_RL_sw_grab_addr,
       CAN_FIRE_RL_sw_grab_tlm_response,
       CAN_FIRE_RL_sw_wr_addr_fifo_do_enq,
       CAN_FIRE_RL_sw_wr_data_fifo_do_enq,
       CAN_FIRE_RL_sw_wr_resp_fifo_do_deq,
       CAN_FIRE_RL_sw_wr_resp_fifo_fifof_both,
       CAN_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr,
       CAN_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr,
       CAN_FIRE_fabric_mARADDR,
       CAN_FIRE_fabric_mARPROT,
       CAN_FIRE_fabric_mARVALID,
       CAN_FIRE_fabric_mAWADDR,
       CAN_FIRE_fabric_mAWPROT,
       CAN_FIRE_fabric_mAWVALID,
       CAN_FIRE_fabric_mBREADY,
       CAN_FIRE_fabric_mRREADY,
       CAN_FIRE_fabric_mWDATA,
       CAN_FIRE_fabric_mWSTRB,
       CAN_FIRE_fabric_mWVALID,
       CAN_FIRE_tlm_rx_put,
       CAN_FIRE_tlm_tx_get,
       WILL_FIRE_RL_grabRdResponse,
       WILL_FIRE_RL_grabWrResponse,
       WILL_FIRE_RL_sendRdRequest,
       WILL_FIRE_RL_sendWrRequest,
       WILL_FIRE_RL_sr_every,
       WILL_FIRE_RL_sr_grab_addr,
       WILL_FIRE_RL_sr_grab_tlm_response,
       WILL_FIRE_RL_sr_rd_addr_fifo_do_enq,
       WILL_FIRE_RL_sr_rd_resp_fifo_do_deq,
       WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both,
       WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr,
       WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr,
       WILL_FIRE_RL_sw_every,
       WILL_FIRE_RL_sw_grab_addr,
       WILL_FIRE_RL_sw_grab_tlm_response,
       WILL_FIRE_RL_sw_wr_addr_fifo_do_enq,
       WILL_FIRE_RL_sw_wr_data_fifo_do_enq,
       WILL_FIRE_RL_sw_wr_resp_fifo_do_deq,
       WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both,
       WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr,
       WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr,
       WILL_FIRE_fabric_mARADDR,
       WILL_FIRE_fabric_mARPROT,
       WILL_FIRE_fabric_mARVALID,
       WILL_FIRE_fabric_mAWADDR,
       WILL_FIRE_fabric_mAWPROT,
       WILL_FIRE_fabric_mAWVALID,
       WILL_FIRE_fabric_mBREADY,
       WILL_FIRE_fabric_mRREADY,
       WILL_FIRE_fabric_mWDATA,
       WILL_FIRE_fabric_mWSTRB,
       WILL_FIRE_fabric_mWVALID,
       WILL_FIRE_tlm_rx_put,
       WILL_FIRE_tlm_tx_get;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_1,
		MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2,
		MUX_sr_rd_resp_fifo_fifof_q_1_write_1__VAL_1;
  wire [1 : 0] MUX_sr_rd_resp_fifo_fifof_cntr_r_write_1__VAL_2,
	       MUX_sw_wr_resp_fifo_fifof_cntr_r_write_1__VAL_2,
	       MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_1,
	       MUX_sw_wr_resp_fifo_fifof_q_1_write_1__VAL_1;
  wire MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_1,
       MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_2,
       MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_1,
       MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_2,
       MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_1,
       MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_2,
       MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_1,
       MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_2;

  // remaining internal signals
  reg [1 : 0] CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1;
  wire [1 : 0] sr_rd_resp_fifo_fifof_cntr_r_1_MINUS_1___d89,
	       sw_wr_resp_fifo_fifof_cntr_r_9_MINUS_1___d27;
  wire _dfoo1, _dfoo3, _dfoo5, _dfoo7;

  // actionvalue method tlm_tx_get
  assign tlm_tx_get = fifoRequest_D_OUT ;
  assign RDY_tlm_tx_get = fifoRequest_EMPTY_N ;
  assign CAN_FIRE_tlm_tx_get = fifoRequest_EMPTY_N ;
  assign WILL_FIRE_tlm_tx_get = EN_tlm_tx_get ;

  // action method tlm_rx_put
  assign RDY_tlm_rx_put = fifoResponse_FULL_N ;
  assign CAN_FIRE_tlm_rx_put = fifoResponse_FULL_N ;
  assign WILL_FIRE_tlm_rx_put = EN_tlm_rx_put ;

  // action method fabric_mAWVALID
  assign CAN_FIRE_fabric_mAWVALID = 1'd1 ;
  assign WILL_FIRE_fabric_mAWVALID = awvalid ;

  // value method fabric_sAWREADY
  assign awready = sw_wr_addr_fifo_fifof_FULL_N ;

  // action method fabric_mAWADDR
  assign CAN_FIRE_fabric_mAWADDR = 1'd1 ;
  assign WILL_FIRE_fabric_mAWADDR = 1'd1 ;

  // action method fabric_mAWPROT
  assign CAN_FIRE_fabric_mAWPROT = 1'd1 ;
  assign WILL_FIRE_fabric_mAWPROT = 1'd1 ;

  // action method fabric_mWVALID
  assign CAN_FIRE_fabric_mWVALID = 1'd1 ;
  assign WILL_FIRE_fabric_mWVALID = wvalid ;

  // value method fabric_sWREADY
  assign wready = sw_wr_data_fifo_fifof_FULL_N ;

  // action method fabric_mWDATA
  assign CAN_FIRE_fabric_mWDATA = 1'd1 ;
  assign WILL_FIRE_fabric_mWDATA = 1'd1 ;

  // action method fabric_mWSTRB
  assign CAN_FIRE_fabric_mWSTRB = 1'd1 ;
  assign WILL_FIRE_fabric_mWSTRB = 1'd1 ;

  // value method fabric_sBVALID
  assign bvalid = sw_wr_resp_fifo_fifof_cntr_r != 2'd0 ;

  // action method fabric_mBREADY
  assign CAN_FIRE_fabric_mBREADY = 1'd1 ;
  assign WILL_FIRE_fabric_mBREADY = bready ;

  // value method fabric_sBRESP
  assign bresp = sw_wr_resp_fifo_fifof_q_0 ;

  // action method fabric_mARVALID
  assign CAN_FIRE_fabric_mARVALID = 1'd1 ;
  assign WILL_FIRE_fabric_mARVALID = arvalid ;

  // value method fabric_sARREADY
  assign arready = sr_rd_addr_fifo_fifof_FULL_N ;

  // action method fabric_mARADDR
  assign CAN_FIRE_fabric_mARADDR = 1'd1 ;
  assign WILL_FIRE_fabric_mARADDR = 1'd1 ;

  // action method fabric_mARPROT
  assign CAN_FIRE_fabric_mARPROT = 1'd1 ;
  assign WILL_FIRE_fabric_mARPROT = 1'd1 ;

  // value method fabric_sRVALID
  assign rvalid = sr_rd_resp_fifo_fifof_cntr_r != 2'd0 ;

  // action method fabric_mRREADY
  assign CAN_FIRE_fabric_mRREADY = 1'd1 ;
  assign WILL_FIRE_fabric_mRREADY = rready ;

  // value method fabric_sRDATA
  assign rdata = sr_rd_resp_fifo_fifof_q_0[33:2] ;

  // value method fabric_sRRESP
  assign rresp = sr_rd_resp_fifo_fifof_q_0[1:0] ;

  // submodule fifoRequest
  FIFO2 #(.width(32'd53), .guarded(32'd1)) fifoRequest(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fifoRequest_D_IN),
						       .ENQ(fifoRequest_ENQ),
						       .DEQ(fifoRequest_DEQ),
						       .CLR(fifoRequest_CLR),
						       .D_OUT(fifoRequest_D_OUT),
						       .FULL_N(fifoRequest_FULL_N),
						       .EMPTY_N(fifoRequest_EMPTY_N));

  // submodule fifoResponse
  FIFO2 #(.width(32'd36), .guarded(32'd1)) fifoResponse(.RST(RST_N),
							.CLK(CLK),
							.D_IN(fifoResponse_D_IN),
							.ENQ(fifoResponse_ENQ),
							.DEQ(fifoResponse_DEQ),
							.CLR(fifoResponse_CLR),
							.D_OUT(fifoResponse_D_OUT),
							.FULL_N(fifoResponse_FULL_N),
							.EMPTY_N(fifoResponse_EMPTY_N));

  // submodule sr_fifo_rx
  FIFOL1 #(.width(32'd36)) sr_fifo_rx(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(sr_fifo_rx_D_IN),
				      .ENQ(sr_fifo_rx_ENQ),
				      .DEQ(sr_fifo_rx_DEQ),
				      .CLR(sr_fifo_rx_CLR),
				      .D_OUT(sr_fifo_rx_D_OUT),
				      .FULL_N(sr_fifo_rx_FULL_N),
				      .EMPTY_N(sr_fifo_rx_EMPTY_N));

  // submodule sr_fifo_tx
  FIFOL1 #(.width(32'd53)) sr_fifo_tx(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(sr_fifo_tx_D_IN),
				      .ENQ(sr_fifo_tx_ENQ),
				      .DEQ(sr_fifo_tx_DEQ),
				      .CLR(sr_fifo_tx_CLR),
				      .D_OUT(sr_fifo_tx_D_OUT),
				      .FULL_N(sr_fifo_tx_FULL_N),
				      .EMPTY_N(sr_fifo_tx_EMPTY_N));

  // submodule sr_rd_addr_fifo_fifof
  FIFO2 #(.width(32'd15), .guarded(32'd1)) sr_rd_addr_fifo_fifof(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(sr_rd_addr_fifo_fifof_D_IN),
								 .ENQ(sr_rd_addr_fifo_fifof_ENQ),
								 .DEQ(sr_rd_addr_fifo_fifof_DEQ),
								 .CLR(sr_rd_addr_fifo_fifof_CLR),
								 .D_OUT(sr_rd_addr_fifo_fifof_D_OUT),
								 .FULL_N(sr_rd_addr_fifo_fifof_FULL_N),
								 .EMPTY_N(sr_rd_addr_fifo_fifof_EMPTY_N));

  // submodule sw_fifo_rx
  FIFOL1 #(.width(32'd36)) sw_fifo_rx(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(sw_fifo_rx_D_IN),
				      .ENQ(sw_fifo_rx_ENQ),
				      .DEQ(sw_fifo_rx_DEQ),
				      .CLR(sw_fifo_rx_CLR),
				      .D_OUT(sw_fifo_rx_D_OUT),
				      .FULL_N(sw_fifo_rx_FULL_N),
				      .EMPTY_N(sw_fifo_rx_EMPTY_N));

  // submodule sw_fifo_tx
  FIFOL1 #(.width(32'd53)) sw_fifo_tx(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(sw_fifo_tx_D_IN),
				      .ENQ(sw_fifo_tx_ENQ),
				      .DEQ(sw_fifo_tx_DEQ),
				      .CLR(sw_fifo_tx_CLR),
				      .D_OUT(sw_fifo_tx_D_OUT),
				      .FULL_N(sw_fifo_tx_FULL_N),
				      .EMPTY_N(sw_fifo_tx_EMPTY_N));

  // submodule sw_wr_addr_fifo_fifof
  FIFO2 #(.width(32'd15), .guarded(32'd1)) sw_wr_addr_fifo_fifof(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(sw_wr_addr_fifo_fifof_D_IN),
								 .ENQ(sw_wr_addr_fifo_fifof_ENQ),
								 .DEQ(sw_wr_addr_fifo_fifof_DEQ),
								 .CLR(sw_wr_addr_fifo_fifof_CLR),
								 .D_OUT(sw_wr_addr_fifo_fifof_D_OUT),
								 .FULL_N(sw_wr_addr_fifo_fifof_FULL_N),
								 .EMPTY_N(sw_wr_addr_fifo_fifof_EMPTY_N));

  // submodule sw_wr_data_fifo_fifof
  FIFO2 #(.width(32'd36), .guarded(32'd1)) sw_wr_data_fifo_fifof(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(sw_wr_data_fifo_fifof_D_IN),
								 .ENQ(sw_wr_data_fifo_fifof_ENQ),
								 .DEQ(sw_wr_data_fifo_fifof_DEQ),
								 .CLR(sw_wr_data_fifo_fifof_CLR),
								 .D_OUT(sw_wr_data_fifo_fifof_D_OUT),
								 .FULL_N(sw_wr_data_fifo_fifof_FULL_N),
								 .EMPTY_N(sw_wr_data_fifo_fifof_EMPTY_N));

  // rule RL_sendRdRequest
  assign CAN_FIRE_RL_sendRdRequest =
	     sr_fifo_tx_EMPTY_N && fifoRequest_FULL_N ;
  assign WILL_FIRE_RL_sendRdRequest = CAN_FIRE_RL_sendRdRequest ;

  // rule RL_sendWrRequest
  assign CAN_FIRE_RL_sendWrRequest =
	     fifoRequest_FULL_N && sw_fifo_tx_EMPTY_N ;
  assign WILL_FIRE_RL_sendWrRequest =
	     CAN_FIRE_RL_sendWrRequest && !WILL_FIRE_RL_sendRdRequest ;

  // rule RL_sw_every
  assign CAN_FIRE_RL_sw_every = 1'd1 ;
  assign WILL_FIRE_RL_sw_every = 1'd1 ;

  // rule RL_sw_grab_addr
  assign CAN_FIRE_RL_sw_grab_addr =
	     sw_wr_addr_fifo_fifof_EMPTY_N && sw_wr_data_fifo_fifof_EMPTY_N &&
	     sw_fifo_tx_FULL_N ;
  assign WILL_FIRE_RL_sw_grab_addr = CAN_FIRE_RL_sw_grab_addr ;

  // rule RL_sw_grab_tlm_response
  assign CAN_FIRE_RL_sw_grab_tlm_response =
	     sw_wr_resp_fifo_fifof_cntr_r != 2'd2 && sw_fifo_rx_EMPTY_N ;
  assign WILL_FIRE_RL_sw_grab_tlm_response =
	     CAN_FIRE_RL_sw_grab_tlm_response ;

  // rule RL_grabWrResponse
  assign CAN_FIRE_RL_grabWrResponse =
	     fifoResponse_EMPTY_N && sw_fifo_rx_FULL_N &&
	     fifoResponse_D_OUT[35:34] == 2'd1 ;
  assign WILL_FIRE_RL_grabWrResponse = CAN_FIRE_RL_grabWrResponse ;

  // rule RL_sw_wr_addr_fifo_do_enq
  assign CAN_FIRE_RL_sw_wr_addr_fifo_do_enq =
	     sw_wr_addr_fifo_fifof_FULL_N && awvalid ;
  assign WILL_FIRE_RL_sw_wr_addr_fifo_do_enq =
	     CAN_FIRE_RL_sw_wr_addr_fifo_do_enq ;

  // rule RL_sw_wr_data_fifo_do_enq
  assign CAN_FIRE_RL_sw_wr_data_fifo_do_enq =
	     sw_wr_data_fifo_fifof_FULL_N && wvalid ;
  assign WILL_FIRE_RL_sw_wr_data_fifo_do_enq =
	     CAN_FIRE_RL_sw_wr_data_fifo_do_enq ;

  // rule RL_sw_wr_resp_fifo_do_deq
  assign CAN_FIRE_RL_sw_wr_resp_fifo_do_deq =
	     sw_wr_resp_fifo_fifof_cntr_r != 2'd0 && bready ;
  assign WILL_FIRE_RL_sw_wr_resp_fifo_do_deq =
	     CAN_FIRE_RL_sw_wr_resp_fifo_do_deq ;

  // rule RL_sw_wr_resp_fifo_fifof_incCtr
  assign CAN_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_sw_grab_tlm_response &&
	     CAN_FIRE_RL_sw_grab_tlm_response &&
	     !CAN_FIRE_RL_sw_wr_resp_fifo_do_deq ;
  assign WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr ;

  // rule RL_sw_wr_resp_fifo_fifof_decCtr
  assign CAN_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_sw_wr_resp_fifo_do_deq &&
	     !CAN_FIRE_RL_sw_grab_tlm_response ;
  assign WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr ;

  // rule RL_sw_wr_resp_fifo_fifof_both
  assign CAN_FIRE_RL_sw_wr_resp_fifo_fifof_both =
	     CAN_FIRE_RL_sw_grab_tlm_response &&
	     CAN_FIRE_RL_sw_wr_resp_fifo_do_deq &&
	     CAN_FIRE_RL_sw_grab_tlm_response ;
  assign WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both =
	     CAN_FIRE_RL_sw_wr_resp_fifo_fifof_both ;

  // rule RL_sr_every
  assign CAN_FIRE_RL_sr_every = 1'd1 ;
  assign WILL_FIRE_RL_sr_every = 1'd1 ;

  // rule RL_sr_grab_addr
  assign CAN_FIRE_RL_sr_grab_addr =
	     sr_rd_addr_fifo_fifof_EMPTY_N && sr_fifo_tx_FULL_N ;
  assign WILL_FIRE_RL_sr_grab_addr = CAN_FIRE_RL_sr_grab_addr ;

  // rule RL_sr_grab_tlm_response
  assign CAN_FIRE_RL_sr_grab_tlm_response =
	     sr_rd_resp_fifo_fifof_cntr_r != 2'd2 && sr_fifo_rx_EMPTY_N ;
  assign WILL_FIRE_RL_sr_grab_tlm_response =
	     CAN_FIRE_RL_sr_grab_tlm_response ;

  // rule RL_grabRdResponse
  assign CAN_FIRE_RL_grabRdResponse =
	     fifoResponse_EMPTY_N && sr_fifo_rx_FULL_N &&
	     fifoResponse_D_OUT[35:34] == 2'd0 ;
  assign WILL_FIRE_RL_grabRdResponse = CAN_FIRE_RL_grabRdResponse ;

  // rule RL_sr_rd_addr_fifo_do_enq
  assign CAN_FIRE_RL_sr_rd_addr_fifo_do_enq =
	     sr_rd_addr_fifo_fifof_FULL_N && arvalid ;
  assign WILL_FIRE_RL_sr_rd_addr_fifo_do_enq =
	     CAN_FIRE_RL_sr_rd_addr_fifo_do_enq ;

  // rule RL_sr_rd_resp_fifo_do_deq
  assign CAN_FIRE_RL_sr_rd_resp_fifo_do_deq =
	     sr_rd_resp_fifo_fifof_cntr_r != 2'd0 && rready ;
  assign WILL_FIRE_RL_sr_rd_resp_fifo_do_deq =
	     CAN_FIRE_RL_sr_rd_resp_fifo_do_deq ;

  // rule RL_sr_rd_resp_fifo_fifof_incCtr
  assign CAN_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_sr_grab_tlm_response &&
	     CAN_FIRE_RL_sr_grab_tlm_response &&
	     !CAN_FIRE_RL_sr_rd_resp_fifo_do_deq ;
  assign WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr ;

  // rule RL_sr_rd_resp_fifo_fifof_decCtr
  assign CAN_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_sr_rd_resp_fifo_do_deq &&
	     !CAN_FIRE_RL_sr_grab_tlm_response ;
  assign WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr ;

  // rule RL_sr_rd_resp_fifo_fifof_both
  assign CAN_FIRE_RL_sr_rd_resp_fifo_fifof_both =
	     CAN_FIRE_RL_sr_grab_tlm_response &&
	     CAN_FIRE_RL_sr_rd_resp_fifo_do_deq &&
	     CAN_FIRE_RL_sr_grab_tlm_response ;
  assign WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both =
	     CAN_FIRE_RL_sr_rd_resp_fifo_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both && _dfoo7 ;
  assign MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr &&
	     sr_rd_resp_fifo_fifof_cntr_r == 2'd0 ;
  assign MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both && _dfoo5 ;
  assign MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr &&
	     sr_rd_resp_fifo_fifof_cntr_r == 2'd1 ;
  assign MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both && _dfoo3 ;
  assign MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr &&
	     sw_wr_resp_fifo_fifof_cntr_r == 2'd0 ;
  assign MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both && _dfoo1 ;
  assign MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr &&
	     sw_wr_resp_fifo_fifof_cntr_r == 2'd1 ;
  assign MUX_sr_rd_resp_fifo_fifof_cntr_r_write_1__VAL_2 =
	     sr_rd_resp_fifo_fifof_cntr_r + 2'd1 ;
  assign MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_1 =
	     (sr_rd_resp_fifo_fifof_cntr_r == 2'd1) ?
	       MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2 :
	       sr_rd_resp_fifo_fifof_q_1 ;
  assign MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2 =
	     { sr_fifo_rx_D_OUT[33:2],
	       CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1 } ;
  assign MUX_sr_rd_resp_fifo_fifof_q_1_write_1__VAL_1 =
	     (sr_rd_resp_fifo_fifof_cntr_r == 2'd2) ?
	       MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2 :
	       34'd0 ;
  assign MUX_sw_wr_resp_fifo_fifof_cntr_r_write_1__VAL_2 =
	     sw_wr_resp_fifo_fifof_cntr_r + 2'd1 ;
  assign MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_1 =
	     (sw_wr_resp_fifo_fifof_cntr_r == 2'd1) ?
	       MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 :
	       sw_wr_resp_fifo_fifof_q_1 ;
  always@(sw_fifo_rx_D_OUT)
  begin
    case (sw_fifo_rx_D_OUT[1:0])
      2'd0:
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 =
	      sw_fifo_rx_D_OUT[1:0];
      2'd1:
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 =
	      (sw_fifo_rx_D_OUT[4:2] == 3'd7) ? 2'd3 : 2'd2;
      2'd2: MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 = 2'd1;
      2'd3: MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 = 2'd2;
    endcase
  end
  assign MUX_sw_wr_resp_fifo_fifof_q_1_write_1__VAL_1 =
	     (sw_wr_resp_fifo_fifof_cntr_r == 2'd2) ?
	       MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 :
	       2'd0 ;

  // inlined wires
  assign sw_wr_addr_fifo_data_wire_wget = { awprot, awaddr } ;
  assign sw_wr_data_fifo_data_wire_wget = { wdata, wstrb } ;
  assign sr_rd_addr_fifo_data_wire_wget = { arprot, araddr } ;

  // register sr_desc_prev
  assign sr_desc_prev_D_IN = 78'h0 ;
  assign sr_desc_prev_EN = 1'b0 ;

  // register sr_just_one
  assign sr_just_one_D_IN = 1'b0 ;
  assign sr_just_one_EN = 1'b0 ;

  // register sr_rd_resp_fifo_fifof_cntr_r
  assign sr_rd_resp_fifo_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr ?
	       sr_rd_resp_fifo_fifof_cntr_r_1_MINUS_1___d89 :
	       MUX_sr_rd_resp_fifo_fifof_cntr_r_write_1__VAL_2 ;
  assign sr_rd_resp_fifo_fifof_cntr_r_EN =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr ||
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr ;

  // register sr_rd_resp_fifo_fifof_q_0
  always@(MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_1 or
	  MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_1 or
	  MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_2 or
	  MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr or
	  sr_rd_resp_fifo_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_1:
	  sr_rd_resp_fifo_fifof_q_0_D_IN =
	      MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_1;
      MUX_sr_rd_resp_fifo_fifof_q_0_write_1__SEL_2:
	  sr_rd_resp_fifo_fifof_q_0_D_IN =
	      MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr:
	  sr_rd_resp_fifo_fifof_q_0_D_IN = sr_rd_resp_fifo_fifof_q_1;
      default: sr_rd_resp_fifo_fifof_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign sr_rd_resp_fifo_fifof_q_0_EN =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both && _dfoo7 ||
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr &&
	     sr_rd_resp_fifo_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr ;

  // register sr_rd_resp_fifo_fifof_q_1
  always@(MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_1 or
	  MUX_sr_rd_resp_fifo_fifof_q_1_write_1__VAL_1 or
	  MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_2 or
	  MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_1:
	  sr_rd_resp_fifo_fifof_q_1_D_IN =
	      MUX_sr_rd_resp_fifo_fifof_q_1_write_1__VAL_1;
      MUX_sr_rd_resp_fifo_fifof_q_1_write_1__SEL_2:
	  sr_rd_resp_fifo_fifof_q_1_D_IN =
	      MUX_sr_rd_resp_fifo_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr:
	  sr_rd_resp_fifo_fifof_q_1_D_IN = 34'd0;
      default: sr_rd_resp_fifo_fifof_q_1_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign sr_rd_resp_fifo_fifof_q_1_EN =
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_both && _dfoo5 ||
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_incCtr &&
	     sr_rd_resp_fifo_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_sr_rd_resp_fifo_fifof_decCtr ;

  // register sw_wr_resp_fifo_fifof_cntr_r
  assign sw_wr_resp_fifo_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr ?
	       sw_wr_resp_fifo_fifof_cntr_r_9_MINUS_1___d27 :
	       MUX_sw_wr_resp_fifo_fifof_cntr_r_write_1__VAL_2 ;
  assign sw_wr_resp_fifo_fifof_cntr_r_EN =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr ||
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr ;

  // register sw_wr_resp_fifo_fifof_q_0
  always@(MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_1 or
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_1 or
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_2 or
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr or
	  sw_wr_resp_fifo_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_1:
	  sw_wr_resp_fifo_fifof_q_0_D_IN =
	      MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_1;
      MUX_sw_wr_resp_fifo_fifof_q_0_write_1__SEL_2:
	  sw_wr_resp_fifo_fifof_q_0_D_IN =
	      MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr:
	  sw_wr_resp_fifo_fifof_q_0_D_IN = sw_wr_resp_fifo_fifof_q_1;
      default: sw_wr_resp_fifo_fifof_q_0_D_IN =
		   2'bxx /* unspecified value */ ;
    endcase
  end
  assign sw_wr_resp_fifo_fifof_q_0_EN =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr &&
	     sw_wr_resp_fifo_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr ;

  // register sw_wr_resp_fifo_fifof_q_1
  always@(MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_1 or
	  MUX_sw_wr_resp_fifo_fifof_q_1_write_1__VAL_1 or
	  MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_2 or
	  MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_1:
	  sw_wr_resp_fifo_fifof_q_1_D_IN =
	      MUX_sw_wr_resp_fifo_fifof_q_1_write_1__VAL_1;
      MUX_sw_wr_resp_fifo_fifof_q_1_write_1__SEL_2:
	  sw_wr_resp_fifo_fifof_q_1_D_IN =
	      MUX_sw_wr_resp_fifo_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr:
	  sw_wr_resp_fifo_fifof_q_1_D_IN = 2'd0;
      default: sw_wr_resp_fifo_fifof_q_1_D_IN =
		   2'bxx /* unspecified value */ ;
    endcase
  end
  assign sw_wr_resp_fifo_fifof_q_1_EN =
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_incCtr &&
	     sw_wr_resp_fifo_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_sw_wr_resp_fifo_fifof_decCtr ;

  // submodule fifoRequest
  assign fifoRequest_D_IN =
	     WILL_FIRE_RL_sendRdRequest ?
	       sr_fifo_tx_D_OUT :
	       sw_fifo_tx_D_OUT ;
  assign fifoRequest_ENQ =
	     WILL_FIRE_RL_sendRdRequest || WILL_FIRE_RL_sendWrRequest ;
  assign fifoRequest_DEQ = EN_tlm_tx_get ;
  assign fifoRequest_CLR = 1'b0 ;

  // submodule fifoResponse
  assign fifoResponse_D_IN = tlm_rx_put ;
  assign fifoResponse_ENQ = EN_tlm_rx_put ;
  assign fifoResponse_DEQ =
	     WILL_FIRE_RL_grabWrResponse || WILL_FIRE_RL_grabRdResponse ;
  assign fifoResponse_CLR = 1'b0 ;

  // submodule sr_fifo_rx
  assign sr_fifo_rx_D_IN = fifoResponse_D_OUT ;
  assign sr_fifo_rx_ENQ = CAN_FIRE_RL_grabRdResponse ;
  assign sr_fifo_rx_DEQ = CAN_FIRE_RL_sr_grab_tlm_response ;
  assign sr_fifo_rx_CLR = 1'b0 ;

  // submodule sr_fifo_tx
  assign sr_fifo_tx_D_IN =
	     { 2'd0, sr_rd_addr_fifo_fifof_D_OUT[11:0], 39'd120 } ;
  assign sr_fifo_tx_ENQ = CAN_FIRE_RL_sr_grab_addr ;
  assign sr_fifo_tx_DEQ = CAN_FIRE_RL_sendRdRequest ;
  assign sr_fifo_tx_CLR = 1'b0 ;

  // submodule sr_rd_addr_fifo_fifof
  assign sr_rd_addr_fifo_fifof_D_IN = sr_rd_addr_fifo_data_wire_wget ;
  assign sr_rd_addr_fifo_fifof_ENQ = CAN_FIRE_RL_sr_rd_addr_fifo_do_enq ;
  assign sr_rd_addr_fifo_fifof_DEQ = CAN_FIRE_RL_sr_grab_addr ;
  assign sr_rd_addr_fifo_fifof_CLR = 1'b0 ;

  // submodule sw_fifo_rx
  assign sw_fifo_rx_D_IN = fifoResponse_D_OUT ;
  assign sw_fifo_rx_ENQ = CAN_FIRE_RL_grabWrResponse ;
  assign sw_fifo_rx_DEQ = CAN_FIRE_RL_sw_grab_tlm_response ;
  assign sw_fifo_rx_CLR = 1'b0 ;

  // submodule sw_fifo_tx
  assign sw_fifo_tx_D_IN =
	     { 2'd1,
	       sw_wr_addr_fifo_fifof_D_OUT[11:0],
	       sw_wr_data_fifo_fifof_D_OUT,
	       3'd0 } ;
  assign sw_fifo_tx_ENQ = CAN_FIRE_RL_sw_grab_addr ;
  assign sw_fifo_tx_DEQ = WILL_FIRE_RL_sendWrRequest ;
  assign sw_fifo_tx_CLR = 1'b0 ;

  // submodule sw_wr_addr_fifo_fifof
  assign sw_wr_addr_fifo_fifof_D_IN = sw_wr_addr_fifo_data_wire_wget ;
  assign sw_wr_addr_fifo_fifof_ENQ = CAN_FIRE_RL_sw_wr_addr_fifo_do_enq ;
  assign sw_wr_addr_fifo_fifof_DEQ = CAN_FIRE_RL_sw_grab_addr ;
  assign sw_wr_addr_fifo_fifof_CLR = 1'b0 ;

  // submodule sw_wr_data_fifo_fifof
  assign sw_wr_data_fifo_fifof_D_IN = sw_wr_data_fifo_data_wire_wget ;
  assign sw_wr_data_fifo_fifof_ENQ = CAN_FIRE_RL_sw_wr_data_fifo_do_enq ;
  assign sw_wr_data_fifo_fifof_DEQ = CAN_FIRE_RL_sw_grab_addr ;
  assign sw_wr_data_fifo_fifof_CLR = 1'b0 ;

  // remaining internal signals
  assign _dfoo1 =
	     sw_wr_resp_fifo_fifof_cntr_r != 2'd2 ||
	     sw_wr_resp_fifo_fifof_cntr_r_9_MINUS_1___d27 == 2'd1 ;
  assign _dfoo3 =
	     sw_wr_resp_fifo_fifof_cntr_r != 2'd1 ||
	     sw_wr_resp_fifo_fifof_cntr_r_9_MINUS_1___d27 == 2'd0 ;
  assign _dfoo5 =
	     sr_rd_resp_fifo_fifof_cntr_r != 2'd2 ||
	     sr_rd_resp_fifo_fifof_cntr_r_1_MINUS_1___d89 == 2'd1 ;
  assign _dfoo7 =
	     sr_rd_resp_fifo_fifof_cntr_r != 2'd1 ||
	     sr_rd_resp_fifo_fifof_cntr_r_1_MINUS_1___d89 == 2'd0 ;
  assign sr_rd_resp_fifo_fifof_cntr_r_1_MINUS_1___d89 =
	     sr_rd_resp_fifo_fifof_cntr_r - 2'd1 ;
  assign sw_wr_resp_fifo_fifof_cntr_r_9_MINUS_1___d27 =
	     sw_wr_resp_fifo_fifof_cntr_r - 2'd1 ;
  always@(sr_fifo_rx_D_OUT)
  begin
    case (sr_fifo_rx_D_OUT[1:0])
      2'd0:
	  CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1 =
	      sr_fifo_rx_D_OUT[1:0];
      2'd1:
	  CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1 =
	      (sr_fifo_rx_D_OUT[4:2] == 3'd7) ? 2'd3 : 2'd2;
      2'd2: CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1 = 2'd1;
      2'd3: CASE_sr_fifo_rxD_OUT_BITS_1_TO_0_0_sr_fifo_rx_ETC__q1 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        sr_desc_prev <= `BSV_ASSIGNMENT_DELAY
	    78'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	sr_just_one <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sr_rd_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sr_rd_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	sr_rd_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	sw_wr_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sw_wr_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sw_wr_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (sr_desc_prev_EN)
	  sr_desc_prev <= `BSV_ASSIGNMENT_DELAY sr_desc_prev_D_IN;
	if (sr_just_one_EN)
	  sr_just_one <= `BSV_ASSIGNMENT_DELAY sr_just_one_D_IN;
	if (sr_rd_resp_fifo_fifof_cntr_r_EN)
	  sr_rd_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      sr_rd_resp_fifo_fifof_cntr_r_D_IN;
	if (sr_rd_resp_fifo_fifof_q_0_EN)
	  sr_rd_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      sr_rd_resp_fifo_fifof_q_0_D_IN;
	if (sr_rd_resp_fifo_fifof_q_1_EN)
	  sr_rd_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      sr_rd_resp_fifo_fifof_q_1_D_IN;
	if (sw_wr_resp_fifo_fifof_cntr_r_EN)
	  sw_wr_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      sw_wr_resp_fifo_fifof_cntr_r_D_IN;
	if (sw_wr_resp_fifo_fifof_q_0_EN)
	  sw_wr_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      sw_wr_resp_fifo_fifof_q_0_D_IN;
	if (sw_wr_resp_fifo_fifof_q_1_EN)
	  sw_wr_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      sw_wr_resp_fifo_fifof_q_1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    sr_desc_prev = 78'h2AAAAAAAAAAAAAAAAAAA;
    sr_just_one = 1'h0;
    sr_rd_resp_fifo_fifof_cntr_r = 2'h2;
    sr_rd_resp_fifo_fifof_q_0 = 34'h2AAAAAAAA;
    sr_rd_resp_fifo_fifof_q_1 = 34'h2AAAAAAAA;
    sw_wr_resp_fifo_fifof_cntr_r = 2'h2;
    sw_wr_resp_fifo_fifof_q_0 = 2'h2;
    sw_wr_resp_fifo_fifof_q_1 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkA4LSlave

