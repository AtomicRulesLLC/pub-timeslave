// Copyright (c) 2020 Atomic Rules LLC - All Rights Reserved
// This file contains "Licensed Materials" as defined in the Software License
// Agreement (SLA). It is provided strictly under the terms of the SLA.



//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// mac_s_axis_tready              O     1 reg
// usr_m_axis_tvalid              O     1
// usr_m_axis_tdata               O    64 reg
// usr_m_axis_tuser               O    80 reg
// usr_m_axis_tkeep               O     8 reg
// usr_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// mac_s_axis_tdata               I    64
// mac_s_axis_tuser               I    80 reg
// mac_s_axis_tkeep               I     8 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// mac_s_axis_tvalid              I     1
// mac_s_axis_tlast               I     1 reg
// usr_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkIngressCapture_8(s_axi_aclk,
			  s_axi_aresetn,

			  mac_s_axis_tvalid,

			  mac_s_axis_tready,

			  mac_s_axis_tdata,

			  mac_s_axis_tuser,

			  mac_s_axis_tkeep,

			  mac_s_axis_tlast,

			  usr_m_axis_tvalid,

			  usr_m_axis_tready,

			  usr_m_axis_tdata,

			  usr_m_axis_tuser,

			  usr_m_axis_tkeep,

			  usr_m_axis_tlast,

			  s_axi_awvalid,

			  s_axi_awready,

			  s_axi_awaddr,

			  s_axi_awprot,

			  s_axi_wvalid,

			  s_axi_wready,

			  s_axi_wdata,

			  s_axi_wstrb,

			  s_axi_bvalid,

			  s_axi_bready,

			  s_axi_bresp,

			  s_axi_arvalid,

			  s_axi_arready,

			  s_axi_araddr,

			  s_axi_arprot,

			  s_axi_rvalid,

			  s_axi_rready,

			  s_axi_rdata,

			  s_axi_rresp);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method mac_s_axis_mTVALID
  input  mac_s_axis_tvalid;

  // value method mac_s_axis_sTREADY
  output mac_s_axis_tready;

  // action method mac_s_axis_mTDATA
  input  [63 : 0] mac_s_axis_tdata;

  // action method mac_s_axis_mTSTRB

  // action method mac_s_axis_mTUSER
  input  [79 : 0] mac_s_axis_tuser;

  // action method mac_s_axis_mTKEEP
  input  [7 : 0] mac_s_axis_tkeep;

  // action method mac_s_axis_mTLAST
  input  mac_s_axis_tlast;

  // value method usr_m_axis_mTVALID
  output usr_m_axis_tvalid;

  // action method usr_m_axis_sTREADY
  input  usr_m_axis_tready;

  // value method usr_m_axis_mTDATA
  output [63 : 0] usr_m_axis_tdata;

  // value method usr_m_axis_mTSTRB

  // value method usr_m_axis_mTUSER
  output [79 : 0] usr_m_axis_tuser;

  // value method usr_m_axis_mTKEEP
  output [7 : 0] usr_m_axis_tkeep;

  // value method usr_m_axis_mTLAST
  output usr_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [79 : 0] usr_m_axis_tuser;
  wire [63 : 0] usr_m_axis_tdata;
  wire [31 : 0] s_axi_rdata;
  wire [7 : 0] usr_m_axis_tkeep;
  wire [1 : 0] s_axi_bresp, s_axi_rresp;
  wire mac_s_axis_tready,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       usr_m_axis_tlast,
       usr_m_axis_tvalid;

  // inlined wires
  wire ackPkt_pw_whas,
       capPkt_pw_whas,
       pktCnt_r_incr_r_1_whas,
       pktDrop_r_incr_r_1_whas,
       pktError_r_incr_r_1_whas,
       ptpCnt_r_incr_r_1_whas,
       s1_valid_port1__read,
       s1_valid_port2__read,
       s2_valid_port1__read,
       s2_valid_port2__read,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beatCnt_r
  reg [4 : 0] beatCnt_r;
  wire [4 : 0] beatCnt_r_D_IN;
  wire beatCnt_r_EN;

  // register capture_r
  reg capture_r;
  wire capture_r_D_IN, capture_r_EN;

  // register empty_r
  reg empty_r;
  wire empty_r_D_IN, empty_r_EN;

  // register enable_r
  reg enable_r;
  wire enable_r_D_IN, enable_r_EN;

  // register full_r
  reg full_r;
  wire full_r_D_IN, full_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktDrop_r
  reg [31 : 0] pktDrop_r;
  wire [31 : 0] pktDrop_r_D_IN;
  wire pktDrop_r_EN;

  // register pktDrop_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktDrop_r_clear_r;
  wire pktDrop_r_clear_r_D_IN, pktDrop_r_clear_r_EN;

  // register pktDrop_r_incr_r
  reg pktDrop_r_incr_r;
  wire pktDrop_r_incr_r_D_IN, pktDrop_r_incr_r_EN;

  // register pktError_r
  reg [31 : 0] pktError_r;
  wire [31 : 0] pktError_r_D_IN;
  wire pktError_r_EN;

  // register pktError_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktError_r_clear_r;
  wire pktError_r_clear_r_D_IN, pktError_r_clear_r_EN;

  // register pktError_r_incr_r
  reg pktError_r_incr_r;
  wire pktError_r_incr_r_D_IN, pktError_r_incr_r_EN;

  // register pktStore_0
  reg [63 : 0] pktStore_0;
  wire [63 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [63 : 0] pktStore_1;
  wire [63 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [63 : 0] pktStore_10;
  wire [63 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_100
  reg [63 : 0] pktStore_100;
  wire [63 : 0] pktStore_100_D_IN;
  wire pktStore_100_EN;

  // register pktStore_101
  reg [63 : 0] pktStore_101;
  wire [63 : 0] pktStore_101_D_IN;
  wire pktStore_101_EN;

  // register pktStore_102
  reg [63 : 0] pktStore_102;
  wire [63 : 0] pktStore_102_D_IN;
  wire pktStore_102_EN;

  // register pktStore_103
  reg [63 : 0] pktStore_103;
  wire [63 : 0] pktStore_103_D_IN;
  wire pktStore_103_EN;

  // register pktStore_104
  reg [63 : 0] pktStore_104;
  wire [63 : 0] pktStore_104_D_IN;
  wire pktStore_104_EN;

  // register pktStore_105
  reg [63 : 0] pktStore_105;
  wire [63 : 0] pktStore_105_D_IN;
  wire pktStore_105_EN;

  // register pktStore_106
  reg [63 : 0] pktStore_106;
  wire [63 : 0] pktStore_106_D_IN;
  wire pktStore_106_EN;

  // register pktStore_107
  reg [63 : 0] pktStore_107;
  wire [63 : 0] pktStore_107_D_IN;
  wire pktStore_107_EN;

  // register pktStore_108
  reg [63 : 0] pktStore_108;
  wire [63 : 0] pktStore_108_D_IN;
  wire pktStore_108_EN;

  // register pktStore_109
  reg [63 : 0] pktStore_109;
  wire [63 : 0] pktStore_109_D_IN;
  wire pktStore_109_EN;

  // register pktStore_11
  reg [63 : 0] pktStore_11;
  wire [63 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_110
  reg [63 : 0] pktStore_110;
  wire [63 : 0] pktStore_110_D_IN;
  wire pktStore_110_EN;

  // register pktStore_111
  reg [63 : 0] pktStore_111;
  wire [63 : 0] pktStore_111_D_IN;
  wire pktStore_111_EN;

  // register pktStore_112
  reg [63 : 0] pktStore_112;
  wire [63 : 0] pktStore_112_D_IN;
  wire pktStore_112_EN;

  // register pktStore_113
  reg [63 : 0] pktStore_113;
  wire [63 : 0] pktStore_113_D_IN;
  wire pktStore_113_EN;

  // register pktStore_114
  reg [63 : 0] pktStore_114;
  wire [63 : 0] pktStore_114_D_IN;
  wire pktStore_114_EN;

  // register pktStore_115
  reg [63 : 0] pktStore_115;
  wire [63 : 0] pktStore_115_D_IN;
  wire pktStore_115_EN;

  // register pktStore_116
  reg [63 : 0] pktStore_116;
  wire [63 : 0] pktStore_116_D_IN;
  wire pktStore_116_EN;

  // register pktStore_117
  reg [63 : 0] pktStore_117;
  wire [63 : 0] pktStore_117_D_IN;
  wire pktStore_117_EN;

  // register pktStore_118
  reg [63 : 0] pktStore_118;
  wire [63 : 0] pktStore_118_D_IN;
  wire pktStore_118_EN;

  // register pktStore_119
  reg [63 : 0] pktStore_119;
  wire [63 : 0] pktStore_119_D_IN;
  wire pktStore_119_EN;

  // register pktStore_12
  reg [63 : 0] pktStore_12;
  wire [63 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_120
  reg [63 : 0] pktStore_120;
  wire [63 : 0] pktStore_120_D_IN;
  wire pktStore_120_EN;

  // register pktStore_121
  reg [63 : 0] pktStore_121;
  wire [63 : 0] pktStore_121_D_IN;
  wire pktStore_121_EN;

  // register pktStore_122
  reg [63 : 0] pktStore_122;
  wire [63 : 0] pktStore_122_D_IN;
  wire pktStore_122_EN;

  // register pktStore_123
  reg [63 : 0] pktStore_123;
  wire [63 : 0] pktStore_123_D_IN;
  wire pktStore_123_EN;

  // register pktStore_124
  reg [63 : 0] pktStore_124;
  wire [63 : 0] pktStore_124_D_IN;
  wire pktStore_124_EN;

  // register pktStore_125
  reg [63 : 0] pktStore_125;
  wire [63 : 0] pktStore_125_D_IN;
  wire pktStore_125_EN;

  // register pktStore_126
  reg [63 : 0] pktStore_126;
  wire [63 : 0] pktStore_126_D_IN;
  wire pktStore_126_EN;

  // register pktStore_127
  reg [63 : 0] pktStore_127;
  wire [63 : 0] pktStore_127_D_IN;
  wire pktStore_127_EN;

  // register pktStore_13
  reg [63 : 0] pktStore_13;
  wire [63 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [63 : 0] pktStore_14;
  wire [63 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [63 : 0] pktStore_15;
  wire [63 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [63 : 0] pktStore_16;
  wire [63 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [63 : 0] pktStore_17;
  wire [63 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [63 : 0] pktStore_18;
  wire [63 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [63 : 0] pktStore_19;
  wire [63 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [63 : 0] pktStore_2;
  wire [63 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [63 : 0] pktStore_20;
  wire [63 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [63 : 0] pktStore_21;
  wire [63 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [63 : 0] pktStore_22;
  wire [63 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [63 : 0] pktStore_23;
  wire [63 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [63 : 0] pktStore_24;
  wire [63 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [63 : 0] pktStore_25;
  wire [63 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [63 : 0] pktStore_26;
  wire [63 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [63 : 0] pktStore_27;
  wire [63 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [63 : 0] pktStore_28;
  wire [63 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [63 : 0] pktStore_29;
  wire [63 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [63 : 0] pktStore_3;
  wire [63 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [63 : 0] pktStore_30;
  wire [63 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [63 : 0] pktStore_31;
  wire [63 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_32
  reg [63 : 0] pktStore_32;
  wire [63 : 0] pktStore_32_D_IN;
  wire pktStore_32_EN;

  // register pktStore_33
  reg [63 : 0] pktStore_33;
  wire [63 : 0] pktStore_33_D_IN;
  wire pktStore_33_EN;

  // register pktStore_34
  reg [63 : 0] pktStore_34;
  wire [63 : 0] pktStore_34_D_IN;
  wire pktStore_34_EN;

  // register pktStore_35
  reg [63 : 0] pktStore_35;
  wire [63 : 0] pktStore_35_D_IN;
  wire pktStore_35_EN;

  // register pktStore_36
  reg [63 : 0] pktStore_36;
  wire [63 : 0] pktStore_36_D_IN;
  wire pktStore_36_EN;

  // register pktStore_37
  reg [63 : 0] pktStore_37;
  wire [63 : 0] pktStore_37_D_IN;
  wire pktStore_37_EN;

  // register pktStore_38
  reg [63 : 0] pktStore_38;
  wire [63 : 0] pktStore_38_D_IN;
  wire pktStore_38_EN;

  // register pktStore_39
  reg [63 : 0] pktStore_39;
  wire [63 : 0] pktStore_39_D_IN;
  wire pktStore_39_EN;

  // register pktStore_4
  reg [63 : 0] pktStore_4;
  wire [63 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_40
  reg [63 : 0] pktStore_40;
  wire [63 : 0] pktStore_40_D_IN;
  wire pktStore_40_EN;

  // register pktStore_41
  reg [63 : 0] pktStore_41;
  wire [63 : 0] pktStore_41_D_IN;
  wire pktStore_41_EN;

  // register pktStore_42
  reg [63 : 0] pktStore_42;
  wire [63 : 0] pktStore_42_D_IN;
  wire pktStore_42_EN;

  // register pktStore_43
  reg [63 : 0] pktStore_43;
  wire [63 : 0] pktStore_43_D_IN;
  wire pktStore_43_EN;

  // register pktStore_44
  reg [63 : 0] pktStore_44;
  wire [63 : 0] pktStore_44_D_IN;
  wire pktStore_44_EN;

  // register pktStore_45
  reg [63 : 0] pktStore_45;
  wire [63 : 0] pktStore_45_D_IN;
  wire pktStore_45_EN;

  // register pktStore_46
  reg [63 : 0] pktStore_46;
  wire [63 : 0] pktStore_46_D_IN;
  wire pktStore_46_EN;

  // register pktStore_47
  reg [63 : 0] pktStore_47;
  wire [63 : 0] pktStore_47_D_IN;
  wire pktStore_47_EN;

  // register pktStore_48
  reg [63 : 0] pktStore_48;
  wire [63 : 0] pktStore_48_D_IN;
  wire pktStore_48_EN;

  // register pktStore_49
  reg [63 : 0] pktStore_49;
  wire [63 : 0] pktStore_49_D_IN;
  wire pktStore_49_EN;

  // register pktStore_5
  reg [63 : 0] pktStore_5;
  wire [63 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_50
  reg [63 : 0] pktStore_50;
  wire [63 : 0] pktStore_50_D_IN;
  wire pktStore_50_EN;

  // register pktStore_51
  reg [63 : 0] pktStore_51;
  wire [63 : 0] pktStore_51_D_IN;
  wire pktStore_51_EN;

  // register pktStore_52
  reg [63 : 0] pktStore_52;
  wire [63 : 0] pktStore_52_D_IN;
  wire pktStore_52_EN;

  // register pktStore_53
  reg [63 : 0] pktStore_53;
  wire [63 : 0] pktStore_53_D_IN;
  wire pktStore_53_EN;

  // register pktStore_54
  reg [63 : 0] pktStore_54;
  wire [63 : 0] pktStore_54_D_IN;
  wire pktStore_54_EN;

  // register pktStore_55
  reg [63 : 0] pktStore_55;
  wire [63 : 0] pktStore_55_D_IN;
  wire pktStore_55_EN;

  // register pktStore_56
  reg [63 : 0] pktStore_56;
  wire [63 : 0] pktStore_56_D_IN;
  wire pktStore_56_EN;

  // register pktStore_57
  reg [63 : 0] pktStore_57;
  wire [63 : 0] pktStore_57_D_IN;
  wire pktStore_57_EN;

  // register pktStore_58
  reg [63 : 0] pktStore_58;
  wire [63 : 0] pktStore_58_D_IN;
  wire pktStore_58_EN;

  // register pktStore_59
  reg [63 : 0] pktStore_59;
  wire [63 : 0] pktStore_59_D_IN;
  wire pktStore_59_EN;

  // register pktStore_6
  reg [63 : 0] pktStore_6;
  wire [63 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_60
  reg [63 : 0] pktStore_60;
  wire [63 : 0] pktStore_60_D_IN;
  wire pktStore_60_EN;

  // register pktStore_61
  reg [63 : 0] pktStore_61;
  wire [63 : 0] pktStore_61_D_IN;
  wire pktStore_61_EN;

  // register pktStore_62
  reg [63 : 0] pktStore_62;
  wire [63 : 0] pktStore_62_D_IN;
  wire pktStore_62_EN;

  // register pktStore_63
  reg [63 : 0] pktStore_63;
  wire [63 : 0] pktStore_63_D_IN;
  wire pktStore_63_EN;

  // register pktStore_64
  reg [63 : 0] pktStore_64;
  wire [63 : 0] pktStore_64_D_IN;
  wire pktStore_64_EN;

  // register pktStore_65
  reg [63 : 0] pktStore_65;
  wire [63 : 0] pktStore_65_D_IN;
  wire pktStore_65_EN;

  // register pktStore_66
  reg [63 : 0] pktStore_66;
  wire [63 : 0] pktStore_66_D_IN;
  wire pktStore_66_EN;

  // register pktStore_67
  reg [63 : 0] pktStore_67;
  wire [63 : 0] pktStore_67_D_IN;
  wire pktStore_67_EN;

  // register pktStore_68
  reg [63 : 0] pktStore_68;
  wire [63 : 0] pktStore_68_D_IN;
  wire pktStore_68_EN;

  // register pktStore_69
  reg [63 : 0] pktStore_69;
  wire [63 : 0] pktStore_69_D_IN;
  wire pktStore_69_EN;

  // register pktStore_7
  reg [63 : 0] pktStore_7;
  wire [63 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_70
  reg [63 : 0] pktStore_70;
  wire [63 : 0] pktStore_70_D_IN;
  wire pktStore_70_EN;

  // register pktStore_71
  reg [63 : 0] pktStore_71;
  wire [63 : 0] pktStore_71_D_IN;
  wire pktStore_71_EN;

  // register pktStore_72
  reg [63 : 0] pktStore_72;
  wire [63 : 0] pktStore_72_D_IN;
  wire pktStore_72_EN;

  // register pktStore_73
  reg [63 : 0] pktStore_73;
  wire [63 : 0] pktStore_73_D_IN;
  wire pktStore_73_EN;

  // register pktStore_74
  reg [63 : 0] pktStore_74;
  wire [63 : 0] pktStore_74_D_IN;
  wire pktStore_74_EN;

  // register pktStore_75
  reg [63 : 0] pktStore_75;
  wire [63 : 0] pktStore_75_D_IN;
  wire pktStore_75_EN;

  // register pktStore_76
  reg [63 : 0] pktStore_76;
  wire [63 : 0] pktStore_76_D_IN;
  wire pktStore_76_EN;

  // register pktStore_77
  reg [63 : 0] pktStore_77;
  wire [63 : 0] pktStore_77_D_IN;
  wire pktStore_77_EN;

  // register pktStore_78
  reg [63 : 0] pktStore_78;
  wire [63 : 0] pktStore_78_D_IN;
  wire pktStore_78_EN;

  // register pktStore_79
  reg [63 : 0] pktStore_79;
  wire [63 : 0] pktStore_79_D_IN;
  wire pktStore_79_EN;

  // register pktStore_8
  reg [63 : 0] pktStore_8;
  wire [63 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_80
  reg [63 : 0] pktStore_80;
  wire [63 : 0] pktStore_80_D_IN;
  wire pktStore_80_EN;

  // register pktStore_81
  reg [63 : 0] pktStore_81;
  wire [63 : 0] pktStore_81_D_IN;
  wire pktStore_81_EN;

  // register pktStore_82
  reg [63 : 0] pktStore_82;
  wire [63 : 0] pktStore_82_D_IN;
  wire pktStore_82_EN;

  // register pktStore_83
  reg [63 : 0] pktStore_83;
  wire [63 : 0] pktStore_83_D_IN;
  wire pktStore_83_EN;

  // register pktStore_84
  reg [63 : 0] pktStore_84;
  wire [63 : 0] pktStore_84_D_IN;
  wire pktStore_84_EN;

  // register pktStore_85
  reg [63 : 0] pktStore_85;
  wire [63 : 0] pktStore_85_D_IN;
  wire pktStore_85_EN;

  // register pktStore_86
  reg [63 : 0] pktStore_86;
  wire [63 : 0] pktStore_86_D_IN;
  wire pktStore_86_EN;

  // register pktStore_87
  reg [63 : 0] pktStore_87;
  wire [63 : 0] pktStore_87_D_IN;
  wire pktStore_87_EN;

  // register pktStore_88
  reg [63 : 0] pktStore_88;
  wire [63 : 0] pktStore_88_D_IN;
  wire pktStore_88_EN;

  // register pktStore_89
  reg [63 : 0] pktStore_89;
  wire [63 : 0] pktStore_89_D_IN;
  wire pktStore_89_EN;

  // register pktStore_9
  reg [63 : 0] pktStore_9;
  wire [63 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register pktStore_90
  reg [63 : 0] pktStore_90;
  wire [63 : 0] pktStore_90_D_IN;
  wire pktStore_90_EN;

  // register pktStore_91
  reg [63 : 0] pktStore_91;
  wire [63 : 0] pktStore_91_D_IN;
  wire pktStore_91_EN;

  // register pktStore_92
  reg [63 : 0] pktStore_92;
  wire [63 : 0] pktStore_92_D_IN;
  wire pktStore_92_EN;

  // register pktStore_93
  reg [63 : 0] pktStore_93;
  wire [63 : 0] pktStore_93_D_IN;
  wire pktStore_93_EN;

  // register pktStore_94
  reg [63 : 0] pktStore_94;
  wire [63 : 0] pktStore_94_D_IN;
  wire pktStore_94_EN;

  // register pktStore_95
  reg [63 : 0] pktStore_95;
  wire [63 : 0] pktStore_95_D_IN;
  wire pktStore_95_EN;

  // register pktStore_96
  reg [63 : 0] pktStore_96;
  wire [63 : 0] pktStore_96_D_IN;
  wire pktStore_96_EN;

  // register pktStore_97
  reg [63 : 0] pktStore_97;
  wire [63 : 0] pktStore_97_D_IN;
  wire pktStore_97_EN;

  // register pktStore_98
  reg [63 : 0] pktStore_98;
  wire [63 : 0] pktStore_98_D_IN;
  wire pktStore_98_EN;

  // register pktStore_99
  reg [63 : 0] pktStore_99;
  wire [63 : 0] pktStore_99_D_IN;
  wire pktStore_99_EN;

  // register ptpCnt_r
  reg [31 : 0] ptpCnt_r;
  wire [31 : 0] ptpCnt_r_D_IN;
  wire ptpCnt_r_EN;

  // register ptpCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg ptpCnt_r_clear_r;
  wire ptpCnt_r_clear_r_D_IN, ptpCnt_r_clear_r_EN;

  // register ptpCnt_r_incr_r
  reg ptpCnt_r_incr_r;
  wire ptpCnt_r_incr_r_D_IN, ptpCnt_r_incr_r_EN;

  // register rdPtr_r
  reg [3 : 0] rdPtr_r;
  wire [3 : 0] rdPtr_r_D_IN;
  wire rdPtr_r_EN;

  // register s1_r
  reg [152 : 0] s1_r;
  wire [152 : 0] s1_r_D_IN;
  wire s1_r_EN;

  // register s1_sop_r
  reg s1_sop_r;
  wire s1_sop_r_D_IN, s1_sop_r_EN;

  // register s1_valid
  reg s1_valid;
  wire s1_valid_D_IN, s1_valid_EN;

  // register s2_r
  reg [152 : 0] s2_r;
  wire [152 : 0] s2_r_D_IN;
  wire s2_r_EN;

  // register s2_sop_r
  reg s2_sop_r;
  wire s2_sop_r_D_IN, s2_sop_r_EN;

  // register s2_valid
  reg s2_valid;
  wire s2_valid_D_IN, s2_valid_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register sin_sop_r
  reg sin_sop_r;
  wire sin_sop_r_D_IN, sin_sop_r_EN;

  // register timeStamps_0
  reg [79 : 0] timeStamps_0;
  wire [79 : 0] timeStamps_0_D_IN;
  wire timeStamps_0_EN;

  // register timeStamps_1
  reg [79 : 0] timeStamps_1;
  wire [79 : 0] timeStamps_1_D_IN;
  wire timeStamps_1_EN;

  // register timeStamps_2
  reg [79 : 0] timeStamps_2;
  wire [79 : 0] timeStamps_2_D_IN;
  wire timeStamps_2_EN;

  // register timeStamps_3
  reg [79 : 0] timeStamps_3;
  wire [79 : 0] timeStamps_3_D_IN;
  wire timeStamps_3_EN;

  // register timeStamps_4
  reg [79 : 0] timeStamps_4;
  wire [79 : 0] timeStamps_4_D_IN;
  wire timeStamps_4_EN;

  // register timeStamps_5
  reg [79 : 0] timeStamps_5;
  wire [79 : 0] timeStamps_5_D_IN;
  wire timeStamps_5_EN;

  // register timeStamps_6
  reg [79 : 0] timeStamps_6;
  wire [79 : 0] timeStamps_6_D_IN;
  wire timeStamps_6_EN;

  // register timeStamps_7
  reg [79 : 0] timeStamps_7;
  wire [79 : 0] timeStamps_7_D_IN;
  wire timeStamps_7_EN;

  // register wrPtr_r
  reg [3 : 0] wrPtr_r;
  wire [3 : 0] wrPtr_r_D_IN;
  wire wrPtr_r_EN;

  // ports of submodule s0Meta_f
  wire [3 : 0] s0Meta_f_D_IN, s0Meta_f_D_OUT;
  wire s0Meta_f_CLR,
       s0Meta_f_DEQ,
       s0Meta_f_EMPTY_N,
       s0Meta_f_ENQ,
       s0Meta_f_FULL_N;

  // ports of submodule s0_f
  wire [152 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captureAndMove,
       CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_decodeAndMove,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktDrop_r_setClear,
       CAN_FIRE_RL_pktDrop_r_update,
       CAN_FIRE_RL_pktError_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktError_r_setClear,
       CAN_FIRE_RL_pktError_r_update,
       CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_ptpCnt_r_setClear,
       CAN_FIRE_RL_ptpCnt_r_update,
       CAN_FIRE_RL_s2Taken,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_RL_updateState,
       CAN_FIRE_mac_s_axis_mTDATA,
       CAN_FIRE_mac_s_axis_mTKEEP,
       CAN_FIRE_mac_s_axis_mTLAST,
       CAN_FIRE_mac_s_axis_mTSTRB,
       CAN_FIRE_mac_s_axis_mTUSER,
       CAN_FIRE_mac_s_axis_mTVALID,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_usr_m_axis_sTREADY,
       WILL_FIRE_RL_captureAndMove,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_decodeAndMove,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktDrop_r_setClear,
       WILL_FIRE_RL_pktDrop_r_update,
       WILL_FIRE_RL_pktError_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktError_r_setClear,
       WILL_FIRE_RL_pktError_r_update,
       WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_ptpCnt_r_setClear,
       WILL_FIRE_RL_ptpCnt_r_update,
       WILL_FIRE_RL_s2Taken,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_RL_updateState,
       WILL_FIRE_mac_s_axis_mTDATA,
       WILL_FIRE_mac_s_axis_mTKEEP,
       WILL_FIRE_mac_s_axis_mTLAST,
       WILL_FIRE_mac_s_axis_mTSTRB,
       WILL_FIRE_mac_s_axis_mTUSER,
       WILL_FIRE_mac_s_axis_mTVALID,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_usr_m_axis_sTREADY;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] pkret__h27207, tsret__h27206, v__h24415;
  wire [47 : 0] dmac_mac__h2984;
  wire [31 : 0] cpret__h24479, cpret__h24491, x_data__h27296;
  wire [11 : 0] x__h27330, x__h29966;
  wire [6 : 0] x__h14308;
  wire [3 : 0] x__h13859;
  wire beatCnt_r_37_ULE_16___d398,
       s1_sop_r_11_AND_s0Meta_f_first__21_BIT_3_22_OR_ETC___d434;

  // action method mac_s_axis_mTVALID
  assign CAN_FIRE_mac_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTVALID = mac_s_axis_tvalid ;

  // value method mac_s_axis_sTREADY
  assign mac_s_axis_tready = s0_f_FULL_N ;

  // action method mac_s_axis_mTDATA
  assign CAN_FIRE_mac_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTDATA = 1'd1 ;

  // action method mac_s_axis_mTSTRB
  assign CAN_FIRE_mac_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTSTRB = 1'd1 ;

  // action method mac_s_axis_mTUSER
  assign CAN_FIRE_mac_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTUSER = 1'd1 ;

  // action method mac_s_axis_mTKEEP
  assign CAN_FIRE_mac_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTKEEP = 1'd1 ;

  // action method mac_s_axis_mTLAST
  assign CAN_FIRE_mac_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTLAST = mac_s_axis_tlast ;

  // value method usr_m_axis_mTVALID
  assign usr_m_axis_tvalid = s2_valid ;

  // action method usr_m_axis_sTREADY
  assign CAN_FIRE_usr_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_usr_m_axis_sTREADY = usr_m_axis_tready ;

  // value method usr_m_axis_mTDATA
  assign usr_m_axis_tdata = s2_r[152:89] ;

  // value method usr_m_axis_mTUSER
  assign usr_m_axis_tuser = s2_r[80:1] ;

  // value method usr_m_axis_mTKEEP
  assign usr_m_axis_tkeep = s2_r[88:81] ;

  // value method usr_m_axis_mTLAST
  assign usr_m_axis_tlast = s2_valid && s2_r[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // submodule s0Meta_f
  FIFO2 #(.width(32'd4), .guarded(32'd1)) s0Meta_f(.RST(s_axi_aresetn__DELAYED),
						   .CLK(s_axi_aclk),
						   .D_IN(s0Meta_f_D_IN),
						   .ENQ(s0Meta_f_ENQ),
						   .DEQ(s0Meta_f_DEQ),
						   .CLR(s0Meta_f_CLR),
						   .D_OUT(s0Meta_f_D_OUT),
						   .FULL_N(s0Meta_f_FULL_N),
						   .EMPTY_N(s0Meta_f_EMPTY_N));

  // submodule s0_f
  FIFO2 #(.width(32'd153), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_ptpCnt_r_update
  assign CAN_FIRE_RL_ptpCnt_r_update = ptpCnt_r_clear_r || ptpCnt_r_incr_r ;
  assign WILL_FIRE_RL_ptpCnt_r_update = CAN_FIRE_RL_ptpCnt_r_update ;

  // rule RL_pktDrop_r_update
  assign CAN_FIRE_RL_pktDrop_r_update =
	     pktDrop_r_clear_r || pktDrop_r_incr_r ;
  assign WILL_FIRE_RL_pktDrop_r_update = CAN_FIRE_RL_pktDrop_r_update ;

  // rule RL_pktError_r_update
  assign CAN_FIRE_RL_pktError_r_update =
	     pktError_r_clear_r || pktError_r_incr_r ;
  assign WILL_FIRE_RL_pktError_r_update = CAN_FIRE_RL_pktError_r_update ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways =
	     s0_f_FULL_N && (!sin_sop_r || s0Meta_f_FULL_N) &&
	     mac_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_s2Taken ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_s2Taken ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s2_valid ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s2_valid ;

  // rule RL_s2Taken
  assign CAN_FIRE_RL_s2Taken = s2_valid && usr_m_axis_tready ;
  assign WILL_FIRE_RL_s2Taken = CAN_FIRE_RL_s2Taken ;

  // rule RL_captureAndMove
  assign CAN_FIRE_RL_captureAndMove = s1_valid && !s2_valid_port1__read ;
  assign WILL_FIRE_RL_captureAndMove = CAN_FIRE_RL_captureAndMove ;

  // rule RL_decodeAndMove
  assign CAN_FIRE_RL_decodeAndMove =
	     s0_f_EMPTY_N && (!s1_sop_r || s0Meta_f_EMPTY_N) &&
	     !s1_valid_port1__read ;
  assign WILL_FIRE_RL_decodeAndMove = CAN_FIRE_RL_decodeAndMove ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_updateState
  assign CAN_FIRE_RL_updateState = 1'd1 ;
  assign WILL_FIRE_RL_updateState = 1'd1 ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrData_q_0[1] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_ptpCnt_r_setClear
  assign CAN_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_ptpCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktDrop_r_setClear
  assign CAN_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktDrop_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktError_r_setClear
  assign CAN_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktError_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 = { 2'd0, x_data__h27296 } ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_decodeAndMove && s1_sop_r ;
  assign ptpCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_decodeAndMove && s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) ;
  assign pktDrop_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && full_r && capture_r && s2_r[0] ||
	     WILL_FIRE_RL_decodeAndMove &&
	     s1_sop_r_11_AND_s0Meta_f_first__21_BIT_3_22_OR_ETC___d434 ;
  assign pktError_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     !beatCnt_r_37_ULE_16___d398 ;
  assign ackPkt_pw_whas =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 ;
  assign capPkt_pw_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     beatCnt_r_37_ULE_16___d398 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;
  assign s1_valid_port1__read = !CAN_FIRE_RL_captureAndMove && s1_valid ;
  assign s1_valid_port2__read =
	     CAN_FIRE_RL_decodeAndMove || s1_valid_port1__read ;
  assign s2_valid_port1__read = !CAN_FIRE_RL_s2Taken && s2_valid ;
  assign s2_valid_port2__read =
	     CAN_FIRE_RL_captureAndMove || s2_valid_port1__read ;

  // register beatCnt_r
  assign beatCnt_r_D_IN =
	     s1_r[0] ?
	       5'd0 :
	       beatCnt_r + (beatCnt_r_37_ULE_16___d398 ? 5'd1 : 5'd0) ;
  assign beatCnt_r_EN = WILL_FIRE_RL_captureAndMove && capture_r && !full_r ;

  // register capture_r
  assign capture_r_D_IN =
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     enable_r ;
  assign capture_r_EN = pktCnt_r_incr_r_1_whas ;

  // register empty_r
  assign empty_r_D_IN =
	     ackPkt_pw_whas && !capPkt_pw_whas && rdPtr_r + 4'd1 == wrPtr_r ;
  assign empty_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register enable_r
  assign enable_r_D_IN = saxi_a4wrData_q_0[0] ;
  assign enable_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 ;

  // register full_r
  assign full_r_D_IN =
	     (!ackPkt_pw_whas || capPkt_pw_whas) &&
	     wrPtr_r + 4'd1 == { ~rdPtr_r[3], rdPtr_r[2:0] } ;
  assign full_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktDrop_r
  assign pktDrop_r_D_IN = pktDrop_r_clear_r ? 32'd0 : pktDrop_r + 32'd1 ;
  assign pktDrop_r_EN = CAN_FIRE_RL_pktDrop_r_update ;

  // register pktDrop_r_clear_r
  assign pktDrop_r_clear_r_D_IN = WILL_FIRE_RL_pktDrop_r_setClear ;
  assign pktDrop_r_clear_r_EN =
	     WILL_FIRE_RL_pktDrop_r_update && pktDrop_r_clear_r ||
	     WILL_FIRE_RL_pktDrop_r_setClear ;

  // register pktDrop_r_incr_r
  assign pktDrop_r_incr_r_D_IN = pktDrop_r_incr_r_1_whas ;
  assign pktDrop_r_incr_r_EN = 1'd1 ;

  // register pktError_r
  assign pktError_r_D_IN = pktError_r_clear_r ? 32'd0 : pktError_r + 32'd1 ;
  assign pktError_r_EN = CAN_FIRE_RL_pktError_r_update ;

  // register pktError_r_clear_r
  assign pktError_r_clear_r_D_IN = WILL_FIRE_RL_pktError_r_setClear ;
  assign pktError_r_clear_r_EN =
	     WILL_FIRE_RL_pktError_r_update && pktError_r_clear_r ||
	     WILL_FIRE_RL_pktError_r_setClear ;

  // register pktError_r_incr_r
  assign pktError_r_incr_r_D_IN = pktError_r_incr_r_1_whas ;
  assign pktError_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = s1_r[152:89] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd0 && capture_r &&
	     !full_r ;

  // register pktStore_1
  assign pktStore_1_D_IN = s1_r[152:89] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd1 && capture_r &&
	     !full_r ;

  // register pktStore_10
  assign pktStore_10_D_IN = s1_r[152:89] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd10 && capture_r &&
	     !full_r ;

  // register pktStore_100
  assign pktStore_100_D_IN = s1_r[152:89] ;
  assign pktStore_100_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd100 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_101
  assign pktStore_101_D_IN = s1_r[152:89] ;
  assign pktStore_101_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd101 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_102
  assign pktStore_102_D_IN = s1_r[152:89] ;
  assign pktStore_102_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd102 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_103
  assign pktStore_103_D_IN = s1_r[152:89] ;
  assign pktStore_103_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd103 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_104
  assign pktStore_104_D_IN = s1_r[152:89] ;
  assign pktStore_104_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd104 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_105
  assign pktStore_105_D_IN = s1_r[152:89] ;
  assign pktStore_105_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd105 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_106
  assign pktStore_106_D_IN = s1_r[152:89] ;
  assign pktStore_106_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd106 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_107
  assign pktStore_107_D_IN = s1_r[152:89] ;
  assign pktStore_107_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd107 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_108
  assign pktStore_108_D_IN = s1_r[152:89] ;
  assign pktStore_108_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd108 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_109
  assign pktStore_109_D_IN = s1_r[152:89] ;
  assign pktStore_109_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd109 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_11
  assign pktStore_11_D_IN = s1_r[152:89] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd11 && capture_r &&
	     !full_r ;

  // register pktStore_110
  assign pktStore_110_D_IN = s1_r[152:89] ;
  assign pktStore_110_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd110 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_111
  assign pktStore_111_D_IN = s1_r[152:89] ;
  assign pktStore_111_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd111 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_112
  assign pktStore_112_D_IN = s1_r[152:89] ;
  assign pktStore_112_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd112 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_113
  assign pktStore_113_D_IN = s1_r[152:89] ;
  assign pktStore_113_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd113 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_114
  assign pktStore_114_D_IN = s1_r[152:89] ;
  assign pktStore_114_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd114 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_115
  assign pktStore_115_D_IN = s1_r[152:89] ;
  assign pktStore_115_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd115 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_116
  assign pktStore_116_D_IN = s1_r[152:89] ;
  assign pktStore_116_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd116 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_117
  assign pktStore_117_D_IN = s1_r[152:89] ;
  assign pktStore_117_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd117 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_118
  assign pktStore_118_D_IN = s1_r[152:89] ;
  assign pktStore_118_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd118 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_119
  assign pktStore_119_D_IN = s1_r[152:89] ;
  assign pktStore_119_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd119 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_12
  assign pktStore_12_D_IN = s1_r[152:89] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd12 && capture_r &&
	     !full_r ;

  // register pktStore_120
  assign pktStore_120_D_IN = s1_r[152:89] ;
  assign pktStore_120_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd120 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_121
  assign pktStore_121_D_IN = s1_r[152:89] ;
  assign pktStore_121_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd121 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_122
  assign pktStore_122_D_IN = s1_r[152:89] ;
  assign pktStore_122_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd122 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_123
  assign pktStore_123_D_IN = s1_r[152:89] ;
  assign pktStore_123_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd123 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_124
  assign pktStore_124_D_IN = s1_r[152:89] ;
  assign pktStore_124_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd124 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_125
  assign pktStore_125_D_IN = s1_r[152:89] ;
  assign pktStore_125_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd125 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_126
  assign pktStore_126_D_IN = s1_r[152:89] ;
  assign pktStore_126_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd126 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_127
  assign pktStore_127_D_IN = s1_r[152:89] ;
  assign pktStore_127_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd127 &&
	     capture_r &&
	     !full_r ;

  // register pktStore_13
  assign pktStore_13_D_IN = s1_r[152:89] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd13 && capture_r &&
	     !full_r ;

  // register pktStore_14
  assign pktStore_14_D_IN = s1_r[152:89] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd14 && capture_r &&
	     !full_r ;

  // register pktStore_15
  assign pktStore_15_D_IN = s1_r[152:89] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd15 && capture_r &&
	     !full_r ;

  // register pktStore_16
  assign pktStore_16_D_IN = s1_r[152:89] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd16 && capture_r &&
	     !full_r ;

  // register pktStore_17
  assign pktStore_17_D_IN = s1_r[152:89] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd17 && capture_r &&
	     !full_r ;

  // register pktStore_18
  assign pktStore_18_D_IN = s1_r[152:89] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd18 && capture_r &&
	     !full_r ;

  // register pktStore_19
  assign pktStore_19_D_IN = s1_r[152:89] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd19 && capture_r &&
	     !full_r ;

  // register pktStore_2
  assign pktStore_2_D_IN = s1_r[152:89] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd2 && capture_r &&
	     !full_r ;

  // register pktStore_20
  assign pktStore_20_D_IN = s1_r[152:89] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd20 && capture_r &&
	     !full_r ;

  // register pktStore_21
  assign pktStore_21_D_IN = s1_r[152:89] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd21 && capture_r &&
	     !full_r ;

  // register pktStore_22
  assign pktStore_22_D_IN = s1_r[152:89] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd22 && capture_r &&
	     !full_r ;

  // register pktStore_23
  assign pktStore_23_D_IN = s1_r[152:89] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd23 && capture_r &&
	     !full_r ;

  // register pktStore_24
  assign pktStore_24_D_IN = s1_r[152:89] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd24 && capture_r &&
	     !full_r ;

  // register pktStore_25
  assign pktStore_25_D_IN = s1_r[152:89] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd25 && capture_r &&
	     !full_r ;

  // register pktStore_26
  assign pktStore_26_D_IN = s1_r[152:89] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd26 && capture_r &&
	     !full_r ;

  // register pktStore_27
  assign pktStore_27_D_IN = s1_r[152:89] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd27 && capture_r &&
	     !full_r ;

  // register pktStore_28
  assign pktStore_28_D_IN = s1_r[152:89] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd28 && capture_r &&
	     !full_r ;

  // register pktStore_29
  assign pktStore_29_D_IN = s1_r[152:89] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd29 && capture_r &&
	     !full_r ;

  // register pktStore_3
  assign pktStore_3_D_IN = s1_r[152:89] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd3 && capture_r &&
	     !full_r ;

  // register pktStore_30
  assign pktStore_30_D_IN = s1_r[152:89] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd30 && capture_r &&
	     !full_r ;

  // register pktStore_31
  assign pktStore_31_D_IN = s1_r[152:89] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd31 && capture_r &&
	     !full_r ;

  // register pktStore_32
  assign pktStore_32_D_IN = s1_r[152:89] ;
  assign pktStore_32_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd32 && capture_r &&
	     !full_r ;

  // register pktStore_33
  assign pktStore_33_D_IN = s1_r[152:89] ;
  assign pktStore_33_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd33 && capture_r &&
	     !full_r ;

  // register pktStore_34
  assign pktStore_34_D_IN = s1_r[152:89] ;
  assign pktStore_34_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd34 && capture_r &&
	     !full_r ;

  // register pktStore_35
  assign pktStore_35_D_IN = s1_r[152:89] ;
  assign pktStore_35_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd35 && capture_r &&
	     !full_r ;

  // register pktStore_36
  assign pktStore_36_D_IN = s1_r[152:89] ;
  assign pktStore_36_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd36 && capture_r &&
	     !full_r ;

  // register pktStore_37
  assign pktStore_37_D_IN = s1_r[152:89] ;
  assign pktStore_37_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd37 && capture_r &&
	     !full_r ;

  // register pktStore_38
  assign pktStore_38_D_IN = s1_r[152:89] ;
  assign pktStore_38_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd38 && capture_r &&
	     !full_r ;

  // register pktStore_39
  assign pktStore_39_D_IN = s1_r[152:89] ;
  assign pktStore_39_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd39 && capture_r &&
	     !full_r ;

  // register pktStore_4
  assign pktStore_4_D_IN = s1_r[152:89] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd4 && capture_r &&
	     !full_r ;

  // register pktStore_40
  assign pktStore_40_D_IN = s1_r[152:89] ;
  assign pktStore_40_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd40 && capture_r &&
	     !full_r ;

  // register pktStore_41
  assign pktStore_41_D_IN = s1_r[152:89] ;
  assign pktStore_41_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd41 && capture_r &&
	     !full_r ;

  // register pktStore_42
  assign pktStore_42_D_IN = s1_r[152:89] ;
  assign pktStore_42_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd42 && capture_r &&
	     !full_r ;

  // register pktStore_43
  assign pktStore_43_D_IN = s1_r[152:89] ;
  assign pktStore_43_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd43 && capture_r &&
	     !full_r ;

  // register pktStore_44
  assign pktStore_44_D_IN = s1_r[152:89] ;
  assign pktStore_44_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd44 && capture_r &&
	     !full_r ;

  // register pktStore_45
  assign pktStore_45_D_IN = s1_r[152:89] ;
  assign pktStore_45_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd45 && capture_r &&
	     !full_r ;

  // register pktStore_46
  assign pktStore_46_D_IN = s1_r[152:89] ;
  assign pktStore_46_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd46 && capture_r &&
	     !full_r ;

  // register pktStore_47
  assign pktStore_47_D_IN = s1_r[152:89] ;
  assign pktStore_47_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd47 && capture_r &&
	     !full_r ;

  // register pktStore_48
  assign pktStore_48_D_IN = s1_r[152:89] ;
  assign pktStore_48_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd48 && capture_r &&
	     !full_r ;

  // register pktStore_49
  assign pktStore_49_D_IN = s1_r[152:89] ;
  assign pktStore_49_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd49 && capture_r &&
	     !full_r ;

  // register pktStore_5
  assign pktStore_5_D_IN = s1_r[152:89] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd5 && capture_r &&
	     !full_r ;

  // register pktStore_50
  assign pktStore_50_D_IN = s1_r[152:89] ;
  assign pktStore_50_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd50 && capture_r &&
	     !full_r ;

  // register pktStore_51
  assign pktStore_51_D_IN = s1_r[152:89] ;
  assign pktStore_51_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd51 && capture_r &&
	     !full_r ;

  // register pktStore_52
  assign pktStore_52_D_IN = s1_r[152:89] ;
  assign pktStore_52_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd52 && capture_r &&
	     !full_r ;

  // register pktStore_53
  assign pktStore_53_D_IN = s1_r[152:89] ;
  assign pktStore_53_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd53 && capture_r &&
	     !full_r ;

  // register pktStore_54
  assign pktStore_54_D_IN = s1_r[152:89] ;
  assign pktStore_54_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd54 && capture_r &&
	     !full_r ;

  // register pktStore_55
  assign pktStore_55_D_IN = s1_r[152:89] ;
  assign pktStore_55_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd55 && capture_r &&
	     !full_r ;

  // register pktStore_56
  assign pktStore_56_D_IN = s1_r[152:89] ;
  assign pktStore_56_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd56 && capture_r &&
	     !full_r ;

  // register pktStore_57
  assign pktStore_57_D_IN = s1_r[152:89] ;
  assign pktStore_57_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd57 && capture_r &&
	     !full_r ;

  // register pktStore_58
  assign pktStore_58_D_IN = s1_r[152:89] ;
  assign pktStore_58_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd58 && capture_r &&
	     !full_r ;

  // register pktStore_59
  assign pktStore_59_D_IN = s1_r[152:89] ;
  assign pktStore_59_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd59 && capture_r &&
	     !full_r ;

  // register pktStore_6
  assign pktStore_6_D_IN = s1_r[152:89] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd6 && capture_r &&
	     !full_r ;

  // register pktStore_60
  assign pktStore_60_D_IN = s1_r[152:89] ;
  assign pktStore_60_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd60 && capture_r &&
	     !full_r ;

  // register pktStore_61
  assign pktStore_61_D_IN = s1_r[152:89] ;
  assign pktStore_61_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd61 && capture_r &&
	     !full_r ;

  // register pktStore_62
  assign pktStore_62_D_IN = s1_r[152:89] ;
  assign pktStore_62_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd62 && capture_r &&
	     !full_r ;

  // register pktStore_63
  assign pktStore_63_D_IN = s1_r[152:89] ;
  assign pktStore_63_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd63 && capture_r &&
	     !full_r ;

  // register pktStore_64
  assign pktStore_64_D_IN = s1_r[152:89] ;
  assign pktStore_64_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd64 && capture_r &&
	     !full_r ;

  // register pktStore_65
  assign pktStore_65_D_IN = s1_r[152:89] ;
  assign pktStore_65_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd65 && capture_r &&
	     !full_r ;

  // register pktStore_66
  assign pktStore_66_D_IN = s1_r[152:89] ;
  assign pktStore_66_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd66 && capture_r &&
	     !full_r ;

  // register pktStore_67
  assign pktStore_67_D_IN = s1_r[152:89] ;
  assign pktStore_67_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd67 && capture_r &&
	     !full_r ;

  // register pktStore_68
  assign pktStore_68_D_IN = s1_r[152:89] ;
  assign pktStore_68_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd68 && capture_r &&
	     !full_r ;

  // register pktStore_69
  assign pktStore_69_D_IN = s1_r[152:89] ;
  assign pktStore_69_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd69 && capture_r &&
	     !full_r ;

  // register pktStore_7
  assign pktStore_7_D_IN = s1_r[152:89] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd7 && capture_r &&
	     !full_r ;

  // register pktStore_70
  assign pktStore_70_D_IN = s1_r[152:89] ;
  assign pktStore_70_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd70 && capture_r &&
	     !full_r ;

  // register pktStore_71
  assign pktStore_71_D_IN = s1_r[152:89] ;
  assign pktStore_71_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd71 && capture_r &&
	     !full_r ;

  // register pktStore_72
  assign pktStore_72_D_IN = s1_r[152:89] ;
  assign pktStore_72_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd72 && capture_r &&
	     !full_r ;

  // register pktStore_73
  assign pktStore_73_D_IN = s1_r[152:89] ;
  assign pktStore_73_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd73 && capture_r &&
	     !full_r ;

  // register pktStore_74
  assign pktStore_74_D_IN = s1_r[152:89] ;
  assign pktStore_74_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd74 && capture_r &&
	     !full_r ;

  // register pktStore_75
  assign pktStore_75_D_IN = s1_r[152:89] ;
  assign pktStore_75_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd75 && capture_r &&
	     !full_r ;

  // register pktStore_76
  assign pktStore_76_D_IN = s1_r[152:89] ;
  assign pktStore_76_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd76 && capture_r &&
	     !full_r ;

  // register pktStore_77
  assign pktStore_77_D_IN = s1_r[152:89] ;
  assign pktStore_77_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd77 && capture_r &&
	     !full_r ;

  // register pktStore_78
  assign pktStore_78_D_IN = s1_r[152:89] ;
  assign pktStore_78_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd78 && capture_r &&
	     !full_r ;

  // register pktStore_79
  assign pktStore_79_D_IN = s1_r[152:89] ;
  assign pktStore_79_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd79 && capture_r &&
	     !full_r ;

  // register pktStore_8
  assign pktStore_8_D_IN = s1_r[152:89] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd8 && capture_r &&
	     !full_r ;

  // register pktStore_80
  assign pktStore_80_D_IN = s1_r[152:89] ;
  assign pktStore_80_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd80 && capture_r &&
	     !full_r ;

  // register pktStore_81
  assign pktStore_81_D_IN = s1_r[152:89] ;
  assign pktStore_81_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd81 && capture_r &&
	     !full_r ;

  // register pktStore_82
  assign pktStore_82_D_IN = s1_r[152:89] ;
  assign pktStore_82_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd82 && capture_r &&
	     !full_r ;

  // register pktStore_83
  assign pktStore_83_D_IN = s1_r[152:89] ;
  assign pktStore_83_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd83 && capture_r &&
	     !full_r ;

  // register pktStore_84
  assign pktStore_84_D_IN = s1_r[152:89] ;
  assign pktStore_84_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd84 && capture_r &&
	     !full_r ;

  // register pktStore_85
  assign pktStore_85_D_IN = s1_r[152:89] ;
  assign pktStore_85_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd85 && capture_r &&
	     !full_r ;

  // register pktStore_86
  assign pktStore_86_D_IN = s1_r[152:89] ;
  assign pktStore_86_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd86 && capture_r &&
	     !full_r ;

  // register pktStore_87
  assign pktStore_87_D_IN = s1_r[152:89] ;
  assign pktStore_87_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd87 && capture_r &&
	     !full_r ;

  // register pktStore_88
  assign pktStore_88_D_IN = s1_r[152:89] ;
  assign pktStore_88_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd88 && capture_r &&
	     !full_r ;

  // register pktStore_89
  assign pktStore_89_D_IN = s1_r[152:89] ;
  assign pktStore_89_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd89 && capture_r &&
	     !full_r ;

  // register pktStore_9
  assign pktStore_9_D_IN = s1_r[152:89] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd9 && capture_r &&
	     !full_r ;

  // register pktStore_90
  assign pktStore_90_D_IN = s1_r[152:89] ;
  assign pktStore_90_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd90 && capture_r &&
	     !full_r ;

  // register pktStore_91
  assign pktStore_91_D_IN = s1_r[152:89] ;
  assign pktStore_91_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd91 && capture_r &&
	     !full_r ;

  // register pktStore_92
  assign pktStore_92_D_IN = s1_r[152:89] ;
  assign pktStore_92_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd92 && capture_r &&
	     !full_r ;

  // register pktStore_93
  assign pktStore_93_D_IN = s1_r[152:89] ;
  assign pktStore_93_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd93 && capture_r &&
	     !full_r ;

  // register pktStore_94
  assign pktStore_94_D_IN = s1_r[152:89] ;
  assign pktStore_94_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd94 && capture_r &&
	     !full_r ;

  // register pktStore_95
  assign pktStore_95_D_IN = s1_r[152:89] ;
  assign pktStore_95_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd95 && capture_r &&
	     !full_r ;

  // register pktStore_96
  assign pktStore_96_D_IN = s1_r[152:89] ;
  assign pktStore_96_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd96 && capture_r &&
	     !full_r ;

  // register pktStore_97
  assign pktStore_97_D_IN = s1_r[152:89] ;
  assign pktStore_97_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd97 && capture_r &&
	     !full_r ;

  // register pktStore_98
  assign pktStore_98_D_IN = s1_r[152:89] ;
  assign pktStore_98_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd98 && capture_r &&
	     !full_r ;

  // register pktStore_99
  assign pktStore_99_D_IN = s1_r[152:89] ;
  assign pktStore_99_EN =
	     WILL_FIRE_RL_captureAndMove && x__h14308 == 7'd99 && capture_r &&
	     !full_r ;

  // register ptpCnt_r
  assign ptpCnt_r_D_IN = ptpCnt_r_clear_r ? 32'd0 : ptpCnt_r + 32'd1 ;
  assign ptpCnt_r_EN = CAN_FIRE_RL_ptpCnt_r_update ;

  // register ptpCnt_r_clear_r
  assign ptpCnt_r_clear_r_D_IN = WILL_FIRE_RL_ptpCnt_r_setClear ;
  assign ptpCnt_r_clear_r_EN =
	     WILL_FIRE_RL_ptpCnt_r_update && ptpCnt_r_clear_r ||
	     WILL_FIRE_RL_ptpCnt_r_setClear ;

  // register ptpCnt_r_incr_r
  assign ptpCnt_r_incr_r_D_IN = ptpCnt_r_incr_r_1_whas ;
  assign ptpCnt_r_incr_r_EN = 1'd1 ;

  // register rdPtr_r
  assign rdPtr_r_D_IN = rdPtr_r + 4'd1 ;
  assign rdPtr_r_EN = ackPkt_pw_whas ;

  // register s1_r
  assign s1_r_D_IN = s0_f_D_OUT ;
  assign s1_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_sop_r
  assign s1_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign s1_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_valid
  assign s1_valid_D_IN = s1_valid_port2__read ;
  assign s1_valid_EN = 1'b1 ;

  // register s2_r
  assign s2_r_D_IN = s1_r ;
  assign s2_r_EN = CAN_FIRE_RL_captureAndMove ;

  // register s2_sop_r
  assign s2_sop_r_D_IN = s1_sop_r ;
  assign s2_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s2_valid
  assign s2_valid_D_IN = s2_valid_port2__read ;
  assign s2_valid_EN = 1'b1 ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_1:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(MUX_saxi_a4rdResp_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdResp_q_0_write_1__SEL_1:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_1:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(MUX_saxi_a4wrData_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrData_q_0_write_1__SEL_1:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register sin_sop_r
  assign sin_sop_r_D_IN = mac_s_axis_tlast ;
  assign sin_sop_r_EN = CAN_FIRE_RL_slv_ifc_doAlways ;

  // register timeStamps_0
  assign timeStamps_0_D_IN = s1_r[80:1] ;
  assign timeStamps_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd0 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_1
  assign timeStamps_1_D_IN = s1_r[80:1] ;
  assign timeStamps_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd1 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_2
  assign timeStamps_2_D_IN = s1_r[80:1] ;
  assign timeStamps_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd2 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_3
  assign timeStamps_3_D_IN = s1_r[80:1] ;
  assign timeStamps_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd3 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_4
  assign timeStamps_4_D_IN = s1_r[80:1] ;
  assign timeStamps_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd4 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_5
  assign timeStamps_5_D_IN = s1_r[80:1] ;
  assign timeStamps_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd5 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_6
  assign timeStamps_6_D_IN = s1_r[80:1] ;
  assign timeStamps_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd6 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_7
  assign timeStamps_7_D_IN = s1_r[80:1] ;
  assign timeStamps_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h13859 == 4'd7 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register wrPtr_r
  assign wrPtr_r_D_IN = wrPtr_r + 4'd1 ;
  assign wrPtr_r_EN = capPkt_pw_whas ;

  // submodule s0Meta_f
  assign s0Meta_f_D_IN =
	     { dmac_mac__h2984 == 48'h011B19000000,
	       dmac_mac__h2984 == 48'h0180C200000E,
	       dmac_mac__h2984 == 48'h01005E000181,
	       dmac_mac__h2984 == 48'h01005E00006B } ;
  assign s0Meta_f_ENQ = WILL_FIRE_RL_slv_ifc_doAlways && sin_sop_r ;
  assign s0Meta_f_DEQ = pktCnt_r_incr_r_1_whas ;
  assign s0Meta_f_CLR = 1'b0 ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { mac_s_axis_tdata,
	       mac_s_axis_tkeep,
	       mac_s_axis_tuser,
	       mac_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_decodeAndMove ;
  assign s0_f_CLR = 1'b0 ;

  // remaining internal signals
  assign beatCnt_r_37_ULE_16___d398 = beatCnt_r <= 5'd16 ;
  assign cpret__h24479 = { 31'd0, enable_r } ;
  assign cpret__h24491 = empty_r ? 32'hFFFFFFFF : { 29'd0, rdPtr_r[2:0] } ;
  assign dmac_mac__h2984 =
	     { mac_s_axis_tdata[7:0],
	       mac_s_axis_tdata[15:8],
	       mac_s_axis_tdata[23:16],
	       mac_s_axis_tdata[31:24],
	       mac_s_axis_tdata[39:32],
	       mac_s_axis_tdata[47:40] } ;
  assign s1_sop_r_11_AND_s0Meta_f_first__21_BIT_3_22_OR_ETC___d434 =
	     s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     !enable_r ;
  assign x__h13859 = { 1'd0, wrPtr_r[2:0] } ;
  assign x__h14308 = { wrPtr_r[2:0], beatCnt_r[3:0] } ;
  assign x__h27330 = { 5'd0, saxi_a4rdAddr_q_0[8:2] } ;
  assign x__h29966 = { 4'd0, saxi_a4rdAddr_q_0[9:2] } ;
  assign x_data__h27296 =
	     (saxi_a4rdAddr_q_0[11:10] == 2'b01) ?
	       tsret__h27206 :
	       (saxi_a4rdAddr_q_0[11] ? pkret__h27207 : v__h24415) ;
  always@(x__h27330 or
	  timeStamps_0 or
	  timeStamps_1 or
	  timeStamps_2 or
	  timeStamps_3 or
	  timeStamps_4 or timeStamps_5 or timeStamps_6 or timeStamps_7)
  begin
    case (x__h27330)
      12'd0: tsret__h27206 = timeStamps_0[31:0];
      12'd1: tsret__h27206 = timeStamps_0[63:32];
      12'd2: tsret__h27206 = { 16'd0, timeStamps_0[79:64] };
      12'd3, 12'd7, 12'd11, 12'd15, 12'd19, 12'd23, 12'd27, 12'd31:
	  tsret__h27206 = 32'd0;
      12'd4: tsret__h27206 = timeStamps_1[31:0];
      12'd5: tsret__h27206 = timeStamps_1[63:32];
      12'd6: tsret__h27206 = { 16'd0, timeStamps_1[79:64] };
      12'd8: tsret__h27206 = timeStamps_2[31:0];
      12'd9: tsret__h27206 = timeStamps_2[63:32];
      12'd10: tsret__h27206 = { 16'd0, timeStamps_2[79:64] };
      12'd12: tsret__h27206 = timeStamps_3[31:0];
      12'd13: tsret__h27206 = timeStamps_3[63:32];
      12'd14: tsret__h27206 = { 16'd0, timeStamps_3[79:64] };
      12'd16: tsret__h27206 = timeStamps_4[31:0];
      12'd17: tsret__h27206 = timeStamps_4[63:32];
      12'd18: tsret__h27206 = { 16'd0, timeStamps_4[79:64] };
      12'd20: tsret__h27206 = timeStamps_5[31:0];
      12'd21: tsret__h27206 = timeStamps_5[63:32];
      12'd22: tsret__h27206 = { 16'd0, timeStamps_5[79:64] };
      12'd24: tsret__h27206 = timeStamps_6[31:0];
      12'd25: tsret__h27206 = timeStamps_6[63:32];
      12'd26: tsret__h27206 = { 16'd0, timeStamps_6[79:64] };
      12'd28: tsret__h27206 = timeStamps_7[31:0];
      12'd29: tsret__h27206 = timeStamps_7[63:32];
      12'd30: tsret__h27206 = { 16'd0, timeStamps_7[79:64] };
      default: tsret__h27206 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h29966 or
	  pktStore_0 or
	  pktStore_1 or
	  pktStore_2 or
	  pktStore_3 or
	  pktStore_4 or
	  pktStore_5 or
	  pktStore_6 or
	  pktStore_7 or
	  pktStore_8 or
	  pktStore_9 or
	  pktStore_10 or
	  pktStore_11 or
	  pktStore_12 or
	  pktStore_13 or
	  pktStore_14 or
	  pktStore_15 or
	  pktStore_16 or
	  pktStore_17 or
	  pktStore_18 or
	  pktStore_19 or
	  pktStore_20 or
	  pktStore_21 or
	  pktStore_22 or
	  pktStore_23 or
	  pktStore_24 or
	  pktStore_25 or
	  pktStore_26 or
	  pktStore_27 or
	  pktStore_28 or
	  pktStore_29 or
	  pktStore_30 or
	  pktStore_31 or
	  pktStore_32 or
	  pktStore_33 or
	  pktStore_34 or
	  pktStore_35 or
	  pktStore_36 or
	  pktStore_37 or
	  pktStore_38 or
	  pktStore_39 or
	  pktStore_40 or
	  pktStore_41 or
	  pktStore_42 or
	  pktStore_43 or
	  pktStore_44 or
	  pktStore_45 or
	  pktStore_46 or
	  pktStore_47 or
	  pktStore_48 or
	  pktStore_49 or
	  pktStore_50 or
	  pktStore_51 or
	  pktStore_52 or
	  pktStore_53 or
	  pktStore_54 or
	  pktStore_55 or
	  pktStore_56 or
	  pktStore_57 or
	  pktStore_58 or
	  pktStore_59 or
	  pktStore_60 or
	  pktStore_61 or
	  pktStore_62 or
	  pktStore_63 or
	  pktStore_64 or
	  pktStore_65 or
	  pktStore_66 or
	  pktStore_67 or
	  pktStore_68 or
	  pktStore_69 or
	  pktStore_70 or
	  pktStore_71 or
	  pktStore_72 or
	  pktStore_73 or
	  pktStore_74 or
	  pktStore_75 or
	  pktStore_76 or
	  pktStore_77 or
	  pktStore_78 or
	  pktStore_79 or
	  pktStore_80 or
	  pktStore_81 or
	  pktStore_82 or
	  pktStore_83 or
	  pktStore_84 or
	  pktStore_85 or
	  pktStore_86 or
	  pktStore_87 or
	  pktStore_88 or
	  pktStore_89 or
	  pktStore_90 or
	  pktStore_91 or
	  pktStore_92 or
	  pktStore_93 or
	  pktStore_94 or
	  pktStore_95 or
	  pktStore_96 or
	  pktStore_97 or
	  pktStore_98 or
	  pktStore_99 or
	  pktStore_100 or
	  pktStore_101 or
	  pktStore_102 or
	  pktStore_103 or
	  pktStore_104 or
	  pktStore_105 or
	  pktStore_106 or
	  pktStore_107 or
	  pktStore_108 or
	  pktStore_109 or
	  pktStore_110 or
	  pktStore_111 or
	  pktStore_112 or
	  pktStore_113 or
	  pktStore_114 or
	  pktStore_115 or
	  pktStore_116 or
	  pktStore_117 or
	  pktStore_118 or
	  pktStore_119 or
	  pktStore_120 or
	  pktStore_121 or
	  pktStore_122 or
	  pktStore_123 or
	  pktStore_124 or pktStore_125 or pktStore_126 or pktStore_127)
  begin
    case (x__h29966)
      12'd0: pkret__h27207 = pktStore_0[31:0];
      12'd1: pkret__h27207 = pktStore_0[63:32];
      12'd2: pkret__h27207 = pktStore_1[31:0];
      12'd3: pkret__h27207 = pktStore_1[63:32];
      12'd4: pkret__h27207 = pktStore_2[31:0];
      12'd5: pkret__h27207 = pktStore_2[63:32];
      12'd6: pkret__h27207 = pktStore_3[31:0];
      12'd7: pkret__h27207 = pktStore_3[63:32];
      12'd8: pkret__h27207 = pktStore_4[31:0];
      12'd9: pkret__h27207 = pktStore_4[63:32];
      12'd10: pkret__h27207 = pktStore_5[31:0];
      12'd11: pkret__h27207 = pktStore_5[63:32];
      12'd12: pkret__h27207 = pktStore_6[31:0];
      12'd13: pkret__h27207 = pktStore_6[63:32];
      12'd14: pkret__h27207 = pktStore_7[31:0];
      12'd15: pkret__h27207 = pktStore_7[63:32];
      12'd16: pkret__h27207 = pktStore_8[31:0];
      12'd17: pkret__h27207 = pktStore_8[63:32];
      12'd18: pkret__h27207 = pktStore_9[31:0];
      12'd19: pkret__h27207 = pktStore_9[63:32];
      12'd20: pkret__h27207 = pktStore_10[31:0];
      12'd21: pkret__h27207 = pktStore_10[63:32];
      12'd22: pkret__h27207 = pktStore_11[31:0];
      12'd23: pkret__h27207 = pktStore_11[63:32];
      12'd24: pkret__h27207 = pktStore_12[31:0];
      12'd25: pkret__h27207 = pktStore_12[63:32];
      12'd26: pkret__h27207 = pktStore_13[31:0];
      12'd27: pkret__h27207 = pktStore_13[63:32];
      12'd28: pkret__h27207 = pktStore_14[31:0];
      12'd29: pkret__h27207 = pktStore_14[63:32];
      12'd30: pkret__h27207 = pktStore_15[31:0];
      12'd31: pkret__h27207 = pktStore_15[63:32];
      12'd32: pkret__h27207 = pktStore_16[31:0];
      12'd33: pkret__h27207 = pktStore_16[63:32];
      12'd34: pkret__h27207 = pktStore_17[31:0];
      12'd35: pkret__h27207 = pktStore_17[63:32];
      12'd36: pkret__h27207 = pktStore_18[31:0];
      12'd37: pkret__h27207 = pktStore_18[63:32];
      12'd38: pkret__h27207 = pktStore_19[31:0];
      12'd39: pkret__h27207 = pktStore_19[63:32];
      12'd40: pkret__h27207 = pktStore_20[31:0];
      12'd41: pkret__h27207 = pktStore_20[63:32];
      12'd42: pkret__h27207 = pktStore_21[31:0];
      12'd43: pkret__h27207 = pktStore_21[63:32];
      12'd44: pkret__h27207 = pktStore_22[31:0];
      12'd45: pkret__h27207 = pktStore_22[63:32];
      12'd46: pkret__h27207 = pktStore_23[31:0];
      12'd47: pkret__h27207 = pktStore_23[63:32];
      12'd48: pkret__h27207 = pktStore_24[31:0];
      12'd49: pkret__h27207 = pktStore_24[63:32];
      12'd50: pkret__h27207 = pktStore_25[31:0];
      12'd51: pkret__h27207 = pktStore_25[63:32];
      12'd52: pkret__h27207 = pktStore_26[31:0];
      12'd53: pkret__h27207 = pktStore_26[63:32];
      12'd54: pkret__h27207 = pktStore_27[31:0];
      12'd55: pkret__h27207 = pktStore_27[63:32];
      12'd56: pkret__h27207 = pktStore_28[31:0];
      12'd57: pkret__h27207 = pktStore_28[63:32];
      12'd58: pkret__h27207 = pktStore_29[31:0];
      12'd59: pkret__h27207 = pktStore_29[63:32];
      12'd60: pkret__h27207 = pktStore_30[31:0];
      12'd61: pkret__h27207 = pktStore_30[63:32];
      12'd62: pkret__h27207 = pktStore_31[31:0];
      12'd63: pkret__h27207 = pktStore_31[63:32];
      12'd64: pkret__h27207 = pktStore_32[31:0];
      12'd65: pkret__h27207 = pktStore_32[63:32];
      12'd66: pkret__h27207 = pktStore_33[31:0];
      12'd67: pkret__h27207 = pktStore_33[63:32];
      12'd68: pkret__h27207 = pktStore_34[31:0];
      12'd69: pkret__h27207 = pktStore_34[63:32];
      12'd70: pkret__h27207 = pktStore_35[31:0];
      12'd71: pkret__h27207 = pktStore_35[63:32];
      12'd72: pkret__h27207 = pktStore_36[31:0];
      12'd73: pkret__h27207 = pktStore_36[63:32];
      12'd74: pkret__h27207 = pktStore_37[31:0];
      12'd75: pkret__h27207 = pktStore_37[63:32];
      12'd76: pkret__h27207 = pktStore_38[31:0];
      12'd77: pkret__h27207 = pktStore_38[63:32];
      12'd78: pkret__h27207 = pktStore_39[31:0];
      12'd79: pkret__h27207 = pktStore_39[63:32];
      12'd80: pkret__h27207 = pktStore_40[31:0];
      12'd81: pkret__h27207 = pktStore_40[63:32];
      12'd82: pkret__h27207 = pktStore_41[31:0];
      12'd83: pkret__h27207 = pktStore_41[63:32];
      12'd84: pkret__h27207 = pktStore_42[31:0];
      12'd85: pkret__h27207 = pktStore_42[63:32];
      12'd86: pkret__h27207 = pktStore_43[31:0];
      12'd87: pkret__h27207 = pktStore_43[63:32];
      12'd88: pkret__h27207 = pktStore_44[31:0];
      12'd89: pkret__h27207 = pktStore_44[63:32];
      12'd90: pkret__h27207 = pktStore_45[31:0];
      12'd91: pkret__h27207 = pktStore_45[63:32];
      12'd92: pkret__h27207 = pktStore_46[31:0];
      12'd93: pkret__h27207 = pktStore_46[63:32];
      12'd94: pkret__h27207 = pktStore_47[31:0];
      12'd95: pkret__h27207 = pktStore_47[63:32];
      12'd96: pkret__h27207 = pktStore_48[31:0];
      12'd97: pkret__h27207 = pktStore_48[63:32];
      12'd98: pkret__h27207 = pktStore_49[31:0];
      12'd99: pkret__h27207 = pktStore_49[63:32];
      12'd100: pkret__h27207 = pktStore_50[31:0];
      12'd101: pkret__h27207 = pktStore_50[63:32];
      12'd102: pkret__h27207 = pktStore_51[31:0];
      12'd103: pkret__h27207 = pktStore_51[63:32];
      12'd104: pkret__h27207 = pktStore_52[31:0];
      12'd105: pkret__h27207 = pktStore_52[63:32];
      12'd106: pkret__h27207 = pktStore_53[31:0];
      12'd107: pkret__h27207 = pktStore_53[63:32];
      12'd108: pkret__h27207 = pktStore_54[31:0];
      12'd109: pkret__h27207 = pktStore_54[63:32];
      12'd110: pkret__h27207 = pktStore_55[31:0];
      12'd111: pkret__h27207 = pktStore_55[63:32];
      12'd112: pkret__h27207 = pktStore_56[31:0];
      12'd113: pkret__h27207 = pktStore_56[63:32];
      12'd114: pkret__h27207 = pktStore_57[31:0];
      12'd115: pkret__h27207 = pktStore_57[63:32];
      12'd116: pkret__h27207 = pktStore_58[31:0];
      12'd117: pkret__h27207 = pktStore_58[63:32];
      12'd118: pkret__h27207 = pktStore_59[31:0];
      12'd119: pkret__h27207 = pktStore_59[63:32];
      12'd120: pkret__h27207 = pktStore_60[31:0];
      12'd121: pkret__h27207 = pktStore_60[63:32];
      12'd122: pkret__h27207 = pktStore_61[31:0];
      12'd123: pkret__h27207 = pktStore_61[63:32];
      12'd124: pkret__h27207 = pktStore_62[31:0];
      12'd125: pkret__h27207 = pktStore_62[63:32];
      12'd126: pkret__h27207 = pktStore_63[31:0];
      12'd127: pkret__h27207 = pktStore_63[63:32];
      12'd128: pkret__h27207 = pktStore_64[31:0];
      12'd129: pkret__h27207 = pktStore_64[63:32];
      12'd130: pkret__h27207 = pktStore_65[31:0];
      12'd131: pkret__h27207 = pktStore_65[63:32];
      12'd132: pkret__h27207 = pktStore_66[31:0];
      12'd133: pkret__h27207 = pktStore_66[63:32];
      12'd134: pkret__h27207 = pktStore_67[31:0];
      12'd135: pkret__h27207 = pktStore_67[63:32];
      12'd136: pkret__h27207 = pktStore_68[31:0];
      12'd137: pkret__h27207 = pktStore_68[63:32];
      12'd138: pkret__h27207 = pktStore_69[31:0];
      12'd139: pkret__h27207 = pktStore_69[63:32];
      12'd140: pkret__h27207 = pktStore_70[31:0];
      12'd141: pkret__h27207 = pktStore_70[63:32];
      12'd142: pkret__h27207 = pktStore_71[31:0];
      12'd143: pkret__h27207 = pktStore_71[63:32];
      12'd144: pkret__h27207 = pktStore_72[31:0];
      12'd145: pkret__h27207 = pktStore_72[63:32];
      12'd146: pkret__h27207 = pktStore_73[31:0];
      12'd147: pkret__h27207 = pktStore_73[63:32];
      12'd148: pkret__h27207 = pktStore_74[31:0];
      12'd149: pkret__h27207 = pktStore_74[63:32];
      12'd150: pkret__h27207 = pktStore_75[31:0];
      12'd151: pkret__h27207 = pktStore_75[63:32];
      12'd152: pkret__h27207 = pktStore_76[31:0];
      12'd153: pkret__h27207 = pktStore_76[63:32];
      12'd154: pkret__h27207 = pktStore_77[31:0];
      12'd155: pkret__h27207 = pktStore_77[63:32];
      12'd156: pkret__h27207 = pktStore_78[31:0];
      12'd157: pkret__h27207 = pktStore_78[63:32];
      12'd158: pkret__h27207 = pktStore_79[31:0];
      12'd159: pkret__h27207 = pktStore_79[63:32];
      12'd160: pkret__h27207 = pktStore_80[31:0];
      12'd161: pkret__h27207 = pktStore_80[63:32];
      12'd162: pkret__h27207 = pktStore_81[31:0];
      12'd163: pkret__h27207 = pktStore_81[63:32];
      12'd164: pkret__h27207 = pktStore_82[31:0];
      12'd165: pkret__h27207 = pktStore_82[63:32];
      12'd166: pkret__h27207 = pktStore_83[31:0];
      12'd167: pkret__h27207 = pktStore_83[63:32];
      12'd168: pkret__h27207 = pktStore_84[31:0];
      12'd169: pkret__h27207 = pktStore_84[63:32];
      12'd170: pkret__h27207 = pktStore_85[31:0];
      12'd171: pkret__h27207 = pktStore_85[63:32];
      12'd172: pkret__h27207 = pktStore_86[31:0];
      12'd173: pkret__h27207 = pktStore_86[63:32];
      12'd174: pkret__h27207 = pktStore_87[31:0];
      12'd175: pkret__h27207 = pktStore_87[63:32];
      12'd176: pkret__h27207 = pktStore_88[31:0];
      12'd177: pkret__h27207 = pktStore_88[63:32];
      12'd178: pkret__h27207 = pktStore_89[31:0];
      12'd179: pkret__h27207 = pktStore_89[63:32];
      12'd180: pkret__h27207 = pktStore_90[31:0];
      12'd181: pkret__h27207 = pktStore_90[63:32];
      12'd182: pkret__h27207 = pktStore_91[31:0];
      12'd183: pkret__h27207 = pktStore_91[63:32];
      12'd184: pkret__h27207 = pktStore_92[31:0];
      12'd185: pkret__h27207 = pktStore_92[63:32];
      12'd186: pkret__h27207 = pktStore_93[31:0];
      12'd187: pkret__h27207 = pktStore_93[63:32];
      12'd188: pkret__h27207 = pktStore_94[31:0];
      12'd189: pkret__h27207 = pktStore_94[63:32];
      12'd190: pkret__h27207 = pktStore_95[31:0];
      12'd191: pkret__h27207 = pktStore_95[63:32];
      12'd192: pkret__h27207 = pktStore_96[31:0];
      12'd193: pkret__h27207 = pktStore_96[63:32];
      12'd194: pkret__h27207 = pktStore_97[31:0];
      12'd195: pkret__h27207 = pktStore_97[63:32];
      12'd196: pkret__h27207 = pktStore_98[31:0];
      12'd197: pkret__h27207 = pktStore_98[63:32];
      12'd198: pkret__h27207 = pktStore_99[31:0];
      12'd199: pkret__h27207 = pktStore_99[63:32];
      12'd200: pkret__h27207 = pktStore_100[31:0];
      12'd201: pkret__h27207 = pktStore_100[63:32];
      12'd202: pkret__h27207 = pktStore_101[31:0];
      12'd203: pkret__h27207 = pktStore_101[63:32];
      12'd204: pkret__h27207 = pktStore_102[31:0];
      12'd205: pkret__h27207 = pktStore_102[63:32];
      12'd206: pkret__h27207 = pktStore_103[31:0];
      12'd207: pkret__h27207 = pktStore_103[63:32];
      12'd208: pkret__h27207 = pktStore_104[31:0];
      12'd209: pkret__h27207 = pktStore_104[63:32];
      12'd210: pkret__h27207 = pktStore_105[31:0];
      12'd211: pkret__h27207 = pktStore_105[63:32];
      12'd212: pkret__h27207 = pktStore_106[31:0];
      12'd213: pkret__h27207 = pktStore_106[63:32];
      12'd214: pkret__h27207 = pktStore_107[31:0];
      12'd215: pkret__h27207 = pktStore_107[63:32];
      12'd216: pkret__h27207 = pktStore_108[31:0];
      12'd217: pkret__h27207 = pktStore_108[63:32];
      12'd218: pkret__h27207 = pktStore_109[31:0];
      12'd219: pkret__h27207 = pktStore_109[63:32];
      12'd220: pkret__h27207 = pktStore_110[31:0];
      12'd221: pkret__h27207 = pktStore_110[63:32];
      12'd222: pkret__h27207 = pktStore_111[31:0];
      12'd223: pkret__h27207 = pktStore_111[63:32];
      12'd224: pkret__h27207 = pktStore_112[31:0];
      12'd225: pkret__h27207 = pktStore_112[63:32];
      12'd226: pkret__h27207 = pktStore_113[31:0];
      12'd227: pkret__h27207 = pktStore_113[63:32];
      12'd228: pkret__h27207 = pktStore_114[31:0];
      12'd229: pkret__h27207 = pktStore_114[63:32];
      12'd230: pkret__h27207 = pktStore_115[31:0];
      12'd231: pkret__h27207 = pktStore_115[63:32];
      12'd232: pkret__h27207 = pktStore_116[31:0];
      12'd233: pkret__h27207 = pktStore_116[63:32];
      12'd234: pkret__h27207 = pktStore_117[31:0];
      12'd235: pkret__h27207 = pktStore_117[63:32];
      12'd236: pkret__h27207 = pktStore_118[31:0];
      12'd237: pkret__h27207 = pktStore_118[63:32];
      12'd238: pkret__h27207 = pktStore_119[31:0];
      12'd239: pkret__h27207 = pktStore_119[63:32];
      12'd240: pkret__h27207 = pktStore_120[31:0];
      12'd241: pkret__h27207 = pktStore_120[63:32];
      12'd242: pkret__h27207 = pktStore_121[31:0];
      12'd243: pkret__h27207 = pktStore_121[63:32];
      12'd244: pkret__h27207 = pktStore_122[31:0];
      12'd245: pkret__h27207 = pktStore_122[63:32];
      12'd246: pkret__h27207 = pktStore_123[31:0];
      12'd247: pkret__h27207 = pktStore_123[63:32];
      12'd248: pkret__h27207 = pktStore_124[31:0];
      12'd249: pkret__h27207 = pktStore_124[63:32];
      12'd250: pkret__h27207 = pktStore_125[31:0];
      12'd251: pkret__h27207 = pktStore_125[63:32];
      12'd252: pkret__h27207 = pktStore_126[31:0];
      12'd253: pkret__h27207 = pktStore_126[63:32];
      12'd254: pkret__h27207 = pktStore_127[31:0];
      12'd255: pkret__h27207 = pktStore_127[63:32];
      default: pkret__h27207 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h24479 or
	  cpret__h24491 or pktCnt_r or ptpCnt_r or pktDrop_r or pktError_r)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h24415 = 32'd1447842644;
      6'd1: v__h24415 = 32'd825110857;
      6'd4: v__h24415 = cpret__h24479;
      6'd5: v__h24415 = cpret__h24491;
      6'd8: v__h24415 = pktCnt_r;
      6'd9: v__h24415 = ptpCnt_r;
      6'd10: v__h24415 = pktDrop_r;
      6'd11: v__h24415 = pktError_r;
      default: v__h24415 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beatCnt_r <= `BSV_ASSIGNMENT_DELAY 5'd0;
	empty_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	enable_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	full_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rdPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	s1_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s2_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sin_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wrPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (beatCnt_r_EN) beatCnt_r <= `BSV_ASSIGNMENT_DELAY beatCnt_r_D_IN;
	if (empty_r_EN) empty_r <= `BSV_ASSIGNMENT_DELAY empty_r_D_IN;
	if (enable_r_EN) enable_r <= `BSV_ASSIGNMENT_DELAY enable_r_D_IN;
	if (full_r_EN) full_r <= `BSV_ASSIGNMENT_DELAY full_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (pktDrop_r_clear_r_EN)
	  pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_clear_r_D_IN;
	if (pktDrop_r_incr_r_EN)
	  pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_incr_r_D_IN;
	if (pktError_r_clear_r_EN)
	  pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktError_r_clear_r_D_IN;
	if (pktError_r_incr_r_EN)
	  pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktError_r_incr_r_D_IN;
	if (ptpCnt_r_clear_r_EN)
	  ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_clear_r_D_IN;
	if (ptpCnt_r_incr_r_EN)
	  ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_incr_r_D_IN;
	if (rdPtr_r_EN) rdPtr_r <= `BSV_ASSIGNMENT_DELAY rdPtr_r_D_IN;
	if (s1_sop_r_EN) s1_sop_r <= `BSV_ASSIGNMENT_DELAY s1_sop_r_D_IN;
	if (s1_valid_EN) s1_valid <= `BSV_ASSIGNMENT_DELAY s1_valid_D_IN;
	if (s2_sop_r_EN) s2_sop_r <= `BSV_ASSIGNMENT_DELAY s2_sop_r_D_IN;
	if (s2_valid_EN) s2_valid <= `BSV_ASSIGNMENT_DELAY s2_valid_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (sin_sop_r_EN) sin_sop_r <= `BSV_ASSIGNMENT_DELAY sin_sop_r_D_IN;
	if (wrPtr_r_EN) wrPtr_r <= `BSV_ASSIGNMENT_DELAY wrPtr_r_D_IN;
      end
    if (capture_r_EN) capture_r <= `BSV_ASSIGNMENT_DELAY capture_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktDrop_r_EN) pktDrop_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_D_IN;
    if (pktError_r_EN) pktError_r <= `BSV_ASSIGNMENT_DELAY pktError_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_100_EN)
      pktStore_100 <= `BSV_ASSIGNMENT_DELAY pktStore_100_D_IN;
    if (pktStore_101_EN)
      pktStore_101 <= `BSV_ASSIGNMENT_DELAY pktStore_101_D_IN;
    if (pktStore_102_EN)
      pktStore_102 <= `BSV_ASSIGNMENT_DELAY pktStore_102_D_IN;
    if (pktStore_103_EN)
      pktStore_103 <= `BSV_ASSIGNMENT_DELAY pktStore_103_D_IN;
    if (pktStore_104_EN)
      pktStore_104 <= `BSV_ASSIGNMENT_DELAY pktStore_104_D_IN;
    if (pktStore_105_EN)
      pktStore_105 <= `BSV_ASSIGNMENT_DELAY pktStore_105_D_IN;
    if (pktStore_106_EN)
      pktStore_106 <= `BSV_ASSIGNMENT_DELAY pktStore_106_D_IN;
    if (pktStore_107_EN)
      pktStore_107 <= `BSV_ASSIGNMENT_DELAY pktStore_107_D_IN;
    if (pktStore_108_EN)
      pktStore_108 <= `BSV_ASSIGNMENT_DELAY pktStore_108_D_IN;
    if (pktStore_109_EN)
      pktStore_109 <= `BSV_ASSIGNMENT_DELAY pktStore_109_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_110_EN)
      pktStore_110 <= `BSV_ASSIGNMENT_DELAY pktStore_110_D_IN;
    if (pktStore_111_EN)
      pktStore_111 <= `BSV_ASSIGNMENT_DELAY pktStore_111_D_IN;
    if (pktStore_112_EN)
      pktStore_112 <= `BSV_ASSIGNMENT_DELAY pktStore_112_D_IN;
    if (pktStore_113_EN)
      pktStore_113 <= `BSV_ASSIGNMENT_DELAY pktStore_113_D_IN;
    if (pktStore_114_EN)
      pktStore_114 <= `BSV_ASSIGNMENT_DELAY pktStore_114_D_IN;
    if (pktStore_115_EN)
      pktStore_115 <= `BSV_ASSIGNMENT_DELAY pktStore_115_D_IN;
    if (pktStore_116_EN)
      pktStore_116 <= `BSV_ASSIGNMENT_DELAY pktStore_116_D_IN;
    if (pktStore_117_EN)
      pktStore_117 <= `BSV_ASSIGNMENT_DELAY pktStore_117_D_IN;
    if (pktStore_118_EN)
      pktStore_118 <= `BSV_ASSIGNMENT_DELAY pktStore_118_D_IN;
    if (pktStore_119_EN)
      pktStore_119 <= `BSV_ASSIGNMENT_DELAY pktStore_119_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_120_EN)
      pktStore_120 <= `BSV_ASSIGNMENT_DELAY pktStore_120_D_IN;
    if (pktStore_121_EN)
      pktStore_121 <= `BSV_ASSIGNMENT_DELAY pktStore_121_D_IN;
    if (pktStore_122_EN)
      pktStore_122 <= `BSV_ASSIGNMENT_DELAY pktStore_122_D_IN;
    if (pktStore_123_EN)
      pktStore_123 <= `BSV_ASSIGNMENT_DELAY pktStore_123_D_IN;
    if (pktStore_124_EN)
      pktStore_124 <= `BSV_ASSIGNMENT_DELAY pktStore_124_D_IN;
    if (pktStore_125_EN)
      pktStore_125 <= `BSV_ASSIGNMENT_DELAY pktStore_125_D_IN;
    if (pktStore_126_EN)
      pktStore_126 <= `BSV_ASSIGNMENT_DELAY pktStore_126_D_IN;
    if (pktStore_127_EN)
      pktStore_127 <= `BSV_ASSIGNMENT_DELAY pktStore_127_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_32_EN) pktStore_32 <= `BSV_ASSIGNMENT_DELAY pktStore_32_D_IN;
    if (pktStore_33_EN) pktStore_33 <= `BSV_ASSIGNMENT_DELAY pktStore_33_D_IN;
    if (pktStore_34_EN) pktStore_34 <= `BSV_ASSIGNMENT_DELAY pktStore_34_D_IN;
    if (pktStore_35_EN) pktStore_35 <= `BSV_ASSIGNMENT_DELAY pktStore_35_D_IN;
    if (pktStore_36_EN) pktStore_36 <= `BSV_ASSIGNMENT_DELAY pktStore_36_D_IN;
    if (pktStore_37_EN) pktStore_37 <= `BSV_ASSIGNMENT_DELAY pktStore_37_D_IN;
    if (pktStore_38_EN) pktStore_38 <= `BSV_ASSIGNMENT_DELAY pktStore_38_D_IN;
    if (pktStore_39_EN) pktStore_39 <= `BSV_ASSIGNMENT_DELAY pktStore_39_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_40_EN) pktStore_40 <= `BSV_ASSIGNMENT_DELAY pktStore_40_D_IN;
    if (pktStore_41_EN) pktStore_41 <= `BSV_ASSIGNMENT_DELAY pktStore_41_D_IN;
    if (pktStore_42_EN) pktStore_42 <= `BSV_ASSIGNMENT_DELAY pktStore_42_D_IN;
    if (pktStore_43_EN) pktStore_43 <= `BSV_ASSIGNMENT_DELAY pktStore_43_D_IN;
    if (pktStore_44_EN) pktStore_44 <= `BSV_ASSIGNMENT_DELAY pktStore_44_D_IN;
    if (pktStore_45_EN) pktStore_45 <= `BSV_ASSIGNMENT_DELAY pktStore_45_D_IN;
    if (pktStore_46_EN) pktStore_46 <= `BSV_ASSIGNMENT_DELAY pktStore_46_D_IN;
    if (pktStore_47_EN) pktStore_47 <= `BSV_ASSIGNMENT_DELAY pktStore_47_D_IN;
    if (pktStore_48_EN) pktStore_48 <= `BSV_ASSIGNMENT_DELAY pktStore_48_D_IN;
    if (pktStore_49_EN) pktStore_49 <= `BSV_ASSIGNMENT_DELAY pktStore_49_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_50_EN) pktStore_50 <= `BSV_ASSIGNMENT_DELAY pktStore_50_D_IN;
    if (pktStore_51_EN) pktStore_51 <= `BSV_ASSIGNMENT_DELAY pktStore_51_D_IN;
    if (pktStore_52_EN) pktStore_52 <= `BSV_ASSIGNMENT_DELAY pktStore_52_D_IN;
    if (pktStore_53_EN) pktStore_53 <= `BSV_ASSIGNMENT_DELAY pktStore_53_D_IN;
    if (pktStore_54_EN) pktStore_54 <= `BSV_ASSIGNMENT_DELAY pktStore_54_D_IN;
    if (pktStore_55_EN) pktStore_55 <= `BSV_ASSIGNMENT_DELAY pktStore_55_D_IN;
    if (pktStore_56_EN) pktStore_56 <= `BSV_ASSIGNMENT_DELAY pktStore_56_D_IN;
    if (pktStore_57_EN) pktStore_57 <= `BSV_ASSIGNMENT_DELAY pktStore_57_D_IN;
    if (pktStore_58_EN) pktStore_58 <= `BSV_ASSIGNMENT_DELAY pktStore_58_D_IN;
    if (pktStore_59_EN) pktStore_59 <= `BSV_ASSIGNMENT_DELAY pktStore_59_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_60_EN) pktStore_60 <= `BSV_ASSIGNMENT_DELAY pktStore_60_D_IN;
    if (pktStore_61_EN) pktStore_61 <= `BSV_ASSIGNMENT_DELAY pktStore_61_D_IN;
    if (pktStore_62_EN) pktStore_62 <= `BSV_ASSIGNMENT_DELAY pktStore_62_D_IN;
    if (pktStore_63_EN) pktStore_63 <= `BSV_ASSIGNMENT_DELAY pktStore_63_D_IN;
    if (pktStore_64_EN) pktStore_64 <= `BSV_ASSIGNMENT_DELAY pktStore_64_D_IN;
    if (pktStore_65_EN) pktStore_65 <= `BSV_ASSIGNMENT_DELAY pktStore_65_D_IN;
    if (pktStore_66_EN) pktStore_66 <= `BSV_ASSIGNMENT_DELAY pktStore_66_D_IN;
    if (pktStore_67_EN) pktStore_67 <= `BSV_ASSIGNMENT_DELAY pktStore_67_D_IN;
    if (pktStore_68_EN) pktStore_68 <= `BSV_ASSIGNMENT_DELAY pktStore_68_D_IN;
    if (pktStore_69_EN) pktStore_69 <= `BSV_ASSIGNMENT_DELAY pktStore_69_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_70_EN) pktStore_70 <= `BSV_ASSIGNMENT_DELAY pktStore_70_D_IN;
    if (pktStore_71_EN) pktStore_71 <= `BSV_ASSIGNMENT_DELAY pktStore_71_D_IN;
    if (pktStore_72_EN) pktStore_72 <= `BSV_ASSIGNMENT_DELAY pktStore_72_D_IN;
    if (pktStore_73_EN) pktStore_73 <= `BSV_ASSIGNMENT_DELAY pktStore_73_D_IN;
    if (pktStore_74_EN) pktStore_74 <= `BSV_ASSIGNMENT_DELAY pktStore_74_D_IN;
    if (pktStore_75_EN) pktStore_75 <= `BSV_ASSIGNMENT_DELAY pktStore_75_D_IN;
    if (pktStore_76_EN) pktStore_76 <= `BSV_ASSIGNMENT_DELAY pktStore_76_D_IN;
    if (pktStore_77_EN) pktStore_77 <= `BSV_ASSIGNMENT_DELAY pktStore_77_D_IN;
    if (pktStore_78_EN) pktStore_78 <= `BSV_ASSIGNMENT_DELAY pktStore_78_D_IN;
    if (pktStore_79_EN) pktStore_79 <= `BSV_ASSIGNMENT_DELAY pktStore_79_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_80_EN) pktStore_80 <= `BSV_ASSIGNMENT_DELAY pktStore_80_D_IN;
    if (pktStore_81_EN) pktStore_81 <= `BSV_ASSIGNMENT_DELAY pktStore_81_D_IN;
    if (pktStore_82_EN) pktStore_82 <= `BSV_ASSIGNMENT_DELAY pktStore_82_D_IN;
    if (pktStore_83_EN) pktStore_83 <= `BSV_ASSIGNMENT_DELAY pktStore_83_D_IN;
    if (pktStore_84_EN) pktStore_84 <= `BSV_ASSIGNMENT_DELAY pktStore_84_D_IN;
    if (pktStore_85_EN) pktStore_85 <= `BSV_ASSIGNMENT_DELAY pktStore_85_D_IN;
    if (pktStore_86_EN) pktStore_86 <= `BSV_ASSIGNMENT_DELAY pktStore_86_D_IN;
    if (pktStore_87_EN) pktStore_87 <= `BSV_ASSIGNMENT_DELAY pktStore_87_D_IN;
    if (pktStore_88_EN) pktStore_88 <= `BSV_ASSIGNMENT_DELAY pktStore_88_D_IN;
    if (pktStore_89_EN) pktStore_89 <= `BSV_ASSIGNMENT_DELAY pktStore_89_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (pktStore_90_EN) pktStore_90 <= `BSV_ASSIGNMENT_DELAY pktStore_90_D_IN;
    if (pktStore_91_EN) pktStore_91 <= `BSV_ASSIGNMENT_DELAY pktStore_91_D_IN;
    if (pktStore_92_EN) pktStore_92 <= `BSV_ASSIGNMENT_DELAY pktStore_92_D_IN;
    if (pktStore_93_EN) pktStore_93 <= `BSV_ASSIGNMENT_DELAY pktStore_93_D_IN;
    if (pktStore_94_EN) pktStore_94 <= `BSV_ASSIGNMENT_DELAY pktStore_94_D_IN;
    if (pktStore_95_EN) pktStore_95 <= `BSV_ASSIGNMENT_DELAY pktStore_95_D_IN;
    if (pktStore_96_EN) pktStore_96 <= `BSV_ASSIGNMENT_DELAY pktStore_96_D_IN;
    if (pktStore_97_EN) pktStore_97 <= `BSV_ASSIGNMENT_DELAY pktStore_97_D_IN;
    if (pktStore_98_EN) pktStore_98 <= `BSV_ASSIGNMENT_DELAY pktStore_98_D_IN;
    if (pktStore_99_EN) pktStore_99 <= `BSV_ASSIGNMENT_DELAY pktStore_99_D_IN;
    if (ptpCnt_r_EN) ptpCnt_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_D_IN;
    if (s1_r_EN) s1_r <= `BSV_ASSIGNMENT_DELAY s1_r_D_IN;
    if (s2_r_EN) s2_r <= `BSV_ASSIGNMENT_DELAY s2_r_D_IN;
    if (timeStamps_0_EN)
      timeStamps_0 <= `BSV_ASSIGNMENT_DELAY timeStamps_0_D_IN;
    if (timeStamps_1_EN)
      timeStamps_1 <= `BSV_ASSIGNMENT_DELAY timeStamps_1_D_IN;
    if (timeStamps_2_EN)
      timeStamps_2 <= `BSV_ASSIGNMENT_DELAY timeStamps_2_D_IN;
    if (timeStamps_3_EN)
      timeStamps_3 <= `BSV_ASSIGNMENT_DELAY timeStamps_3_D_IN;
    if (timeStamps_4_EN)
      timeStamps_4 <= `BSV_ASSIGNMENT_DELAY timeStamps_4_D_IN;
    if (timeStamps_5_EN)
      timeStamps_5 <= `BSV_ASSIGNMENT_DELAY timeStamps_5_D_IN;
    if (timeStamps_6_EN)
      timeStamps_6 <= `BSV_ASSIGNMENT_DELAY timeStamps_6_D_IN;
    if (timeStamps_7_EN)
      timeStamps_7 <= `BSV_ASSIGNMENT_DELAY timeStamps_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beatCnt_r = 5'h0A;
    capture_r = 1'h0;
    empty_r = 1'h0;
    enable_r = 1'h0;
    full_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktDrop_r = 32'hAAAAAAAA;
    pktDrop_r_clear_r = 1'h0;
    pktDrop_r_incr_r = 1'h0;
    pktError_r = 32'hAAAAAAAA;
    pktError_r_clear_r = 1'h0;
    pktError_r_incr_r = 1'h0;
    pktStore_0 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_1 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_10 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_100 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_101 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_102 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_103 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_104 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_105 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_106 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_107 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_108 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_109 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_11 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_110 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_111 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_112 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_113 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_114 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_115 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_116 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_117 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_118 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_119 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_12 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_120 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_121 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_122 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_123 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_124 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_125 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_126 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_127 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_13 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_14 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_15 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_16 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_17 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_18 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_19 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_2 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_20 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_21 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_22 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_23 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_24 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_25 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_26 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_27 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_28 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_29 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_3 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_30 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_31 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_32 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_33 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_34 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_35 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_36 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_37 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_38 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_39 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_4 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_40 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_41 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_42 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_43 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_44 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_45 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_46 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_47 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_48 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_49 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_5 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_50 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_51 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_52 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_53 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_54 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_55 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_56 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_57 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_58 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_59 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_6 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_60 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_61 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_62 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_63 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_64 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_65 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_66 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_67 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_68 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_69 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_7 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_70 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_71 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_72 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_73 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_74 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_75 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_76 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_77 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_78 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_79 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_8 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_80 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_81 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_82 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_83 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_84 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_85 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_86 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_87 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_88 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_89 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_9 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_90 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_91 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_92 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_93 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_94 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_95 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_96 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_97 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_98 = 64'hAAAAAAAAAAAAAAAA;
    pktStore_99 = 64'hAAAAAAAAAAAAAAAA;
    ptpCnt_r = 32'hAAAAAAAA;
    ptpCnt_r_clear_r = 1'h0;
    ptpCnt_r_incr_r = 1'h0;
    rdPtr_r = 4'hA;
    s1_r = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s1_sop_r = 1'h0;
    s1_valid = 1'h0;
    s2_r = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s2_sop_r = 1'h0;
    s2_valid = 1'h0;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    sin_sop_r = 1'h0;
    timeStamps_0 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_1 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_2 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_3 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_4 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_5 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_6 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_7 = 80'hAAAAAAAAAAAAAAAAAAAA;
    wrPtr_r = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd5 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd10 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd11 &&
	  saxi_a4rdAddr_q_0[11:10] == 2'b0)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	  !beatCnt_r_37_ULE_16___d398)
	$display("Invalid size of ptp packet");
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] != 6'd6 &&
	  saxi_a4wrAddr_q_0[7:2] != 6'd7)
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkIngressCapture_8

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// mac_s_axis_tready              O     1 reg
// usr_m_axis_tvalid              O     1
// usr_m_axis_tdata               O   128 reg
// usr_m_axis_tuser               O    80 reg
// usr_m_axis_tkeep               O    16 reg
// usr_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// mac_s_axis_tdata               I   128
// mac_s_axis_tuser               I    80 reg
// mac_s_axis_tkeep               I    16 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// mac_s_axis_tvalid              I     1
// mac_s_axis_tlast               I     1 reg
// usr_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkIngressCapture_16(s_axi_aclk,
			   s_axi_aresetn,

			   mac_s_axis_tvalid,

			   mac_s_axis_tready,

			   mac_s_axis_tdata,

			   mac_s_axis_tuser,

			   mac_s_axis_tkeep,

			   mac_s_axis_tlast,

			   usr_m_axis_tvalid,

			   usr_m_axis_tready,

			   usr_m_axis_tdata,

			   usr_m_axis_tuser,

			   usr_m_axis_tkeep,

			   usr_m_axis_tlast,

			   s_axi_awvalid,

			   s_axi_awready,

			   s_axi_awaddr,

			   s_axi_awprot,

			   s_axi_wvalid,

			   s_axi_wready,

			   s_axi_wdata,

			   s_axi_wstrb,

			   s_axi_bvalid,

			   s_axi_bready,

			   s_axi_bresp,

			   s_axi_arvalid,

			   s_axi_arready,

			   s_axi_araddr,

			   s_axi_arprot,

			   s_axi_rvalid,

			   s_axi_rready,

			   s_axi_rdata,

			   s_axi_rresp);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method mac_s_axis_mTVALID
  input  mac_s_axis_tvalid;

  // value method mac_s_axis_sTREADY
  output mac_s_axis_tready;

  // action method mac_s_axis_mTDATA
  input  [127 : 0] mac_s_axis_tdata;

  // action method mac_s_axis_mTSTRB

  // action method mac_s_axis_mTUSER
  input  [79 : 0] mac_s_axis_tuser;

  // action method mac_s_axis_mTKEEP
  input  [15 : 0] mac_s_axis_tkeep;

  // action method mac_s_axis_mTLAST
  input  mac_s_axis_tlast;

  // value method usr_m_axis_mTVALID
  output usr_m_axis_tvalid;

  // action method usr_m_axis_sTREADY
  input  usr_m_axis_tready;

  // value method usr_m_axis_mTDATA
  output [127 : 0] usr_m_axis_tdata;

  // value method usr_m_axis_mTSTRB

  // value method usr_m_axis_mTUSER
  output [79 : 0] usr_m_axis_tuser;

  // value method usr_m_axis_mTKEEP
  output [15 : 0] usr_m_axis_tkeep;

  // value method usr_m_axis_mTLAST
  output usr_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [127 : 0] usr_m_axis_tdata;
  wire [79 : 0] usr_m_axis_tuser;
  wire [31 : 0] s_axi_rdata;
  wire [15 : 0] usr_m_axis_tkeep;
  wire [1 : 0] s_axi_bresp, s_axi_rresp;
  wire mac_s_axis_tready,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       usr_m_axis_tlast,
       usr_m_axis_tvalid;

  // inlined wires
  wire ackPkt_pw_whas,
       capPkt_pw_whas,
       pktCnt_r_incr_r_1_whas,
       pktDrop_r_incr_r_1_whas,
       pktError_r_incr_r_1_whas,
       ptpCnt_r_incr_r_1_whas,
       s1_valid_port1__read,
       s1_valid_port2__read,
       s2_valid_port1__read,
       s2_valid_port2__read,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beatCnt_r
  reg [3 : 0] beatCnt_r;
  wire [3 : 0] beatCnt_r_D_IN;
  wire beatCnt_r_EN;

  // register capture_r
  reg capture_r;
  wire capture_r_D_IN, capture_r_EN;

  // register empty_r
  reg empty_r;
  wire empty_r_D_IN, empty_r_EN;

  // register enable_r
  reg enable_r;
  wire enable_r_D_IN, enable_r_EN;

  // register full_r
  reg full_r;
  wire full_r_D_IN, full_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktDrop_r
  reg [31 : 0] pktDrop_r;
  wire [31 : 0] pktDrop_r_D_IN;
  wire pktDrop_r_EN;

  // register pktDrop_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktDrop_r_clear_r;
  wire pktDrop_r_clear_r_D_IN, pktDrop_r_clear_r_EN;

  // register pktDrop_r_incr_r
  reg pktDrop_r_incr_r;
  wire pktDrop_r_incr_r_D_IN, pktDrop_r_incr_r_EN;

  // register pktError_r
  reg [31 : 0] pktError_r;
  wire [31 : 0] pktError_r_D_IN;
  wire pktError_r_EN;

  // register pktError_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktError_r_clear_r;
  wire pktError_r_clear_r_D_IN, pktError_r_clear_r_EN;

  // register pktError_r_incr_r
  reg pktError_r_incr_r;
  wire pktError_r_incr_r_D_IN, pktError_r_incr_r_EN;

  // register pktStore_0
  reg [127 : 0] pktStore_0;
  wire [127 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [127 : 0] pktStore_1;
  wire [127 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [127 : 0] pktStore_10;
  wire [127 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [127 : 0] pktStore_11;
  wire [127 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [127 : 0] pktStore_12;
  wire [127 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [127 : 0] pktStore_13;
  wire [127 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [127 : 0] pktStore_14;
  wire [127 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [127 : 0] pktStore_15;
  wire [127 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [127 : 0] pktStore_16;
  wire [127 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [127 : 0] pktStore_17;
  wire [127 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [127 : 0] pktStore_18;
  wire [127 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [127 : 0] pktStore_19;
  wire [127 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [127 : 0] pktStore_2;
  wire [127 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [127 : 0] pktStore_20;
  wire [127 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [127 : 0] pktStore_21;
  wire [127 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [127 : 0] pktStore_22;
  wire [127 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [127 : 0] pktStore_23;
  wire [127 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [127 : 0] pktStore_24;
  wire [127 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [127 : 0] pktStore_25;
  wire [127 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [127 : 0] pktStore_26;
  wire [127 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [127 : 0] pktStore_27;
  wire [127 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [127 : 0] pktStore_28;
  wire [127 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [127 : 0] pktStore_29;
  wire [127 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [127 : 0] pktStore_3;
  wire [127 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [127 : 0] pktStore_30;
  wire [127 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [127 : 0] pktStore_31;
  wire [127 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_32
  reg [127 : 0] pktStore_32;
  wire [127 : 0] pktStore_32_D_IN;
  wire pktStore_32_EN;

  // register pktStore_33
  reg [127 : 0] pktStore_33;
  wire [127 : 0] pktStore_33_D_IN;
  wire pktStore_33_EN;

  // register pktStore_34
  reg [127 : 0] pktStore_34;
  wire [127 : 0] pktStore_34_D_IN;
  wire pktStore_34_EN;

  // register pktStore_35
  reg [127 : 0] pktStore_35;
  wire [127 : 0] pktStore_35_D_IN;
  wire pktStore_35_EN;

  // register pktStore_36
  reg [127 : 0] pktStore_36;
  wire [127 : 0] pktStore_36_D_IN;
  wire pktStore_36_EN;

  // register pktStore_37
  reg [127 : 0] pktStore_37;
  wire [127 : 0] pktStore_37_D_IN;
  wire pktStore_37_EN;

  // register pktStore_38
  reg [127 : 0] pktStore_38;
  wire [127 : 0] pktStore_38_D_IN;
  wire pktStore_38_EN;

  // register pktStore_39
  reg [127 : 0] pktStore_39;
  wire [127 : 0] pktStore_39_D_IN;
  wire pktStore_39_EN;

  // register pktStore_4
  reg [127 : 0] pktStore_4;
  wire [127 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_40
  reg [127 : 0] pktStore_40;
  wire [127 : 0] pktStore_40_D_IN;
  wire pktStore_40_EN;

  // register pktStore_41
  reg [127 : 0] pktStore_41;
  wire [127 : 0] pktStore_41_D_IN;
  wire pktStore_41_EN;

  // register pktStore_42
  reg [127 : 0] pktStore_42;
  wire [127 : 0] pktStore_42_D_IN;
  wire pktStore_42_EN;

  // register pktStore_43
  reg [127 : 0] pktStore_43;
  wire [127 : 0] pktStore_43_D_IN;
  wire pktStore_43_EN;

  // register pktStore_44
  reg [127 : 0] pktStore_44;
  wire [127 : 0] pktStore_44_D_IN;
  wire pktStore_44_EN;

  // register pktStore_45
  reg [127 : 0] pktStore_45;
  wire [127 : 0] pktStore_45_D_IN;
  wire pktStore_45_EN;

  // register pktStore_46
  reg [127 : 0] pktStore_46;
  wire [127 : 0] pktStore_46_D_IN;
  wire pktStore_46_EN;

  // register pktStore_47
  reg [127 : 0] pktStore_47;
  wire [127 : 0] pktStore_47_D_IN;
  wire pktStore_47_EN;

  // register pktStore_48
  reg [127 : 0] pktStore_48;
  wire [127 : 0] pktStore_48_D_IN;
  wire pktStore_48_EN;

  // register pktStore_49
  reg [127 : 0] pktStore_49;
  wire [127 : 0] pktStore_49_D_IN;
  wire pktStore_49_EN;

  // register pktStore_5
  reg [127 : 0] pktStore_5;
  wire [127 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_50
  reg [127 : 0] pktStore_50;
  wire [127 : 0] pktStore_50_D_IN;
  wire pktStore_50_EN;

  // register pktStore_51
  reg [127 : 0] pktStore_51;
  wire [127 : 0] pktStore_51_D_IN;
  wire pktStore_51_EN;

  // register pktStore_52
  reg [127 : 0] pktStore_52;
  wire [127 : 0] pktStore_52_D_IN;
  wire pktStore_52_EN;

  // register pktStore_53
  reg [127 : 0] pktStore_53;
  wire [127 : 0] pktStore_53_D_IN;
  wire pktStore_53_EN;

  // register pktStore_54
  reg [127 : 0] pktStore_54;
  wire [127 : 0] pktStore_54_D_IN;
  wire pktStore_54_EN;

  // register pktStore_55
  reg [127 : 0] pktStore_55;
  wire [127 : 0] pktStore_55_D_IN;
  wire pktStore_55_EN;

  // register pktStore_56
  reg [127 : 0] pktStore_56;
  wire [127 : 0] pktStore_56_D_IN;
  wire pktStore_56_EN;

  // register pktStore_57
  reg [127 : 0] pktStore_57;
  wire [127 : 0] pktStore_57_D_IN;
  wire pktStore_57_EN;

  // register pktStore_58
  reg [127 : 0] pktStore_58;
  wire [127 : 0] pktStore_58_D_IN;
  wire pktStore_58_EN;

  // register pktStore_59
  reg [127 : 0] pktStore_59;
  wire [127 : 0] pktStore_59_D_IN;
  wire pktStore_59_EN;

  // register pktStore_6
  reg [127 : 0] pktStore_6;
  wire [127 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_60
  reg [127 : 0] pktStore_60;
  wire [127 : 0] pktStore_60_D_IN;
  wire pktStore_60_EN;

  // register pktStore_61
  reg [127 : 0] pktStore_61;
  wire [127 : 0] pktStore_61_D_IN;
  wire pktStore_61_EN;

  // register pktStore_62
  reg [127 : 0] pktStore_62;
  wire [127 : 0] pktStore_62_D_IN;
  wire pktStore_62_EN;

  // register pktStore_63
  reg [127 : 0] pktStore_63;
  wire [127 : 0] pktStore_63_D_IN;
  wire pktStore_63_EN;

  // register pktStore_7
  reg [127 : 0] pktStore_7;
  wire [127 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [127 : 0] pktStore_8;
  wire [127 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [127 : 0] pktStore_9;
  wire [127 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register ptpCnt_r
  reg [31 : 0] ptpCnt_r;
  wire [31 : 0] ptpCnt_r_D_IN;
  wire ptpCnt_r_EN;

  // register ptpCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg ptpCnt_r_clear_r;
  wire ptpCnt_r_clear_r_D_IN, ptpCnt_r_clear_r_EN;

  // register ptpCnt_r_incr_r
  reg ptpCnt_r_incr_r;
  wire ptpCnt_r_incr_r_D_IN, ptpCnt_r_incr_r_EN;

  // register rdPtr_r
  reg [3 : 0] rdPtr_r;
  wire [3 : 0] rdPtr_r_D_IN;
  wire rdPtr_r_EN;

  // register s1_r
  reg [224 : 0] s1_r;
  wire [224 : 0] s1_r_D_IN;
  wire s1_r_EN;

  // register s1_sop_r
  reg s1_sop_r;
  wire s1_sop_r_D_IN, s1_sop_r_EN;

  // register s1_valid
  reg s1_valid;
  wire s1_valid_D_IN, s1_valid_EN;

  // register s2_r
  reg [224 : 0] s2_r;
  wire [224 : 0] s2_r_D_IN;
  wire s2_r_EN;

  // register s2_sop_r
  reg s2_sop_r;
  wire s2_sop_r_D_IN, s2_sop_r_EN;

  // register s2_valid
  reg s2_valid;
  wire s2_valid_D_IN, s2_valid_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register sin_sop_r
  reg sin_sop_r;
  wire sin_sop_r_D_IN, sin_sop_r_EN;

  // register timeStamps_0
  reg [79 : 0] timeStamps_0;
  wire [79 : 0] timeStamps_0_D_IN;
  wire timeStamps_0_EN;

  // register timeStamps_1
  reg [79 : 0] timeStamps_1;
  wire [79 : 0] timeStamps_1_D_IN;
  wire timeStamps_1_EN;

  // register timeStamps_2
  reg [79 : 0] timeStamps_2;
  wire [79 : 0] timeStamps_2_D_IN;
  wire timeStamps_2_EN;

  // register timeStamps_3
  reg [79 : 0] timeStamps_3;
  wire [79 : 0] timeStamps_3_D_IN;
  wire timeStamps_3_EN;

  // register timeStamps_4
  reg [79 : 0] timeStamps_4;
  wire [79 : 0] timeStamps_4_D_IN;
  wire timeStamps_4_EN;

  // register timeStamps_5
  reg [79 : 0] timeStamps_5;
  wire [79 : 0] timeStamps_5_D_IN;
  wire timeStamps_5_EN;

  // register timeStamps_6
  reg [79 : 0] timeStamps_6;
  wire [79 : 0] timeStamps_6_D_IN;
  wire timeStamps_6_EN;

  // register timeStamps_7
  reg [79 : 0] timeStamps_7;
  wire [79 : 0] timeStamps_7_D_IN;
  wire timeStamps_7_EN;

  // register wrPtr_r
  reg [3 : 0] wrPtr_r;
  wire [3 : 0] wrPtr_r_D_IN;
  wire wrPtr_r_EN;

  // ports of submodule s0Meta_f
  wire [3 : 0] s0Meta_f_D_IN, s0Meta_f_D_OUT;
  wire s0Meta_f_CLR,
       s0Meta_f_DEQ,
       s0Meta_f_EMPTY_N,
       s0Meta_f_ENQ,
       s0Meta_f_FULL_N;

  // ports of submodule s0_f
  wire [224 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captureAndMove,
       CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_decodeAndMove,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktDrop_r_setClear,
       CAN_FIRE_RL_pktDrop_r_update,
       CAN_FIRE_RL_pktError_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktError_r_setClear,
       CAN_FIRE_RL_pktError_r_update,
       CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_ptpCnt_r_setClear,
       CAN_FIRE_RL_ptpCnt_r_update,
       CAN_FIRE_RL_s2Taken,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_RL_updateState,
       CAN_FIRE_mac_s_axis_mTDATA,
       CAN_FIRE_mac_s_axis_mTKEEP,
       CAN_FIRE_mac_s_axis_mTLAST,
       CAN_FIRE_mac_s_axis_mTSTRB,
       CAN_FIRE_mac_s_axis_mTUSER,
       CAN_FIRE_mac_s_axis_mTVALID,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_usr_m_axis_sTREADY,
       WILL_FIRE_RL_captureAndMove,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_decodeAndMove,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktDrop_r_setClear,
       WILL_FIRE_RL_pktDrop_r_update,
       WILL_FIRE_RL_pktError_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktError_r_setClear,
       WILL_FIRE_RL_pktError_r_update,
       WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_ptpCnt_r_setClear,
       WILL_FIRE_RL_ptpCnt_r_update,
       WILL_FIRE_RL_s2Taken,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_RL_updateState,
       WILL_FIRE_mac_s_axis_mTDATA,
       WILL_FIRE_mac_s_axis_mTKEEP,
       WILL_FIRE_mac_s_axis_mTLAST,
       WILL_FIRE_mac_s_axis_mTSTRB,
       WILL_FIRE_mac_s_axis_mTUSER,
       WILL_FIRE_mac_s_axis_mTVALID,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_usr_m_axis_sTREADY;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_2,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_2,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] pkret__h20668, tsret__h20667, v__h17878;
  wire [47 : 0] dmac_mac__h2984;
  wire [31 : 0] cpret__h17942, cpret__h17954, x_data__h20757;
  wire [11 : 0] x__h20791, x__h23427;
  wire [5 : 0] x__h10331;
  wire [3 : 0] x__h9882;
  wire beatCnt_r_37_ULE_8___d270,
       s1_sop_r_83_AND_s0Meta_f_first__93_BIT_3_94_OR_ETC___d306;

  // action method mac_s_axis_mTVALID
  assign CAN_FIRE_mac_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTVALID = mac_s_axis_tvalid ;

  // value method mac_s_axis_sTREADY
  assign mac_s_axis_tready = s0_f_FULL_N ;

  // action method mac_s_axis_mTDATA
  assign CAN_FIRE_mac_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTDATA = 1'd1 ;

  // action method mac_s_axis_mTSTRB
  assign CAN_FIRE_mac_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTSTRB = 1'd1 ;

  // action method mac_s_axis_mTUSER
  assign CAN_FIRE_mac_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTUSER = 1'd1 ;

  // action method mac_s_axis_mTKEEP
  assign CAN_FIRE_mac_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTKEEP = 1'd1 ;

  // action method mac_s_axis_mTLAST
  assign CAN_FIRE_mac_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTLAST = mac_s_axis_tlast ;

  // value method usr_m_axis_mTVALID
  assign usr_m_axis_tvalid = s2_valid ;

  // action method usr_m_axis_sTREADY
  assign CAN_FIRE_usr_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_usr_m_axis_sTREADY = usr_m_axis_tready ;

  // value method usr_m_axis_mTDATA
  assign usr_m_axis_tdata = s2_r[224:97] ;

  // value method usr_m_axis_mTUSER
  assign usr_m_axis_tuser = s2_r[80:1] ;

  // value method usr_m_axis_mTKEEP
  assign usr_m_axis_tkeep = s2_r[96:81] ;

  // value method usr_m_axis_mTLAST
  assign usr_m_axis_tlast = s2_valid && s2_r[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // submodule s0Meta_f
  FIFO2 #(.width(32'd4), .guarded(32'd1)) s0Meta_f(.RST(s_axi_aresetn__DELAYED),
						   .CLK(s_axi_aclk),
						   .D_IN(s0Meta_f_D_IN),
						   .ENQ(s0Meta_f_ENQ),
						   .DEQ(s0Meta_f_DEQ),
						   .CLR(s0Meta_f_CLR),
						   .D_OUT(s0Meta_f_D_OUT),
						   .FULL_N(s0Meta_f_FULL_N),
						   .EMPTY_N(s0Meta_f_EMPTY_N));

  // submodule s0_f
  FIFO2 #(.width(32'd225), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_ptpCnt_r_update
  assign CAN_FIRE_RL_ptpCnt_r_update = ptpCnt_r_clear_r || ptpCnt_r_incr_r ;
  assign WILL_FIRE_RL_ptpCnt_r_update = CAN_FIRE_RL_ptpCnt_r_update ;

  // rule RL_pktDrop_r_update
  assign CAN_FIRE_RL_pktDrop_r_update =
	     pktDrop_r_clear_r || pktDrop_r_incr_r ;
  assign WILL_FIRE_RL_pktDrop_r_update = CAN_FIRE_RL_pktDrop_r_update ;

  // rule RL_pktError_r_update
  assign CAN_FIRE_RL_pktError_r_update =
	     pktError_r_clear_r || pktError_r_incr_r ;
  assign WILL_FIRE_RL_pktError_r_update = CAN_FIRE_RL_pktError_r_update ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways =
	     s0_f_FULL_N && (!sin_sop_r || s0Meta_f_FULL_N) &&
	     mac_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s2_valid && usr_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s2_valid ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s2_valid ;

  // rule RL_s2Taken
  assign CAN_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign WILL_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_captureAndMove
  assign CAN_FIRE_RL_captureAndMove = s1_valid && !s2_valid_port1__read ;
  assign WILL_FIRE_RL_captureAndMove = CAN_FIRE_RL_captureAndMove ;

  // rule RL_decodeAndMove
  assign CAN_FIRE_RL_decodeAndMove =
	     s0_f_EMPTY_N && (!s1_sop_r || s0Meta_f_EMPTY_N) &&
	     !s1_valid_port1__read ;
  assign WILL_FIRE_RL_decodeAndMove = CAN_FIRE_RL_decodeAndMove ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_updateState
  assign CAN_FIRE_RL_updateState = 1'd1 ;
  assign WILL_FIRE_RL_updateState = 1'd1 ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrData_q_0[1] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_ptpCnt_r_setClear
  assign CAN_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_ptpCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktDrop_r_setClear
  assign CAN_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktDrop_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktError_r_setClear
  assign CAN_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktError_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_2 :
	       34'd0 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 = { 2'd0, x_data__h20757 } ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_2 :
	       36'd0 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_decodeAndMove && s1_sop_r ;
  assign ptpCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_decodeAndMove && s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) ;
  assign pktDrop_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && full_r && capture_r && s2_r[0] ||
	     WILL_FIRE_RL_decodeAndMove &&
	     s1_sop_r_83_AND_s0Meta_f_first__93_BIT_3_94_OR_ETC___d306 ;
  assign pktError_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     !beatCnt_r_37_ULE_8___d270 ;
  assign ackPkt_pw_whas =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 ;
  assign capPkt_pw_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     beatCnt_r_37_ULE_8___d270 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;
  assign s1_valid_port1__read = !CAN_FIRE_RL_captureAndMove && s1_valid ;
  assign s1_valid_port2__read =
	     CAN_FIRE_RL_decodeAndMove || s1_valid_port1__read ;
  assign s2_valid_port1__read = !CAN_FIRE_RL_mst_ifc_doAlways && s2_valid ;
  assign s2_valid_port2__read =
	     CAN_FIRE_RL_captureAndMove || s2_valid_port1__read ;

  // register beatCnt_r
  assign beatCnt_r_D_IN =
	     s1_r[0] ?
	       4'd0 :
	       beatCnt_r + (beatCnt_r_37_ULE_8___d270 ? 4'd1 : 4'd0) ;
  assign beatCnt_r_EN = WILL_FIRE_RL_captureAndMove && capture_r && !full_r ;

  // register capture_r
  assign capture_r_D_IN =
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     enable_r ;
  assign capture_r_EN = pktCnt_r_incr_r_1_whas ;

  // register empty_r
  assign empty_r_D_IN =
	     ackPkt_pw_whas && !capPkt_pw_whas && rdPtr_r + 4'd1 == wrPtr_r ;
  assign empty_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register enable_r
  assign enable_r_D_IN = saxi_a4wrData_q_0[0] ;
  assign enable_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 ;

  // register full_r
  assign full_r_D_IN =
	     (!ackPkt_pw_whas || capPkt_pw_whas) &&
	     wrPtr_r + 4'd1 == { ~rdPtr_r[3], rdPtr_r[2:0] } ;
  assign full_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktDrop_r
  assign pktDrop_r_D_IN = pktDrop_r_clear_r ? 32'd0 : pktDrop_r + 32'd1 ;
  assign pktDrop_r_EN = CAN_FIRE_RL_pktDrop_r_update ;

  // register pktDrop_r_clear_r
  assign pktDrop_r_clear_r_D_IN = WILL_FIRE_RL_pktDrop_r_setClear ;
  assign pktDrop_r_clear_r_EN =
	     WILL_FIRE_RL_pktDrop_r_update && pktDrop_r_clear_r ||
	     WILL_FIRE_RL_pktDrop_r_setClear ;

  // register pktDrop_r_incr_r
  assign pktDrop_r_incr_r_D_IN = pktDrop_r_incr_r_1_whas ;
  assign pktDrop_r_incr_r_EN = 1'd1 ;

  // register pktError_r
  assign pktError_r_D_IN = pktError_r_clear_r ? 32'd0 : pktError_r + 32'd1 ;
  assign pktError_r_EN = CAN_FIRE_RL_pktError_r_update ;

  // register pktError_r_clear_r
  assign pktError_r_clear_r_D_IN = WILL_FIRE_RL_pktError_r_setClear ;
  assign pktError_r_clear_r_EN =
	     WILL_FIRE_RL_pktError_r_update && pktError_r_clear_r ||
	     WILL_FIRE_RL_pktError_r_setClear ;

  // register pktError_r_incr_r
  assign pktError_r_incr_r_D_IN = pktError_r_incr_r_1_whas ;
  assign pktError_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = s1_r[224:97] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd0 && capture_r &&
	     !full_r ;

  // register pktStore_1
  assign pktStore_1_D_IN = s1_r[224:97] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd1 && capture_r &&
	     !full_r ;

  // register pktStore_10
  assign pktStore_10_D_IN = s1_r[224:97] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd10 && capture_r &&
	     !full_r ;

  // register pktStore_11
  assign pktStore_11_D_IN = s1_r[224:97] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd11 && capture_r &&
	     !full_r ;

  // register pktStore_12
  assign pktStore_12_D_IN = s1_r[224:97] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd12 && capture_r &&
	     !full_r ;

  // register pktStore_13
  assign pktStore_13_D_IN = s1_r[224:97] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd13 && capture_r &&
	     !full_r ;

  // register pktStore_14
  assign pktStore_14_D_IN = s1_r[224:97] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd14 && capture_r &&
	     !full_r ;

  // register pktStore_15
  assign pktStore_15_D_IN = s1_r[224:97] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd15 && capture_r &&
	     !full_r ;

  // register pktStore_16
  assign pktStore_16_D_IN = s1_r[224:97] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd16 && capture_r &&
	     !full_r ;

  // register pktStore_17
  assign pktStore_17_D_IN = s1_r[224:97] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd17 && capture_r &&
	     !full_r ;

  // register pktStore_18
  assign pktStore_18_D_IN = s1_r[224:97] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd18 && capture_r &&
	     !full_r ;

  // register pktStore_19
  assign pktStore_19_D_IN = s1_r[224:97] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd19 && capture_r &&
	     !full_r ;

  // register pktStore_2
  assign pktStore_2_D_IN = s1_r[224:97] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd2 && capture_r &&
	     !full_r ;

  // register pktStore_20
  assign pktStore_20_D_IN = s1_r[224:97] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd20 && capture_r &&
	     !full_r ;

  // register pktStore_21
  assign pktStore_21_D_IN = s1_r[224:97] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd21 && capture_r &&
	     !full_r ;

  // register pktStore_22
  assign pktStore_22_D_IN = s1_r[224:97] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd22 && capture_r &&
	     !full_r ;

  // register pktStore_23
  assign pktStore_23_D_IN = s1_r[224:97] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd23 && capture_r &&
	     !full_r ;

  // register pktStore_24
  assign pktStore_24_D_IN = s1_r[224:97] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd24 && capture_r &&
	     !full_r ;

  // register pktStore_25
  assign pktStore_25_D_IN = s1_r[224:97] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd25 && capture_r &&
	     !full_r ;

  // register pktStore_26
  assign pktStore_26_D_IN = s1_r[224:97] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd26 && capture_r &&
	     !full_r ;

  // register pktStore_27
  assign pktStore_27_D_IN = s1_r[224:97] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd27 && capture_r &&
	     !full_r ;

  // register pktStore_28
  assign pktStore_28_D_IN = s1_r[224:97] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd28 && capture_r &&
	     !full_r ;

  // register pktStore_29
  assign pktStore_29_D_IN = s1_r[224:97] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd29 && capture_r &&
	     !full_r ;

  // register pktStore_3
  assign pktStore_3_D_IN = s1_r[224:97] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd3 && capture_r &&
	     !full_r ;

  // register pktStore_30
  assign pktStore_30_D_IN = s1_r[224:97] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd30 && capture_r &&
	     !full_r ;

  // register pktStore_31
  assign pktStore_31_D_IN = s1_r[224:97] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd31 && capture_r &&
	     !full_r ;

  // register pktStore_32
  assign pktStore_32_D_IN = s1_r[224:97] ;
  assign pktStore_32_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd32 && capture_r &&
	     !full_r ;

  // register pktStore_33
  assign pktStore_33_D_IN = s1_r[224:97] ;
  assign pktStore_33_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd33 && capture_r &&
	     !full_r ;

  // register pktStore_34
  assign pktStore_34_D_IN = s1_r[224:97] ;
  assign pktStore_34_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd34 && capture_r &&
	     !full_r ;

  // register pktStore_35
  assign pktStore_35_D_IN = s1_r[224:97] ;
  assign pktStore_35_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd35 && capture_r &&
	     !full_r ;

  // register pktStore_36
  assign pktStore_36_D_IN = s1_r[224:97] ;
  assign pktStore_36_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd36 && capture_r &&
	     !full_r ;

  // register pktStore_37
  assign pktStore_37_D_IN = s1_r[224:97] ;
  assign pktStore_37_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd37 && capture_r &&
	     !full_r ;

  // register pktStore_38
  assign pktStore_38_D_IN = s1_r[224:97] ;
  assign pktStore_38_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd38 && capture_r &&
	     !full_r ;

  // register pktStore_39
  assign pktStore_39_D_IN = s1_r[224:97] ;
  assign pktStore_39_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd39 && capture_r &&
	     !full_r ;

  // register pktStore_4
  assign pktStore_4_D_IN = s1_r[224:97] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd4 && capture_r &&
	     !full_r ;

  // register pktStore_40
  assign pktStore_40_D_IN = s1_r[224:97] ;
  assign pktStore_40_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd40 && capture_r &&
	     !full_r ;

  // register pktStore_41
  assign pktStore_41_D_IN = s1_r[224:97] ;
  assign pktStore_41_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd41 && capture_r &&
	     !full_r ;

  // register pktStore_42
  assign pktStore_42_D_IN = s1_r[224:97] ;
  assign pktStore_42_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd42 && capture_r &&
	     !full_r ;

  // register pktStore_43
  assign pktStore_43_D_IN = s1_r[224:97] ;
  assign pktStore_43_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd43 && capture_r &&
	     !full_r ;

  // register pktStore_44
  assign pktStore_44_D_IN = s1_r[224:97] ;
  assign pktStore_44_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd44 && capture_r &&
	     !full_r ;

  // register pktStore_45
  assign pktStore_45_D_IN = s1_r[224:97] ;
  assign pktStore_45_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd45 && capture_r &&
	     !full_r ;

  // register pktStore_46
  assign pktStore_46_D_IN = s1_r[224:97] ;
  assign pktStore_46_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd46 && capture_r &&
	     !full_r ;

  // register pktStore_47
  assign pktStore_47_D_IN = s1_r[224:97] ;
  assign pktStore_47_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd47 && capture_r &&
	     !full_r ;

  // register pktStore_48
  assign pktStore_48_D_IN = s1_r[224:97] ;
  assign pktStore_48_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd48 && capture_r &&
	     !full_r ;

  // register pktStore_49
  assign pktStore_49_D_IN = s1_r[224:97] ;
  assign pktStore_49_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd49 && capture_r &&
	     !full_r ;

  // register pktStore_5
  assign pktStore_5_D_IN = s1_r[224:97] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd5 && capture_r &&
	     !full_r ;

  // register pktStore_50
  assign pktStore_50_D_IN = s1_r[224:97] ;
  assign pktStore_50_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd50 && capture_r &&
	     !full_r ;

  // register pktStore_51
  assign pktStore_51_D_IN = s1_r[224:97] ;
  assign pktStore_51_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd51 && capture_r &&
	     !full_r ;

  // register pktStore_52
  assign pktStore_52_D_IN = s1_r[224:97] ;
  assign pktStore_52_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd52 && capture_r &&
	     !full_r ;

  // register pktStore_53
  assign pktStore_53_D_IN = s1_r[224:97] ;
  assign pktStore_53_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd53 && capture_r &&
	     !full_r ;

  // register pktStore_54
  assign pktStore_54_D_IN = s1_r[224:97] ;
  assign pktStore_54_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd54 && capture_r &&
	     !full_r ;

  // register pktStore_55
  assign pktStore_55_D_IN = s1_r[224:97] ;
  assign pktStore_55_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd55 && capture_r &&
	     !full_r ;

  // register pktStore_56
  assign pktStore_56_D_IN = s1_r[224:97] ;
  assign pktStore_56_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd56 && capture_r &&
	     !full_r ;

  // register pktStore_57
  assign pktStore_57_D_IN = s1_r[224:97] ;
  assign pktStore_57_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd57 && capture_r &&
	     !full_r ;

  // register pktStore_58
  assign pktStore_58_D_IN = s1_r[224:97] ;
  assign pktStore_58_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd58 && capture_r &&
	     !full_r ;

  // register pktStore_59
  assign pktStore_59_D_IN = s1_r[224:97] ;
  assign pktStore_59_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd59 && capture_r &&
	     !full_r ;

  // register pktStore_6
  assign pktStore_6_D_IN = s1_r[224:97] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd6 && capture_r &&
	     !full_r ;

  // register pktStore_60
  assign pktStore_60_D_IN = s1_r[224:97] ;
  assign pktStore_60_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd60 && capture_r &&
	     !full_r ;

  // register pktStore_61
  assign pktStore_61_D_IN = s1_r[224:97] ;
  assign pktStore_61_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd61 && capture_r &&
	     !full_r ;

  // register pktStore_62
  assign pktStore_62_D_IN = s1_r[224:97] ;
  assign pktStore_62_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd62 && capture_r &&
	     !full_r ;

  // register pktStore_63
  assign pktStore_63_D_IN = s1_r[224:97] ;
  assign pktStore_63_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd63 && capture_r &&
	     !full_r ;

  // register pktStore_7
  assign pktStore_7_D_IN = s1_r[224:97] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd7 && capture_r &&
	     !full_r ;

  // register pktStore_8
  assign pktStore_8_D_IN = s1_r[224:97] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd8 && capture_r &&
	     !full_r ;

  // register pktStore_9
  assign pktStore_9_D_IN = s1_r[224:97] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_captureAndMove && x__h10331 == 6'd9 && capture_r &&
	     !full_r ;

  // register ptpCnt_r
  assign ptpCnt_r_D_IN = ptpCnt_r_clear_r ? 32'd0 : ptpCnt_r + 32'd1 ;
  assign ptpCnt_r_EN = CAN_FIRE_RL_ptpCnt_r_update ;

  // register ptpCnt_r_clear_r
  assign ptpCnt_r_clear_r_D_IN = WILL_FIRE_RL_ptpCnt_r_setClear ;
  assign ptpCnt_r_clear_r_EN =
	     WILL_FIRE_RL_ptpCnt_r_update && ptpCnt_r_clear_r ||
	     WILL_FIRE_RL_ptpCnt_r_setClear ;

  // register ptpCnt_r_incr_r
  assign ptpCnt_r_incr_r_D_IN = ptpCnt_r_incr_r_1_whas ;
  assign ptpCnt_r_incr_r_EN = 1'd1 ;

  // register rdPtr_r
  assign rdPtr_r_D_IN = rdPtr_r + 4'd1 ;
  assign rdPtr_r_EN = ackPkt_pw_whas ;

  // register s1_r
  assign s1_r_D_IN = s0_f_D_OUT ;
  assign s1_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_sop_r
  assign s1_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign s1_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_valid
  assign s1_valid_D_IN = s1_valid_port2__read ;
  assign s1_valid_EN = 1'b1 ;

  // register s2_r
  assign s2_r_D_IN = s1_r ;
  assign s2_r_EN = CAN_FIRE_RL_captureAndMove ;

  // register s2_sop_r
  assign s2_sop_r_D_IN = s1_sop_r ;
  assign s2_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s2_valid
  assign s2_valid_D_IN = s2_valid_port2__read ;
  assign s2_valid_EN = 1'b1 ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_2:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      MUX_saxi_a4rdResp_q_0_write_1__SEL_2:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_2:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      MUX_saxi_a4wrData_q_0_write_1__SEL_2:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register sin_sop_r
  assign sin_sop_r_D_IN = mac_s_axis_tlast ;
  assign sin_sop_r_EN = CAN_FIRE_RL_slv_ifc_doAlways ;

  // register timeStamps_0
  assign timeStamps_0_D_IN = s1_r[80:1] ;
  assign timeStamps_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd0 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_1
  assign timeStamps_1_D_IN = s1_r[80:1] ;
  assign timeStamps_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd1 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_2
  assign timeStamps_2_D_IN = s1_r[80:1] ;
  assign timeStamps_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd2 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_3
  assign timeStamps_3_D_IN = s1_r[80:1] ;
  assign timeStamps_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd3 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_4
  assign timeStamps_4_D_IN = s1_r[80:1] ;
  assign timeStamps_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd4 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_5
  assign timeStamps_5_D_IN = s1_r[80:1] ;
  assign timeStamps_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd5 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_6
  assign timeStamps_6_D_IN = s1_r[80:1] ;
  assign timeStamps_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd6 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_7
  assign timeStamps_7_D_IN = s1_r[80:1] ;
  assign timeStamps_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h9882 == 4'd7 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register wrPtr_r
  assign wrPtr_r_D_IN = wrPtr_r + 4'd1 ;
  assign wrPtr_r_EN = capPkt_pw_whas ;

  // submodule s0Meta_f
  assign s0Meta_f_D_IN =
	     { dmac_mac__h2984 == 48'h011B19000000,
	       dmac_mac__h2984 == 48'h0180C200000E,
	       dmac_mac__h2984 == 48'h01005E000181,
	       dmac_mac__h2984 == 48'h01005E00006B } ;
  assign s0Meta_f_ENQ = WILL_FIRE_RL_slv_ifc_doAlways && sin_sop_r ;
  assign s0Meta_f_DEQ = pktCnt_r_incr_r_1_whas ;
  assign s0Meta_f_CLR = 1'b0 ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { mac_s_axis_tdata,
	       mac_s_axis_tkeep,
	       mac_s_axis_tuser,
	       mac_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_decodeAndMove ;
  assign s0_f_CLR = 1'b0 ;

  // remaining internal signals
  assign beatCnt_r_37_ULE_8___d270 = beatCnt_r <= 4'd8 ;
  assign cpret__h17942 = { 31'd0, enable_r } ;
  assign cpret__h17954 = empty_r ? 32'hFFFFFFFF : { 29'd0, rdPtr_r[2:0] } ;
  assign dmac_mac__h2984 =
	     { mac_s_axis_tdata[7:0],
	       mac_s_axis_tdata[15:8],
	       mac_s_axis_tdata[23:16],
	       mac_s_axis_tdata[31:24],
	       mac_s_axis_tdata[39:32],
	       mac_s_axis_tdata[47:40] } ;
  assign s1_sop_r_83_AND_s0Meta_f_first__93_BIT_3_94_OR_ETC___d306 =
	     s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     !enable_r ;
  assign x__h10331 = { wrPtr_r[2:0], beatCnt_r[2:0] } ;
  assign x__h20791 = { 5'd0, saxi_a4rdAddr_q_0[8:2] } ;
  assign x__h23427 = { 4'd0, saxi_a4rdAddr_q_0[9:2] } ;
  assign x__h9882 = { 1'd0, wrPtr_r[2:0] } ;
  assign x_data__h20757 =
	     (saxi_a4rdAddr_q_0[11:10] == 2'b01) ?
	       tsret__h20667 :
	       (saxi_a4rdAddr_q_0[11] ? pkret__h20668 : v__h17878) ;
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h17942 or
	  cpret__h17954 or pktCnt_r or ptpCnt_r or pktDrop_r or pktError_r)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h17878 = 32'd1447842644;
      6'd1: v__h17878 = 32'd825110857;
      6'd4: v__h17878 = cpret__h17942;
      6'd5: v__h17878 = cpret__h17954;
      6'd8: v__h17878 = pktCnt_r;
      6'd9: v__h17878 = ptpCnt_r;
      6'd10: v__h17878 = pktDrop_r;
      6'd11: v__h17878 = pktError_r;
      default: v__h17878 = 32'd0;
    endcase
  end
  always@(x__h20791 or
	  timeStamps_0 or
	  timeStamps_1 or
	  timeStamps_2 or
	  timeStamps_3 or
	  timeStamps_4 or timeStamps_5 or timeStamps_6 or timeStamps_7)
  begin
    case (x__h20791)
      12'd0: tsret__h20667 = timeStamps_0[31:0];
      12'd1: tsret__h20667 = timeStamps_0[63:32];
      12'd2: tsret__h20667 = { 16'd0, timeStamps_0[79:64] };
      12'd3, 12'd7, 12'd11, 12'd15, 12'd19, 12'd23, 12'd27, 12'd31:
	  tsret__h20667 = 32'd0;
      12'd4: tsret__h20667 = timeStamps_1[31:0];
      12'd5: tsret__h20667 = timeStamps_1[63:32];
      12'd6: tsret__h20667 = { 16'd0, timeStamps_1[79:64] };
      12'd8: tsret__h20667 = timeStamps_2[31:0];
      12'd9: tsret__h20667 = timeStamps_2[63:32];
      12'd10: tsret__h20667 = { 16'd0, timeStamps_2[79:64] };
      12'd12: tsret__h20667 = timeStamps_3[31:0];
      12'd13: tsret__h20667 = timeStamps_3[63:32];
      12'd14: tsret__h20667 = { 16'd0, timeStamps_3[79:64] };
      12'd16: tsret__h20667 = timeStamps_4[31:0];
      12'd17: tsret__h20667 = timeStamps_4[63:32];
      12'd18: tsret__h20667 = { 16'd0, timeStamps_4[79:64] };
      12'd20: tsret__h20667 = timeStamps_5[31:0];
      12'd21: tsret__h20667 = timeStamps_5[63:32];
      12'd22: tsret__h20667 = { 16'd0, timeStamps_5[79:64] };
      12'd24: tsret__h20667 = timeStamps_6[31:0];
      12'd25: tsret__h20667 = timeStamps_6[63:32];
      12'd26: tsret__h20667 = { 16'd0, timeStamps_6[79:64] };
      12'd28: tsret__h20667 = timeStamps_7[31:0];
      12'd29: tsret__h20667 = timeStamps_7[63:32];
      12'd30: tsret__h20667 = { 16'd0, timeStamps_7[79:64] };
      default: tsret__h20667 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h23427 or
	  pktStore_0 or
	  pktStore_1 or
	  pktStore_2 or
	  pktStore_3 or
	  pktStore_4 or
	  pktStore_5 or
	  pktStore_6 or
	  pktStore_7 or
	  pktStore_8 or
	  pktStore_9 or
	  pktStore_10 or
	  pktStore_11 or
	  pktStore_12 or
	  pktStore_13 or
	  pktStore_14 or
	  pktStore_15 or
	  pktStore_16 or
	  pktStore_17 or
	  pktStore_18 or
	  pktStore_19 or
	  pktStore_20 or
	  pktStore_21 or
	  pktStore_22 or
	  pktStore_23 or
	  pktStore_24 or
	  pktStore_25 or
	  pktStore_26 or
	  pktStore_27 or
	  pktStore_28 or
	  pktStore_29 or
	  pktStore_30 or
	  pktStore_31 or
	  pktStore_32 or
	  pktStore_33 or
	  pktStore_34 or
	  pktStore_35 or
	  pktStore_36 or
	  pktStore_37 or
	  pktStore_38 or
	  pktStore_39 or
	  pktStore_40 or
	  pktStore_41 or
	  pktStore_42 or
	  pktStore_43 or
	  pktStore_44 or
	  pktStore_45 or
	  pktStore_46 or
	  pktStore_47 or
	  pktStore_48 or
	  pktStore_49 or
	  pktStore_50 or
	  pktStore_51 or
	  pktStore_52 or
	  pktStore_53 or
	  pktStore_54 or
	  pktStore_55 or
	  pktStore_56 or
	  pktStore_57 or
	  pktStore_58 or
	  pktStore_59 or
	  pktStore_60 or pktStore_61 or pktStore_62 or pktStore_63)
  begin
    case (x__h23427)
      12'd0: pkret__h20668 = pktStore_0[31:0];
      12'd1: pkret__h20668 = pktStore_0[63:32];
      12'd2: pkret__h20668 = pktStore_0[95:64];
      12'd3: pkret__h20668 = pktStore_0[127:96];
      12'd4: pkret__h20668 = pktStore_1[31:0];
      12'd5: pkret__h20668 = pktStore_1[63:32];
      12'd6: pkret__h20668 = pktStore_1[95:64];
      12'd7: pkret__h20668 = pktStore_1[127:96];
      12'd8: pkret__h20668 = pktStore_2[31:0];
      12'd9: pkret__h20668 = pktStore_2[63:32];
      12'd10: pkret__h20668 = pktStore_2[95:64];
      12'd11: pkret__h20668 = pktStore_2[127:96];
      12'd12: pkret__h20668 = pktStore_3[31:0];
      12'd13: pkret__h20668 = pktStore_3[63:32];
      12'd14: pkret__h20668 = pktStore_3[95:64];
      12'd15: pkret__h20668 = pktStore_3[127:96];
      12'd16: pkret__h20668 = pktStore_4[31:0];
      12'd17: pkret__h20668 = pktStore_4[63:32];
      12'd18: pkret__h20668 = pktStore_4[95:64];
      12'd19: pkret__h20668 = pktStore_4[127:96];
      12'd20: pkret__h20668 = pktStore_5[31:0];
      12'd21: pkret__h20668 = pktStore_5[63:32];
      12'd22: pkret__h20668 = pktStore_5[95:64];
      12'd23: pkret__h20668 = pktStore_5[127:96];
      12'd24: pkret__h20668 = pktStore_6[31:0];
      12'd25: pkret__h20668 = pktStore_6[63:32];
      12'd26: pkret__h20668 = pktStore_6[95:64];
      12'd27: pkret__h20668 = pktStore_6[127:96];
      12'd28: pkret__h20668 = pktStore_7[31:0];
      12'd29: pkret__h20668 = pktStore_7[63:32];
      12'd30: pkret__h20668 = pktStore_7[95:64];
      12'd31: pkret__h20668 = pktStore_7[127:96];
      12'd32: pkret__h20668 = pktStore_8[31:0];
      12'd33: pkret__h20668 = pktStore_8[63:32];
      12'd34: pkret__h20668 = pktStore_8[95:64];
      12'd35: pkret__h20668 = pktStore_8[127:96];
      12'd36: pkret__h20668 = pktStore_9[31:0];
      12'd37: pkret__h20668 = pktStore_9[63:32];
      12'd38: pkret__h20668 = pktStore_9[95:64];
      12'd39: pkret__h20668 = pktStore_9[127:96];
      12'd40: pkret__h20668 = pktStore_10[31:0];
      12'd41: pkret__h20668 = pktStore_10[63:32];
      12'd42: pkret__h20668 = pktStore_10[95:64];
      12'd43: pkret__h20668 = pktStore_10[127:96];
      12'd44: pkret__h20668 = pktStore_11[31:0];
      12'd45: pkret__h20668 = pktStore_11[63:32];
      12'd46: pkret__h20668 = pktStore_11[95:64];
      12'd47: pkret__h20668 = pktStore_11[127:96];
      12'd48: pkret__h20668 = pktStore_12[31:0];
      12'd49: pkret__h20668 = pktStore_12[63:32];
      12'd50: pkret__h20668 = pktStore_12[95:64];
      12'd51: pkret__h20668 = pktStore_12[127:96];
      12'd52: pkret__h20668 = pktStore_13[31:0];
      12'd53: pkret__h20668 = pktStore_13[63:32];
      12'd54: pkret__h20668 = pktStore_13[95:64];
      12'd55: pkret__h20668 = pktStore_13[127:96];
      12'd56: pkret__h20668 = pktStore_14[31:0];
      12'd57: pkret__h20668 = pktStore_14[63:32];
      12'd58: pkret__h20668 = pktStore_14[95:64];
      12'd59: pkret__h20668 = pktStore_14[127:96];
      12'd60: pkret__h20668 = pktStore_15[31:0];
      12'd61: pkret__h20668 = pktStore_15[63:32];
      12'd62: pkret__h20668 = pktStore_15[95:64];
      12'd63: pkret__h20668 = pktStore_15[127:96];
      12'd64: pkret__h20668 = pktStore_16[31:0];
      12'd65: pkret__h20668 = pktStore_16[63:32];
      12'd66: pkret__h20668 = pktStore_16[95:64];
      12'd67: pkret__h20668 = pktStore_16[127:96];
      12'd68: pkret__h20668 = pktStore_17[31:0];
      12'd69: pkret__h20668 = pktStore_17[63:32];
      12'd70: pkret__h20668 = pktStore_17[95:64];
      12'd71: pkret__h20668 = pktStore_17[127:96];
      12'd72: pkret__h20668 = pktStore_18[31:0];
      12'd73: pkret__h20668 = pktStore_18[63:32];
      12'd74: pkret__h20668 = pktStore_18[95:64];
      12'd75: pkret__h20668 = pktStore_18[127:96];
      12'd76: pkret__h20668 = pktStore_19[31:0];
      12'd77: pkret__h20668 = pktStore_19[63:32];
      12'd78: pkret__h20668 = pktStore_19[95:64];
      12'd79: pkret__h20668 = pktStore_19[127:96];
      12'd80: pkret__h20668 = pktStore_20[31:0];
      12'd81: pkret__h20668 = pktStore_20[63:32];
      12'd82: pkret__h20668 = pktStore_20[95:64];
      12'd83: pkret__h20668 = pktStore_20[127:96];
      12'd84: pkret__h20668 = pktStore_21[31:0];
      12'd85: pkret__h20668 = pktStore_21[63:32];
      12'd86: pkret__h20668 = pktStore_21[95:64];
      12'd87: pkret__h20668 = pktStore_21[127:96];
      12'd88: pkret__h20668 = pktStore_22[31:0];
      12'd89: pkret__h20668 = pktStore_22[63:32];
      12'd90: pkret__h20668 = pktStore_22[95:64];
      12'd91: pkret__h20668 = pktStore_22[127:96];
      12'd92: pkret__h20668 = pktStore_23[31:0];
      12'd93: pkret__h20668 = pktStore_23[63:32];
      12'd94: pkret__h20668 = pktStore_23[95:64];
      12'd95: pkret__h20668 = pktStore_23[127:96];
      12'd96: pkret__h20668 = pktStore_24[31:0];
      12'd97: pkret__h20668 = pktStore_24[63:32];
      12'd98: pkret__h20668 = pktStore_24[95:64];
      12'd99: pkret__h20668 = pktStore_24[127:96];
      12'd100: pkret__h20668 = pktStore_25[31:0];
      12'd101: pkret__h20668 = pktStore_25[63:32];
      12'd102: pkret__h20668 = pktStore_25[95:64];
      12'd103: pkret__h20668 = pktStore_25[127:96];
      12'd104: pkret__h20668 = pktStore_26[31:0];
      12'd105: pkret__h20668 = pktStore_26[63:32];
      12'd106: pkret__h20668 = pktStore_26[95:64];
      12'd107: pkret__h20668 = pktStore_26[127:96];
      12'd108: pkret__h20668 = pktStore_27[31:0];
      12'd109: pkret__h20668 = pktStore_27[63:32];
      12'd110: pkret__h20668 = pktStore_27[95:64];
      12'd111: pkret__h20668 = pktStore_27[127:96];
      12'd112: pkret__h20668 = pktStore_28[31:0];
      12'd113: pkret__h20668 = pktStore_28[63:32];
      12'd114: pkret__h20668 = pktStore_28[95:64];
      12'd115: pkret__h20668 = pktStore_28[127:96];
      12'd116: pkret__h20668 = pktStore_29[31:0];
      12'd117: pkret__h20668 = pktStore_29[63:32];
      12'd118: pkret__h20668 = pktStore_29[95:64];
      12'd119: pkret__h20668 = pktStore_29[127:96];
      12'd120: pkret__h20668 = pktStore_30[31:0];
      12'd121: pkret__h20668 = pktStore_30[63:32];
      12'd122: pkret__h20668 = pktStore_30[95:64];
      12'd123: pkret__h20668 = pktStore_30[127:96];
      12'd124: pkret__h20668 = pktStore_31[31:0];
      12'd125: pkret__h20668 = pktStore_31[63:32];
      12'd126: pkret__h20668 = pktStore_31[95:64];
      12'd127: pkret__h20668 = pktStore_31[127:96];
      12'd128: pkret__h20668 = pktStore_32[31:0];
      12'd129: pkret__h20668 = pktStore_32[63:32];
      12'd130: pkret__h20668 = pktStore_32[95:64];
      12'd131: pkret__h20668 = pktStore_32[127:96];
      12'd132: pkret__h20668 = pktStore_33[31:0];
      12'd133: pkret__h20668 = pktStore_33[63:32];
      12'd134: pkret__h20668 = pktStore_33[95:64];
      12'd135: pkret__h20668 = pktStore_33[127:96];
      12'd136: pkret__h20668 = pktStore_34[31:0];
      12'd137: pkret__h20668 = pktStore_34[63:32];
      12'd138: pkret__h20668 = pktStore_34[95:64];
      12'd139: pkret__h20668 = pktStore_34[127:96];
      12'd140: pkret__h20668 = pktStore_35[31:0];
      12'd141: pkret__h20668 = pktStore_35[63:32];
      12'd142: pkret__h20668 = pktStore_35[95:64];
      12'd143: pkret__h20668 = pktStore_35[127:96];
      12'd144: pkret__h20668 = pktStore_36[31:0];
      12'd145: pkret__h20668 = pktStore_36[63:32];
      12'd146: pkret__h20668 = pktStore_36[95:64];
      12'd147: pkret__h20668 = pktStore_36[127:96];
      12'd148: pkret__h20668 = pktStore_37[31:0];
      12'd149: pkret__h20668 = pktStore_37[63:32];
      12'd150: pkret__h20668 = pktStore_37[95:64];
      12'd151: pkret__h20668 = pktStore_37[127:96];
      12'd152: pkret__h20668 = pktStore_38[31:0];
      12'd153: pkret__h20668 = pktStore_38[63:32];
      12'd154: pkret__h20668 = pktStore_38[95:64];
      12'd155: pkret__h20668 = pktStore_38[127:96];
      12'd156: pkret__h20668 = pktStore_39[31:0];
      12'd157: pkret__h20668 = pktStore_39[63:32];
      12'd158: pkret__h20668 = pktStore_39[95:64];
      12'd159: pkret__h20668 = pktStore_39[127:96];
      12'd160: pkret__h20668 = pktStore_40[31:0];
      12'd161: pkret__h20668 = pktStore_40[63:32];
      12'd162: pkret__h20668 = pktStore_40[95:64];
      12'd163: pkret__h20668 = pktStore_40[127:96];
      12'd164: pkret__h20668 = pktStore_41[31:0];
      12'd165: pkret__h20668 = pktStore_41[63:32];
      12'd166: pkret__h20668 = pktStore_41[95:64];
      12'd167: pkret__h20668 = pktStore_41[127:96];
      12'd168: pkret__h20668 = pktStore_42[31:0];
      12'd169: pkret__h20668 = pktStore_42[63:32];
      12'd170: pkret__h20668 = pktStore_42[95:64];
      12'd171: pkret__h20668 = pktStore_42[127:96];
      12'd172: pkret__h20668 = pktStore_43[31:0];
      12'd173: pkret__h20668 = pktStore_43[63:32];
      12'd174: pkret__h20668 = pktStore_43[95:64];
      12'd175: pkret__h20668 = pktStore_43[127:96];
      12'd176: pkret__h20668 = pktStore_44[31:0];
      12'd177: pkret__h20668 = pktStore_44[63:32];
      12'd178: pkret__h20668 = pktStore_44[95:64];
      12'd179: pkret__h20668 = pktStore_44[127:96];
      12'd180: pkret__h20668 = pktStore_45[31:0];
      12'd181: pkret__h20668 = pktStore_45[63:32];
      12'd182: pkret__h20668 = pktStore_45[95:64];
      12'd183: pkret__h20668 = pktStore_45[127:96];
      12'd184: pkret__h20668 = pktStore_46[31:0];
      12'd185: pkret__h20668 = pktStore_46[63:32];
      12'd186: pkret__h20668 = pktStore_46[95:64];
      12'd187: pkret__h20668 = pktStore_46[127:96];
      12'd188: pkret__h20668 = pktStore_47[31:0];
      12'd189: pkret__h20668 = pktStore_47[63:32];
      12'd190: pkret__h20668 = pktStore_47[95:64];
      12'd191: pkret__h20668 = pktStore_47[127:96];
      12'd192: pkret__h20668 = pktStore_48[31:0];
      12'd193: pkret__h20668 = pktStore_48[63:32];
      12'd194: pkret__h20668 = pktStore_48[95:64];
      12'd195: pkret__h20668 = pktStore_48[127:96];
      12'd196: pkret__h20668 = pktStore_49[31:0];
      12'd197: pkret__h20668 = pktStore_49[63:32];
      12'd198: pkret__h20668 = pktStore_49[95:64];
      12'd199: pkret__h20668 = pktStore_49[127:96];
      12'd200: pkret__h20668 = pktStore_50[31:0];
      12'd201: pkret__h20668 = pktStore_50[63:32];
      12'd202: pkret__h20668 = pktStore_50[95:64];
      12'd203: pkret__h20668 = pktStore_50[127:96];
      12'd204: pkret__h20668 = pktStore_51[31:0];
      12'd205: pkret__h20668 = pktStore_51[63:32];
      12'd206: pkret__h20668 = pktStore_51[95:64];
      12'd207: pkret__h20668 = pktStore_51[127:96];
      12'd208: pkret__h20668 = pktStore_52[31:0];
      12'd209: pkret__h20668 = pktStore_52[63:32];
      12'd210: pkret__h20668 = pktStore_52[95:64];
      12'd211: pkret__h20668 = pktStore_52[127:96];
      12'd212: pkret__h20668 = pktStore_53[31:0];
      12'd213: pkret__h20668 = pktStore_53[63:32];
      12'd214: pkret__h20668 = pktStore_53[95:64];
      12'd215: pkret__h20668 = pktStore_53[127:96];
      12'd216: pkret__h20668 = pktStore_54[31:0];
      12'd217: pkret__h20668 = pktStore_54[63:32];
      12'd218: pkret__h20668 = pktStore_54[95:64];
      12'd219: pkret__h20668 = pktStore_54[127:96];
      12'd220: pkret__h20668 = pktStore_55[31:0];
      12'd221: pkret__h20668 = pktStore_55[63:32];
      12'd222: pkret__h20668 = pktStore_55[95:64];
      12'd223: pkret__h20668 = pktStore_55[127:96];
      12'd224: pkret__h20668 = pktStore_56[31:0];
      12'd225: pkret__h20668 = pktStore_56[63:32];
      12'd226: pkret__h20668 = pktStore_56[95:64];
      12'd227: pkret__h20668 = pktStore_56[127:96];
      12'd228: pkret__h20668 = pktStore_57[31:0];
      12'd229: pkret__h20668 = pktStore_57[63:32];
      12'd230: pkret__h20668 = pktStore_57[95:64];
      12'd231: pkret__h20668 = pktStore_57[127:96];
      12'd232: pkret__h20668 = pktStore_58[31:0];
      12'd233: pkret__h20668 = pktStore_58[63:32];
      12'd234: pkret__h20668 = pktStore_58[95:64];
      12'd235: pkret__h20668 = pktStore_58[127:96];
      12'd236: pkret__h20668 = pktStore_59[31:0];
      12'd237: pkret__h20668 = pktStore_59[63:32];
      12'd238: pkret__h20668 = pktStore_59[95:64];
      12'd239: pkret__h20668 = pktStore_59[127:96];
      12'd240: pkret__h20668 = pktStore_60[31:0];
      12'd241: pkret__h20668 = pktStore_60[63:32];
      12'd242: pkret__h20668 = pktStore_60[95:64];
      12'd243: pkret__h20668 = pktStore_60[127:96];
      12'd244: pkret__h20668 = pktStore_61[31:0];
      12'd245: pkret__h20668 = pktStore_61[63:32];
      12'd246: pkret__h20668 = pktStore_61[95:64];
      12'd247: pkret__h20668 = pktStore_61[127:96];
      12'd248: pkret__h20668 = pktStore_62[31:0];
      12'd249: pkret__h20668 = pktStore_62[63:32];
      12'd250: pkret__h20668 = pktStore_62[95:64];
      12'd251: pkret__h20668 = pktStore_62[127:96];
      12'd252: pkret__h20668 = pktStore_63[31:0];
      12'd253: pkret__h20668 = pktStore_63[63:32];
      12'd254: pkret__h20668 = pktStore_63[95:64];
      12'd255: pkret__h20668 = pktStore_63[127:96];
      default: pkret__h20668 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beatCnt_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	empty_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	enable_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	full_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rdPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	s1_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s2_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sin_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wrPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (beatCnt_r_EN) beatCnt_r <= `BSV_ASSIGNMENT_DELAY beatCnt_r_D_IN;
	if (empty_r_EN) empty_r <= `BSV_ASSIGNMENT_DELAY empty_r_D_IN;
	if (enable_r_EN) enable_r <= `BSV_ASSIGNMENT_DELAY enable_r_D_IN;
	if (full_r_EN) full_r <= `BSV_ASSIGNMENT_DELAY full_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (pktDrop_r_clear_r_EN)
	  pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_clear_r_D_IN;
	if (pktDrop_r_incr_r_EN)
	  pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_incr_r_D_IN;
	if (pktError_r_clear_r_EN)
	  pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktError_r_clear_r_D_IN;
	if (pktError_r_incr_r_EN)
	  pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktError_r_incr_r_D_IN;
	if (ptpCnt_r_clear_r_EN)
	  ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_clear_r_D_IN;
	if (ptpCnt_r_incr_r_EN)
	  ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_incr_r_D_IN;
	if (rdPtr_r_EN) rdPtr_r <= `BSV_ASSIGNMENT_DELAY rdPtr_r_D_IN;
	if (s1_sop_r_EN) s1_sop_r <= `BSV_ASSIGNMENT_DELAY s1_sop_r_D_IN;
	if (s1_valid_EN) s1_valid <= `BSV_ASSIGNMENT_DELAY s1_valid_D_IN;
	if (s2_sop_r_EN) s2_sop_r <= `BSV_ASSIGNMENT_DELAY s2_sop_r_D_IN;
	if (s2_valid_EN) s2_valid <= `BSV_ASSIGNMENT_DELAY s2_valid_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (sin_sop_r_EN) sin_sop_r <= `BSV_ASSIGNMENT_DELAY sin_sop_r_D_IN;
	if (wrPtr_r_EN) wrPtr_r <= `BSV_ASSIGNMENT_DELAY wrPtr_r_D_IN;
      end
    if (capture_r_EN) capture_r <= `BSV_ASSIGNMENT_DELAY capture_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktDrop_r_EN) pktDrop_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_D_IN;
    if (pktError_r_EN) pktError_r <= `BSV_ASSIGNMENT_DELAY pktError_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_32_EN) pktStore_32 <= `BSV_ASSIGNMENT_DELAY pktStore_32_D_IN;
    if (pktStore_33_EN) pktStore_33 <= `BSV_ASSIGNMENT_DELAY pktStore_33_D_IN;
    if (pktStore_34_EN) pktStore_34 <= `BSV_ASSIGNMENT_DELAY pktStore_34_D_IN;
    if (pktStore_35_EN) pktStore_35 <= `BSV_ASSIGNMENT_DELAY pktStore_35_D_IN;
    if (pktStore_36_EN) pktStore_36 <= `BSV_ASSIGNMENT_DELAY pktStore_36_D_IN;
    if (pktStore_37_EN) pktStore_37 <= `BSV_ASSIGNMENT_DELAY pktStore_37_D_IN;
    if (pktStore_38_EN) pktStore_38 <= `BSV_ASSIGNMENT_DELAY pktStore_38_D_IN;
    if (pktStore_39_EN) pktStore_39 <= `BSV_ASSIGNMENT_DELAY pktStore_39_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_40_EN) pktStore_40 <= `BSV_ASSIGNMENT_DELAY pktStore_40_D_IN;
    if (pktStore_41_EN) pktStore_41 <= `BSV_ASSIGNMENT_DELAY pktStore_41_D_IN;
    if (pktStore_42_EN) pktStore_42 <= `BSV_ASSIGNMENT_DELAY pktStore_42_D_IN;
    if (pktStore_43_EN) pktStore_43 <= `BSV_ASSIGNMENT_DELAY pktStore_43_D_IN;
    if (pktStore_44_EN) pktStore_44 <= `BSV_ASSIGNMENT_DELAY pktStore_44_D_IN;
    if (pktStore_45_EN) pktStore_45 <= `BSV_ASSIGNMENT_DELAY pktStore_45_D_IN;
    if (pktStore_46_EN) pktStore_46 <= `BSV_ASSIGNMENT_DELAY pktStore_46_D_IN;
    if (pktStore_47_EN) pktStore_47 <= `BSV_ASSIGNMENT_DELAY pktStore_47_D_IN;
    if (pktStore_48_EN) pktStore_48 <= `BSV_ASSIGNMENT_DELAY pktStore_48_D_IN;
    if (pktStore_49_EN) pktStore_49 <= `BSV_ASSIGNMENT_DELAY pktStore_49_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_50_EN) pktStore_50 <= `BSV_ASSIGNMENT_DELAY pktStore_50_D_IN;
    if (pktStore_51_EN) pktStore_51 <= `BSV_ASSIGNMENT_DELAY pktStore_51_D_IN;
    if (pktStore_52_EN) pktStore_52 <= `BSV_ASSIGNMENT_DELAY pktStore_52_D_IN;
    if (pktStore_53_EN) pktStore_53 <= `BSV_ASSIGNMENT_DELAY pktStore_53_D_IN;
    if (pktStore_54_EN) pktStore_54 <= `BSV_ASSIGNMENT_DELAY pktStore_54_D_IN;
    if (pktStore_55_EN) pktStore_55 <= `BSV_ASSIGNMENT_DELAY pktStore_55_D_IN;
    if (pktStore_56_EN) pktStore_56 <= `BSV_ASSIGNMENT_DELAY pktStore_56_D_IN;
    if (pktStore_57_EN) pktStore_57 <= `BSV_ASSIGNMENT_DELAY pktStore_57_D_IN;
    if (pktStore_58_EN) pktStore_58 <= `BSV_ASSIGNMENT_DELAY pktStore_58_D_IN;
    if (pktStore_59_EN) pktStore_59 <= `BSV_ASSIGNMENT_DELAY pktStore_59_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_60_EN) pktStore_60 <= `BSV_ASSIGNMENT_DELAY pktStore_60_D_IN;
    if (pktStore_61_EN) pktStore_61 <= `BSV_ASSIGNMENT_DELAY pktStore_61_D_IN;
    if (pktStore_62_EN) pktStore_62 <= `BSV_ASSIGNMENT_DELAY pktStore_62_D_IN;
    if (pktStore_63_EN) pktStore_63 <= `BSV_ASSIGNMENT_DELAY pktStore_63_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (ptpCnt_r_EN) ptpCnt_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_D_IN;
    if (s1_r_EN) s1_r <= `BSV_ASSIGNMENT_DELAY s1_r_D_IN;
    if (s2_r_EN) s2_r <= `BSV_ASSIGNMENT_DELAY s2_r_D_IN;
    if (timeStamps_0_EN)
      timeStamps_0 <= `BSV_ASSIGNMENT_DELAY timeStamps_0_D_IN;
    if (timeStamps_1_EN)
      timeStamps_1 <= `BSV_ASSIGNMENT_DELAY timeStamps_1_D_IN;
    if (timeStamps_2_EN)
      timeStamps_2 <= `BSV_ASSIGNMENT_DELAY timeStamps_2_D_IN;
    if (timeStamps_3_EN)
      timeStamps_3 <= `BSV_ASSIGNMENT_DELAY timeStamps_3_D_IN;
    if (timeStamps_4_EN)
      timeStamps_4 <= `BSV_ASSIGNMENT_DELAY timeStamps_4_D_IN;
    if (timeStamps_5_EN)
      timeStamps_5 <= `BSV_ASSIGNMENT_DELAY timeStamps_5_D_IN;
    if (timeStamps_6_EN)
      timeStamps_6 <= `BSV_ASSIGNMENT_DELAY timeStamps_6_D_IN;
    if (timeStamps_7_EN)
      timeStamps_7 <= `BSV_ASSIGNMENT_DELAY timeStamps_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beatCnt_r = 4'hA;
    capture_r = 1'h0;
    empty_r = 1'h0;
    enable_r = 1'h0;
    full_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktDrop_r = 32'hAAAAAAAA;
    pktDrop_r_clear_r = 1'h0;
    pktDrop_r_incr_r = 1'h0;
    pktError_r = 32'hAAAAAAAA;
    pktError_r_clear_r = 1'h0;
    pktError_r_incr_r = 1'h0;
    pktStore_0 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_10 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_11 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_12 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_13 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_14 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_15 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_16 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_17 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_18 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_19 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_20 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_21 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_22 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_23 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_24 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_25 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_26 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_27 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_28 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_29 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_30 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_31 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_32 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_33 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_34 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_35 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_36 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_37 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_38 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_39 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_40 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_41 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_42 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_43 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_44 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_45 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_46 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_47 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_48 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_49 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_50 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_51 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_52 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_53 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_54 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_55 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_56 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_57 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_58 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_59 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_60 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_61 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_62 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_63 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_7 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_8 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_9 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ptpCnt_r = 32'hAAAAAAAA;
    ptpCnt_r_clear_r = 1'h0;
    ptpCnt_r_incr_r = 1'h0;
    rdPtr_r = 4'hA;
    s1_r = 225'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s1_sop_r = 1'h0;
    s1_valid = 1'h0;
    s2_r = 225'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s2_sop_r = 1'h0;
    s2_valid = 1'h0;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    sin_sop_r = 1'h0;
    timeStamps_0 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_1 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_2 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_3 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_4 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_5 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_6 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_7 = 80'hAAAAAAAAAAAAAAAAAAAA;
    wrPtr_r = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd5 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd10 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd11 &&
	  saxi_a4rdAddr_q_0[11:10] == 2'b0)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	  !beatCnt_r_37_ULE_8___d270)
	$display("Invalid size of ptp packet");
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] != 6'd6 &&
	  saxi_a4wrAddr_q_0[7:2] != 6'd7)
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkIngressCapture_16

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// mac_s_axis_tready              O     1 reg
// usr_m_axis_tvalid              O     1
// usr_m_axis_tdata               O   256 reg
// usr_m_axis_tuser               O    80 reg
// usr_m_axis_tkeep               O    32 reg
// usr_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// mac_s_axis_tdata               I   256
// mac_s_axis_tuser               I    80 reg
// mac_s_axis_tkeep               I    32 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// mac_s_axis_tvalid              I     1
// mac_s_axis_tlast               I     1 reg
// usr_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkIngressCapture_32(s_axi_aclk,
			   s_axi_aresetn,

			   mac_s_axis_tvalid,

			   mac_s_axis_tready,

			   mac_s_axis_tdata,

			   mac_s_axis_tuser,

			   mac_s_axis_tkeep,

			   mac_s_axis_tlast,

			   usr_m_axis_tvalid,

			   usr_m_axis_tready,

			   usr_m_axis_tdata,

			   usr_m_axis_tuser,

			   usr_m_axis_tkeep,

			   usr_m_axis_tlast,

			   s_axi_awvalid,

			   s_axi_awready,

			   s_axi_awaddr,

			   s_axi_awprot,

			   s_axi_wvalid,

			   s_axi_wready,

			   s_axi_wdata,

			   s_axi_wstrb,

			   s_axi_bvalid,

			   s_axi_bready,

			   s_axi_bresp,

			   s_axi_arvalid,

			   s_axi_arready,

			   s_axi_araddr,

			   s_axi_arprot,

			   s_axi_rvalid,

			   s_axi_rready,

			   s_axi_rdata,

			   s_axi_rresp);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method mac_s_axis_mTVALID
  input  mac_s_axis_tvalid;

  // value method mac_s_axis_sTREADY
  output mac_s_axis_tready;

  // action method mac_s_axis_mTDATA
  input  [255 : 0] mac_s_axis_tdata;

  // action method mac_s_axis_mTSTRB

  // action method mac_s_axis_mTUSER
  input  [79 : 0] mac_s_axis_tuser;

  // action method mac_s_axis_mTKEEP
  input  [31 : 0] mac_s_axis_tkeep;

  // action method mac_s_axis_mTLAST
  input  mac_s_axis_tlast;

  // value method usr_m_axis_mTVALID
  output usr_m_axis_tvalid;

  // action method usr_m_axis_sTREADY
  input  usr_m_axis_tready;

  // value method usr_m_axis_mTDATA
  output [255 : 0] usr_m_axis_tdata;

  // value method usr_m_axis_mTSTRB

  // value method usr_m_axis_mTUSER
  output [79 : 0] usr_m_axis_tuser;

  // value method usr_m_axis_mTKEEP
  output [31 : 0] usr_m_axis_tkeep;

  // value method usr_m_axis_mTLAST
  output usr_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [255 : 0] usr_m_axis_tdata;
  wire [79 : 0] usr_m_axis_tuser;
  wire [31 : 0] s_axi_rdata, usr_m_axis_tkeep;
  wire [1 : 0] s_axi_bresp, s_axi_rresp;
  wire mac_s_axis_tready,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       usr_m_axis_tlast,
       usr_m_axis_tvalid;

  // inlined wires
  wire ackPkt_pw_whas,
       capPkt_pw_whas,
       pktCnt_r_incr_r_1_whas,
       pktDrop_r_incr_r_1_whas,
       pktError_r_incr_r_1_whas,
       ptpCnt_r_incr_r_1_whas,
       s1_valid_port1__read,
       s1_valid_port2__read,
       s2_valid_port1__read,
       s2_valid_port2__read,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beatCnt_r
  reg [2 : 0] beatCnt_r;
  wire [2 : 0] beatCnt_r_D_IN;
  wire beatCnt_r_EN;

  // register capture_r
  reg capture_r;
  wire capture_r_D_IN, capture_r_EN;

  // register empty_r
  reg empty_r;
  wire empty_r_D_IN, empty_r_EN;

  // register enable_r
  reg enable_r;
  wire enable_r_D_IN, enable_r_EN;

  // register full_r
  reg full_r;
  wire full_r_D_IN, full_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktDrop_r
  reg [31 : 0] pktDrop_r;
  wire [31 : 0] pktDrop_r_D_IN;
  wire pktDrop_r_EN;

  // register pktDrop_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktDrop_r_clear_r;
  wire pktDrop_r_clear_r_D_IN, pktDrop_r_clear_r_EN;

  // register pktDrop_r_incr_r
  reg pktDrop_r_incr_r;
  wire pktDrop_r_incr_r_D_IN, pktDrop_r_incr_r_EN;

  // register pktError_r
  reg [31 : 0] pktError_r;
  wire [31 : 0] pktError_r_D_IN;
  wire pktError_r_EN;

  // register pktError_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktError_r_clear_r;
  wire pktError_r_clear_r_D_IN, pktError_r_clear_r_EN;

  // register pktError_r_incr_r
  reg pktError_r_incr_r;
  wire pktError_r_incr_r_D_IN, pktError_r_incr_r_EN;

  // register pktStore_0
  reg [255 : 0] pktStore_0;
  wire [255 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [255 : 0] pktStore_1;
  wire [255 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [255 : 0] pktStore_10;
  wire [255 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [255 : 0] pktStore_11;
  wire [255 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [255 : 0] pktStore_12;
  wire [255 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [255 : 0] pktStore_13;
  wire [255 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [255 : 0] pktStore_14;
  wire [255 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [255 : 0] pktStore_15;
  wire [255 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [255 : 0] pktStore_16;
  wire [255 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [255 : 0] pktStore_17;
  wire [255 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [255 : 0] pktStore_18;
  wire [255 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [255 : 0] pktStore_19;
  wire [255 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [255 : 0] pktStore_2;
  wire [255 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [255 : 0] pktStore_20;
  wire [255 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [255 : 0] pktStore_21;
  wire [255 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [255 : 0] pktStore_22;
  wire [255 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [255 : 0] pktStore_23;
  wire [255 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [255 : 0] pktStore_24;
  wire [255 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [255 : 0] pktStore_25;
  wire [255 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [255 : 0] pktStore_26;
  wire [255 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [255 : 0] pktStore_27;
  wire [255 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [255 : 0] pktStore_28;
  wire [255 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [255 : 0] pktStore_29;
  wire [255 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [255 : 0] pktStore_3;
  wire [255 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [255 : 0] pktStore_30;
  wire [255 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [255 : 0] pktStore_31;
  wire [255 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_4
  reg [255 : 0] pktStore_4;
  wire [255 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [255 : 0] pktStore_5;
  wire [255 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [255 : 0] pktStore_6;
  wire [255 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [255 : 0] pktStore_7;
  wire [255 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [255 : 0] pktStore_8;
  wire [255 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [255 : 0] pktStore_9;
  wire [255 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register ptpCnt_r
  reg [31 : 0] ptpCnt_r;
  wire [31 : 0] ptpCnt_r_D_IN;
  wire ptpCnt_r_EN;

  // register ptpCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg ptpCnt_r_clear_r;
  wire ptpCnt_r_clear_r_D_IN, ptpCnt_r_clear_r_EN;

  // register ptpCnt_r_incr_r
  reg ptpCnt_r_incr_r;
  wire ptpCnt_r_incr_r_D_IN, ptpCnt_r_incr_r_EN;

  // register rdPtr_r
  reg [3 : 0] rdPtr_r;
  wire [3 : 0] rdPtr_r_D_IN;
  wire rdPtr_r_EN;

  // register s1_r
  reg [368 : 0] s1_r;
  wire [368 : 0] s1_r_D_IN;
  wire s1_r_EN;

  // register s1_sop_r
  reg s1_sop_r;
  wire s1_sop_r_D_IN, s1_sop_r_EN;

  // register s1_valid
  reg s1_valid;
  wire s1_valid_D_IN, s1_valid_EN;

  // register s2_r
  reg [368 : 0] s2_r;
  wire [368 : 0] s2_r_D_IN;
  wire s2_r_EN;

  // register s2_sop_r
  reg s2_sop_r;
  wire s2_sop_r_D_IN, s2_sop_r_EN;

  // register s2_valid
  reg s2_valid;
  wire s2_valid_D_IN, s2_valid_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register sin_sop_r
  reg sin_sop_r;
  wire sin_sop_r_D_IN, sin_sop_r_EN;

  // register timeStamps_0
  reg [79 : 0] timeStamps_0;
  wire [79 : 0] timeStamps_0_D_IN;
  wire timeStamps_0_EN;

  // register timeStamps_1
  reg [79 : 0] timeStamps_1;
  wire [79 : 0] timeStamps_1_D_IN;
  wire timeStamps_1_EN;

  // register timeStamps_2
  reg [79 : 0] timeStamps_2;
  wire [79 : 0] timeStamps_2_D_IN;
  wire timeStamps_2_EN;

  // register timeStamps_3
  reg [79 : 0] timeStamps_3;
  wire [79 : 0] timeStamps_3_D_IN;
  wire timeStamps_3_EN;

  // register timeStamps_4
  reg [79 : 0] timeStamps_4;
  wire [79 : 0] timeStamps_4_D_IN;
  wire timeStamps_4_EN;

  // register timeStamps_5
  reg [79 : 0] timeStamps_5;
  wire [79 : 0] timeStamps_5_D_IN;
  wire timeStamps_5_EN;

  // register timeStamps_6
  reg [79 : 0] timeStamps_6;
  wire [79 : 0] timeStamps_6_D_IN;
  wire timeStamps_6_EN;

  // register timeStamps_7
  reg [79 : 0] timeStamps_7;
  wire [79 : 0] timeStamps_7_D_IN;
  wire timeStamps_7_EN;

  // register wrPtr_r
  reg [3 : 0] wrPtr_r;
  wire [3 : 0] wrPtr_r_D_IN;
  wire wrPtr_r_EN;

  // ports of submodule s0Meta_f
  wire [3 : 0] s0Meta_f_D_IN, s0Meta_f_D_OUT;
  wire s0Meta_f_CLR,
       s0Meta_f_DEQ,
       s0Meta_f_EMPTY_N,
       s0Meta_f_ENQ,
       s0Meta_f_FULL_N;

  // ports of submodule s0_f
  wire [368 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captureAndMove,
       CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_decodeAndMove,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktDrop_r_setClear,
       CAN_FIRE_RL_pktDrop_r_update,
       CAN_FIRE_RL_pktError_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktError_r_setClear,
       CAN_FIRE_RL_pktError_r_update,
       CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_ptpCnt_r_setClear,
       CAN_FIRE_RL_ptpCnt_r_update,
       CAN_FIRE_RL_s2Taken,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_RL_updateState,
       CAN_FIRE_mac_s_axis_mTDATA,
       CAN_FIRE_mac_s_axis_mTKEEP,
       CAN_FIRE_mac_s_axis_mTLAST,
       CAN_FIRE_mac_s_axis_mTSTRB,
       CAN_FIRE_mac_s_axis_mTUSER,
       CAN_FIRE_mac_s_axis_mTVALID,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_usr_m_axis_sTREADY,
       WILL_FIRE_RL_captureAndMove,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_decodeAndMove,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktDrop_r_setClear,
       WILL_FIRE_RL_pktDrop_r_update,
       WILL_FIRE_RL_pktError_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktError_r_setClear,
       WILL_FIRE_RL_pktError_r_update,
       WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_ptpCnt_r_setClear,
       WILL_FIRE_RL_ptpCnt_r_update,
       WILL_FIRE_RL_s2Taken,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_RL_updateState,
       WILL_FIRE_mac_s_axis_mTDATA,
       WILL_FIRE_mac_s_axis_mTKEEP,
       WILL_FIRE_mac_s_axis_mTLAST,
       WILL_FIRE_mac_s_axis_mTSTRB,
       WILL_FIRE_mac_s_axis_mTUSER,
       WILL_FIRE_mac_s_axis_mTVALID,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_usr_m_axis_sTREADY;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_2,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_2,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] pkret__h17404, tsret__h17403, v__h14614;
  wire [47 : 0] dmac_mac__h2984;
  wire [31 : 0] cpret__h14678, cpret__h14690, x_data__h17493;
  wire [11 : 0] x__h17527, x__h20163;
  wire [4 : 0] x__h8347;
  wire [3 : 0] x__h7898;
  wire beatCnt_r_37_ULE_4___d206,
       s1_sop_r_19_AND_s0Meta_f_first__29_BIT_3_30_OR_ETC___d242;

  // action method mac_s_axis_mTVALID
  assign CAN_FIRE_mac_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTVALID = mac_s_axis_tvalid ;

  // value method mac_s_axis_sTREADY
  assign mac_s_axis_tready = s0_f_FULL_N ;

  // action method mac_s_axis_mTDATA
  assign CAN_FIRE_mac_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTDATA = 1'd1 ;

  // action method mac_s_axis_mTSTRB
  assign CAN_FIRE_mac_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTSTRB = 1'd1 ;

  // action method mac_s_axis_mTUSER
  assign CAN_FIRE_mac_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTUSER = 1'd1 ;

  // action method mac_s_axis_mTKEEP
  assign CAN_FIRE_mac_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTKEEP = 1'd1 ;

  // action method mac_s_axis_mTLAST
  assign CAN_FIRE_mac_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTLAST = mac_s_axis_tlast ;

  // value method usr_m_axis_mTVALID
  assign usr_m_axis_tvalid = s2_valid ;

  // action method usr_m_axis_sTREADY
  assign CAN_FIRE_usr_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_usr_m_axis_sTREADY = usr_m_axis_tready ;

  // value method usr_m_axis_mTDATA
  assign usr_m_axis_tdata = s2_r[368:113] ;

  // value method usr_m_axis_mTUSER
  assign usr_m_axis_tuser = s2_r[80:1] ;

  // value method usr_m_axis_mTKEEP
  assign usr_m_axis_tkeep = s2_r[112:81] ;

  // value method usr_m_axis_mTLAST
  assign usr_m_axis_tlast = s2_valid && s2_r[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // submodule s0Meta_f
  FIFO2 #(.width(32'd4), .guarded(32'd1)) s0Meta_f(.RST(s_axi_aresetn__DELAYED),
						   .CLK(s_axi_aclk),
						   .D_IN(s0Meta_f_D_IN),
						   .ENQ(s0Meta_f_ENQ),
						   .DEQ(s0Meta_f_DEQ),
						   .CLR(s0Meta_f_CLR),
						   .D_OUT(s0Meta_f_D_OUT),
						   .FULL_N(s0Meta_f_FULL_N),
						   .EMPTY_N(s0Meta_f_EMPTY_N));

  // submodule s0_f
  FIFO2 #(.width(32'd369), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_ptpCnt_r_update
  assign CAN_FIRE_RL_ptpCnt_r_update = ptpCnt_r_clear_r || ptpCnt_r_incr_r ;
  assign WILL_FIRE_RL_ptpCnt_r_update = CAN_FIRE_RL_ptpCnt_r_update ;

  // rule RL_pktDrop_r_update
  assign CAN_FIRE_RL_pktDrop_r_update =
	     pktDrop_r_clear_r || pktDrop_r_incr_r ;
  assign WILL_FIRE_RL_pktDrop_r_update = CAN_FIRE_RL_pktDrop_r_update ;

  // rule RL_pktError_r_update
  assign CAN_FIRE_RL_pktError_r_update =
	     pktError_r_clear_r || pktError_r_incr_r ;
  assign WILL_FIRE_RL_pktError_r_update = CAN_FIRE_RL_pktError_r_update ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways =
	     s0_f_FULL_N && (!sin_sop_r || s0Meta_f_FULL_N) &&
	     mac_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s2_valid && usr_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s2_valid ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s2_valid ;

  // rule RL_s2Taken
  assign CAN_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign WILL_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_captureAndMove
  assign CAN_FIRE_RL_captureAndMove = s1_valid && !s2_valid_port1__read ;
  assign WILL_FIRE_RL_captureAndMove = CAN_FIRE_RL_captureAndMove ;

  // rule RL_decodeAndMove
  assign CAN_FIRE_RL_decodeAndMove =
	     s0_f_EMPTY_N && (!s1_sop_r || s0Meta_f_EMPTY_N) &&
	     !s1_valid_port1__read ;
  assign WILL_FIRE_RL_decodeAndMove = CAN_FIRE_RL_decodeAndMove ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_updateState
  assign CAN_FIRE_RL_updateState = 1'd1 ;
  assign WILL_FIRE_RL_updateState = 1'd1 ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrData_q_0[1] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_ptpCnt_r_setClear
  assign CAN_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_ptpCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktDrop_r_setClear
  assign CAN_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktDrop_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktError_r_setClear
  assign CAN_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktError_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_2 :
	       34'd0 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 = { 2'd0, x_data__h17493 } ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_2 :
	       36'd0 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_decodeAndMove && s1_sop_r ;
  assign ptpCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_decodeAndMove && s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) ;
  assign pktDrop_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && full_r && capture_r && s2_r[0] ||
	     WILL_FIRE_RL_decodeAndMove &&
	     s1_sop_r_19_AND_s0Meta_f_first__29_BIT_3_30_OR_ETC___d242 ;
  assign pktError_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     !beatCnt_r_37_ULE_4___d206 ;
  assign ackPkt_pw_whas =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 ;
  assign capPkt_pw_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     beatCnt_r_37_ULE_4___d206 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;
  assign s1_valid_port1__read = !CAN_FIRE_RL_captureAndMove && s1_valid ;
  assign s1_valid_port2__read =
	     CAN_FIRE_RL_decodeAndMove || s1_valid_port1__read ;
  assign s2_valid_port1__read = !CAN_FIRE_RL_mst_ifc_doAlways && s2_valid ;
  assign s2_valid_port2__read =
	     CAN_FIRE_RL_captureAndMove || s2_valid_port1__read ;

  // register beatCnt_r
  assign beatCnt_r_D_IN =
	     s1_r[0] ?
	       3'd0 :
	       beatCnt_r + (beatCnt_r_37_ULE_4___d206 ? 3'd1 : 3'd0) ;
  assign beatCnt_r_EN = WILL_FIRE_RL_captureAndMove && capture_r && !full_r ;

  // register capture_r
  assign capture_r_D_IN =
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     enable_r ;
  assign capture_r_EN = pktCnt_r_incr_r_1_whas ;

  // register empty_r
  assign empty_r_D_IN =
	     ackPkt_pw_whas && !capPkt_pw_whas && rdPtr_r + 4'd1 == wrPtr_r ;
  assign empty_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register enable_r
  assign enable_r_D_IN = saxi_a4wrData_q_0[0] ;
  assign enable_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 ;

  // register full_r
  assign full_r_D_IN =
	     (!ackPkt_pw_whas || capPkt_pw_whas) &&
	     wrPtr_r + 4'd1 == { ~rdPtr_r[3], rdPtr_r[2:0] } ;
  assign full_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktDrop_r
  assign pktDrop_r_D_IN = pktDrop_r_clear_r ? 32'd0 : pktDrop_r + 32'd1 ;
  assign pktDrop_r_EN = CAN_FIRE_RL_pktDrop_r_update ;

  // register pktDrop_r_clear_r
  assign pktDrop_r_clear_r_D_IN = WILL_FIRE_RL_pktDrop_r_setClear ;
  assign pktDrop_r_clear_r_EN =
	     WILL_FIRE_RL_pktDrop_r_update && pktDrop_r_clear_r ||
	     WILL_FIRE_RL_pktDrop_r_setClear ;

  // register pktDrop_r_incr_r
  assign pktDrop_r_incr_r_D_IN = pktDrop_r_incr_r_1_whas ;
  assign pktDrop_r_incr_r_EN = 1'd1 ;

  // register pktError_r
  assign pktError_r_D_IN = pktError_r_clear_r ? 32'd0 : pktError_r + 32'd1 ;
  assign pktError_r_EN = CAN_FIRE_RL_pktError_r_update ;

  // register pktError_r_clear_r
  assign pktError_r_clear_r_D_IN = WILL_FIRE_RL_pktError_r_setClear ;
  assign pktError_r_clear_r_EN =
	     WILL_FIRE_RL_pktError_r_update && pktError_r_clear_r ||
	     WILL_FIRE_RL_pktError_r_setClear ;

  // register pktError_r_incr_r
  assign pktError_r_incr_r_D_IN = pktError_r_incr_r_1_whas ;
  assign pktError_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = s1_r[368:113] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd0 && capture_r &&
	     !full_r ;

  // register pktStore_1
  assign pktStore_1_D_IN = s1_r[368:113] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd1 && capture_r &&
	     !full_r ;

  // register pktStore_10
  assign pktStore_10_D_IN = s1_r[368:113] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd10 && capture_r &&
	     !full_r ;

  // register pktStore_11
  assign pktStore_11_D_IN = s1_r[368:113] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd11 && capture_r &&
	     !full_r ;

  // register pktStore_12
  assign pktStore_12_D_IN = s1_r[368:113] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd12 && capture_r &&
	     !full_r ;

  // register pktStore_13
  assign pktStore_13_D_IN = s1_r[368:113] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd13 && capture_r &&
	     !full_r ;

  // register pktStore_14
  assign pktStore_14_D_IN = s1_r[368:113] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd14 && capture_r &&
	     !full_r ;

  // register pktStore_15
  assign pktStore_15_D_IN = s1_r[368:113] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd15 && capture_r &&
	     !full_r ;

  // register pktStore_16
  assign pktStore_16_D_IN = s1_r[368:113] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd16 && capture_r &&
	     !full_r ;

  // register pktStore_17
  assign pktStore_17_D_IN = s1_r[368:113] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd17 && capture_r &&
	     !full_r ;

  // register pktStore_18
  assign pktStore_18_D_IN = s1_r[368:113] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd18 && capture_r &&
	     !full_r ;

  // register pktStore_19
  assign pktStore_19_D_IN = s1_r[368:113] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd19 && capture_r &&
	     !full_r ;

  // register pktStore_2
  assign pktStore_2_D_IN = s1_r[368:113] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd2 && capture_r &&
	     !full_r ;

  // register pktStore_20
  assign pktStore_20_D_IN = s1_r[368:113] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd20 && capture_r &&
	     !full_r ;

  // register pktStore_21
  assign pktStore_21_D_IN = s1_r[368:113] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd21 && capture_r &&
	     !full_r ;

  // register pktStore_22
  assign pktStore_22_D_IN = s1_r[368:113] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd22 && capture_r &&
	     !full_r ;

  // register pktStore_23
  assign pktStore_23_D_IN = s1_r[368:113] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd23 && capture_r &&
	     !full_r ;

  // register pktStore_24
  assign pktStore_24_D_IN = s1_r[368:113] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd24 && capture_r &&
	     !full_r ;

  // register pktStore_25
  assign pktStore_25_D_IN = s1_r[368:113] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd25 && capture_r &&
	     !full_r ;

  // register pktStore_26
  assign pktStore_26_D_IN = s1_r[368:113] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd26 && capture_r &&
	     !full_r ;

  // register pktStore_27
  assign pktStore_27_D_IN = s1_r[368:113] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd27 && capture_r &&
	     !full_r ;

  // register pktStore_28
  assign pktStore_28_D_IN = s1_r[368:113] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd28 && capture_r &&
	     !full_r ;

  // register pktStore_29
  assign pktStore_29_D_IN = s1_r[368:113] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd29 && capture_r &&
	     !full_r ;

  // register pktStore_3
  assign pktStore_3_D_IN = s1_r[368:113] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd3 && capture_r &&
	     !full_r ;

  // register pktStore_30
  assign pktStore_30_D_IN = s1_r[368:113] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd30 && capture_r &&
	     !full_r ;

  // register pktStore_31
  assign pktStore_31_D_IN = s1_r[368:113] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd31 && capture_r &&
	     !full_r ;

  // register pktStore_4
  assign pktStore_4_D_IN = s1_r[368:113] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd4 && capture_r &&
	     !full_r ;

  // register pktStore_5
  assign pktStore_5_D_IN = s1_r[368:113] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd5 && capture_r &&
	     !full_r ;

  // register pktStore_6
  assign pktStore_6_D_IN = s1_r[368:113] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd6 && capture_r &&
	     !full_r ;

  // register pktStore_7
  assign pktStore_7_D_IN = s1_r[368:113] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd7 && capture_r &&
	     !full_r ;

  // register pktStore_8
  assign pktStore_8_D_IN = s1_r[368:113] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd8 && capture_r &&
	     !full_r ;

  // register pktStore_9
  assign pktStore_9_D_IN = s1_r[368:113] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_captureAndMove && x__h8347 == 5'd9 && capture_r &&
	     !full_r ;

  // register ptpCnt_r
  assign ptpCnt_r_D_IN = ptpCnt_r_clear_r ? 32'd0 : ptpCnt_r + 32'd1 ;
  assign ptpCnt_r_EN = CAN_FIRE_RL_ptpCnt_r_update ;

  // register ptpCnt_r_clear_r
  assign ptpCnt_r_clear_r_D_IN = WILL_FIRE_RL_ptpCnt_r_setClear ;
  assign ptpCnt_r_clear_r_EN =
	     WILL_FIRE_RL_ptpCnt_r_update && ptpCnt_r_clear_r ||
	     WILL_FIRE_RL_ptpCnt_r_setClear ;

  // register ptpCnt_r_incr_r
  assign ptpCnt_r_incr_r_D_IN = ptpCnt_r_incr_r_1_whas ;
  assign ptpCnt_r_incr_r_EN = 1'd1 ;

  // register rdPtr_r
  assign rdPtr_r_D_IN = rdPtr_r + 4'd1 ;
  assign rdPtr_r_EN = ackPkt_pw_whas ;

  // register s1_r
  assign s1_r_D_IN = s0_f_D_OUT ;
  assign s1_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_sop_r
  assign s1_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign s1_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_valid
  assign s1_valid_D_IN = s1_valid_port2__read ;
  assign s1_valid_EN = 1'b1 ;

  // register s2_r
  assign s2_r_D_IN = s1_r ;
  assign s2_r_EN = CAN_FIRE_RL_captureAndMove ;

  // register s2_sop_r
  assign s2_sop_r_D_IN = s1_sop_r ;
  assign s2_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s2_valid
  assign s2_valid_D_IN = s2_valid_port2__read ;
  assign s2_valid_EN = 1'b1 ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_2:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      MUX_saxi_a4rdResp_q_0_write_1__SEL_2:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_2:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      MUX_saxi_a4wrData_q_0_write_1__SEL_2:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register sin_sop_r
  assign sin_sop_r_D_IN = mac_s_axis_tlast ;
  assign sin_sop_r_EN = CAN_FIRE_RL_slv_ifc_doAlways ;

  // register timeStamps_0
  assign timeStamps_0_D_IN = s1_r[80:1] ;
  assign timeStamps_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd0 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_1
  assign timeStamps_1_D_IN = s1_r[80:1] ;
  assign timeStamps_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd1 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_2
  assign timeStamps_2_D_IN = s1_r[80:1] ;
  assign timeStamps_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd2 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_3
  assign timeStamps_3_D_IN = s1_r[80:1] ;
  assign timeStamps_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd3 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_4
  assign timeStamps_4_D_IN = s1_r[80:1] ;
  assign timeStamps_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd4 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_5
  assign timeStamps_5_D_IN = s1_r[80:1] ;
  assign timeStamps_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd5 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_6
  assign timeStamps_6_D_IN = s1_r[80:1] ;
  assign timeStamps_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd6 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_7
  assign timeStamps_7_D_IN = s1_r[80:1] ;
  assign timeStamps_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7898 == 4'd7 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register wrPtr_r
  assign wrPtr_r_D_IN = wrPtr_r + 4'd1 ;
  assign wrPtr_r_EN = capPkt_pw_whas ;

  // submodule s0Meta_f
  assign s0Meta_f_D_IN =
	     { dmac_mac__h2984 == 48'h011B19000000,
	       dmac_mac__h2984 == 48'h0180C200000E,
	       dmac_mac__h2984 == 48'h01005E000181,
	       dmac_mac__h2984 == 48'h01005E00006B } ;
  assign s0Meta_f_ENQ = WILL_FIRE_RL_slv_ifc_doAlways && sin_sop_r ;
  assign s0Meta_f_DEQ = pktCnt_r_incr_r_1_whas ;
  assign s0Meta_f_CLR = 1'b0 ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { mac_s_axis_tdata,
	       mac_s_axis_tkeep,
	       mac_s_axis_tuser,
	       mac_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_decodeAndMove ;
  assign s0_f_CLR = 1'b0 ;

  // remaining internal signals
  assign beatCnt_r_37_ULE_4___d206 = beatCnt_r <= 3'd4 ;
  assign cpret__h14678 = { 31'd0, enable_r } ;
  assign cpret__h14690 = empty_r ? 32'hFFFFFFFF : { 29'd0, rdPtr_r[2:0] } ;
  assign dmac_mac__h2984 =
	     { mac_s_axis_tdata[7:0],
	       mac_s_axis_tdata[15:8],
	       mac_s_axis_tdata[23:16],
	       mac_s_axis_tdata[31:24],
	       mac_s_axis_tdata[39:32],
	       mac_s_axis_tdata[47:40] } ;
  assign s1_sop_r_19_AND_s0Meta_f_first__29_BIT_3_30_OR_ETC___d242 =
	     s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     !enable_r ;
  assign x__h17527 = { 5'd0, saxi_a4rdAddr_q_0[8:2] } ;
  assign x__h20163 = { 4'd0, saxi_a4rdAddr_q_0[9:2] } ;
  assign x__h7898 = { 1'd0, wrPtr_r[2:0] } ;
  assign x__h8347 = { wrPtr_r[2:0], beatCnt_r[1:0] } ;
  assign x_data__h17493 =
	     (saxi_a4rdAddr_q_0[11:10] == 2'b01) ?
	       tsret__h17403 :
	       (saxi_a4rdAddr_q_0[11] ? pkret__h17404 : v__h14614) ;
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h14678 or
	  cpret__h14690 or pktCnt_r or ptpCnt_r or pktDrop_r or pktError_r)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h14614 = 32'd1447842644;
      6'd1: v__h14614 = 32'd825110857;
      6'd4: v__h14614 = cpret__h14678;
      6'd5: v__h14614 = cpret__h14690;
      6'd8: v__h14614 = pktCnt_r;
      6'd9: v__h14614 = ptpCnt_r;
      6'd10: v__h14614 = pktDrop_r;
      6'd11: v__h14614 = pktError_r;
      default: v__h14614 = 32'd0;
    endcase
  end
  always@(x__h17527 or
	  timeStamps_0 or
	  timeStamps_1 or
	  timeStamps_2 or
	  timeStamps_3 or
	  timeStamps_4 or timeStamps_5 or timeStamps_6 or timeStamps_7)
  begin
    case (x__h17527)
      12'd0: tsret__h17403 = timeStamps_0[31:0];
      12'd1: tsret__h17403 = timeStamps_0[63:32];
      12'd2: tsret__h17403 = { 16'd0, timeStamps_0[79:64] };
      12'd3, 12'd7, 12'd11, 12'd15, 12'd19, 12'd23, 12'd27, 12'd31:
	  tsret__h17403 = 32'd0;
      12'd4: tsret__h17403 = timeStamps_1[31:0];
      12'd5: tsret__h17403 = timeStamps_1[63:32];
      12'd6: tsret__h17403 = { 16'd0, timeStamps_1[79:64] };
      12'd8: tsret__h17403 = timeStamps_2[31:0];
      12'd9: tsret__h17403 = timeStamps_2[63:32];
      12'd10: tsret__h17403 = { 16'd0, timeStamps_2[79:64] };
      12'd12: tsret__h17403 = timeStamps_3[31:0];
      12'd13: tsret__h17403 = timeStamps_3[63:32];
      12'd14: tsret__h17403 = { 16'd0, timeStamps_3[79:64] };
      12'd16: tsret__h17403 = timeStamps_4[31:0];
      12'd17: tsret__h17403 = timeStamps_4[63:32];
      12'd18: tsret__h17403 = { 16'd0, timeStamps_4[79:64] };
      12'd20: tsret__h17403 = timeStamps_5[31:0];
      12'd21: tsret__h17403 = timeStamps_5[63:32];
      12'd22: tsret__h17403 = { 16'd0, timeStamps_5[79:64] };
      12'd24: tsret__h17403 = timeStamps_6[31:0];
      12'd25: tsret__h17403 = timeStamps_6[63:32];
      12'd26: tsret__h17403 = { 16'd0, timeStamps_6[79:64] };
      12'd28: tsret__h17403 = timeStamps_7[31:0];
      12'd29: tsret__h17403 = timeStamps_7[63:32];
      12'd30: tsret__h17403 = { 16'd0, timeStamps_7[79:64] };
      default: tsret__h17403 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h20163 or
	  pktStore_0 or
	  pktStore_1 or
	  pktStore_2 or
	  pktStore_3 or
	  pktStore_4 or
	  pktStore_5 or
	  pktStore_6 or
	  pktStore_7 or
	  pktStore_8 or
	  pktStore_9 or
	  pktStore_10 or
	  pktStore_11 or
	  pktStore_12 or
	  pktStore_13 or
	  pktStore_14 or
	  pktStore_15 or
	  pktStore_16 or
	  pktStore_17 or
	  pktStore_18 or
	  pktStore_19 or
	  pktStore_20 or
	  pktStore_21 or
	  pktStore_22 or
	  pktStore_23 or
	  pktStore_24 or
	  pktStore_25 or
	  pktStore_26 or
	  pktStore_27 or
	  pktStore_28 or pktStore_29 or pktStore_30 or pktStore_31)
  begin
    case (x__h20163)
      12'd0: pkret__h17404 = pktStore_0[31:0];
      12'd1: pkret__h17404 = pktStore_0[63:32];
      12'd2: pkret__h17404 = pktStore_0[95:64];
      12'd3: pkret__h17404 = pktStore_0[127:96];
      12'd4: pkret__h17404 = pktStore_0[159:128];
      12'd5: pkret__h17404 = pktStore_0[191:160];
      12'd6: pkret__h17404 = pktStore_0[223:192];
      12'd7: pkret__h17404 = pktStore_0[255:224];
      12'd8: pkret__h17404 = pktStore_1[31:0];
      12'd9: pkret__h17404 = pktStore_1[63:32];
      12'd10: pkret__h17404 = pktStore_1[95:64];
      12'd11: pkret__h17404 = pktStore_1[127:96];
      12'd12: pkret__h17404 = pktStore_1[159:128];
      12'd13: pkret__h17404 = pktStore_1[191:160];
      12'd14: pkret__h17404 = pktStore_1[223:192];
      12'd15: pkret__h17404 = pktStore_1[255:224];
      12'd16: pkret__h17404 = pktStore_2[31:0];
      12'd17: pkret__h17404 = pktStore_2[63:32];
      12'd18: pkret__h17404 = pktStore_2[95:64];
      12'd19: pkret__h17404 = pktStore_2[127:96];
      12'd20: pkret__h17404 = pktStore_2[159:128];
      12'd21: pkret__h17404 = pktStore_2[191:160];
      12'd22: pkret__h17404 = pktStore_2[223:192];
      12'd23: pkret__h17404 = pktStore_2[255:224];
      12'd24: pkret__h17404 = pktStore_3[31:0];
      12'd25: pkret__h17404 = pktStore_3[63:32];
      12'd26: pkret__h17404 = pktStore_3[95:64];
      12'd27: pkret__h17404 = pktStore_3[127:96];
      12'd28: pkret__h17404 = pktStore_3[159:128];
      12'd29: pkret__h17404 = pktStore_3[191:160];
      12'd30: pkret__h17404 = pktStore_3[223:192];
      12'd31: pkret__h17404 = pktStore_3[255:224];
      12'd32: pkret__h17404 = pktStore_4[31:0];
      12'd33: pkret__h17404 = pktStore_4[63:32];
      12'd34: pkret__h17404 = pktStore_4[95:64];
      12'd35: pkret__h17404 = pktStore_4[127:96];
      12'd36: pkret__h17404 = pktStore_4[159:128];
      12'd37: pkret__h17404 = pktStore_4[191:160];
      12'd38: pkret__h17404 = pktStore_4[223:192];
      12'd39: pkret__h17404 = pktStore_4[255:224];
      12'd40: pkret__h17404 = pktStore_5[31:0];
      12'd41: pkret__h17404 = pktStore_5[63:32];
      12'd42: pkret__h17404 = pktStore_5[95:64];
      12'd43: pkret__h17404 = pktStore_5[127:96];
      12'd44: pkret__h17404 = pktStore_5[159:128];
      12'd45: pkret__h17404 = pktStore_5[191:160];
      12'd46: pkret__h17404 = pktStore_5[223:192];
      12'd47: pkret__h17404 = pktStore_5[255:224];
      12'd48: pkret__h17404 = pktStore_6[31:0];
      12'd49: pkret__h17404 = pktStore_6[63:32];
      12'd50: pkret__h17404 = pktStore_6[95:64];
      12'd51: pkret__h17404 = pktStore_6[127:96];
      12'd52: pkret__h17404 = pktStore_6[159:128];
      12'd53: pkret__h17404 = pktStore_6[191:160];
      12'd54: pkret__h17404 = pktStore_6[223:192];
      12'd55: pkret__h17404 = pktStore_6[255:224];
      12'd56: pkret__h17404 = pktStore_7[31:0];
      12'd57: pkret__h17404 = pktStore_7[63:32];
      12'd58: pkret__h17404 = pktStore_7[95:64];
      12'd59: pkret__h17404 = pktStore_7[127:96];
      12'd60: pkret__h17404 = pktStore_7[159:128];
      12'd61: pkret__h17404 = pktStore_7[191:160];
      12'd62: pkret__h17404 = pktStore_7[223:192];
      12'd63: pkret__h17404 = pktStore_7[255:224];
      12'd64: pkret__h17404 = pktStore_8[31:0];
      12'd65: pkret__h17404 = pktStore_8[63:32];
      12'd66: pkret__h17404 = pktStore_8[95:64];
      12'd67: pkret__h17404 = pktStore_8[127:96];
      12'd68: pkret__h17404 = pktStore_8[159:128];
      12'd69: pkret__h17404 = pktStore_8[191:160];
      12'd70: pkret__h17404 = pktStore_8[223:192];
      12'd71: pkret__h17404 = pktStore_8[255:224];
      12'd72: pkret__h17404 = pktStore_9[31:0];
      12'd73: pkret__h17404 = pktStore_9[63:32];
      12'd74: pkret__h17404 = pktStore_9[95:64];
      12'd75: pkret__h17404 = pktStore_9[127:96];
      12'd76: pkret__h17404 = pktStore_9[159:128];
      12'd77: pkret__h17404 = pktStore_9[191:160];
      12'd78: pkret__h17404 = pktStore_9[223:192];
      12'd79: pkret__h17404 = pktStore_9[255:224];
      12'd80: pkret__h17404 = pktStore_10[31:0];
      12'd81: pkret__h17404 = pktStore_10[63:32];
      12'd82: pkret__h17404 = pktStore_10[95:64];
      12'd83: pkret__h17404 = pktStore_10[127:96];
      12'd84: pkret__h17404 = pktStore_10[159:128];
      12'd85: pkret__h17404 = pktStore_10[191:160];
      12'd86: pkret__h17404 = pktStore_10[223:192];
      12'd87: pkret__h17404 = pktStore_10[255:224];
      12'd88: pkret__h17404 = pktStore_11[31:0];
      12'd89: pkret__h17404 = pktStore_11[63:32];
      12'd90: pkret__h17404 = pktStore_11[95:64];
      12'd91: pkret__h17404 = pktStore_11[127:96];
      12'd92: pkret__h17404 = pktStore_11[159:128];
      12'd93: pkret__h17404 = pktStore_11[191:160];
      12'd94: pkret__h17404 = pktStore_11[223:192];
      12'd95: pkret__h17404 = pktStore_11[255:224];
      12'd96: pkret__h17404 = pktStore_12[31:0];
      12'd97: pkret__h17404 = pktStore_12[63:32];
      12'd98: pkret__h17404 = pktStore_12[95:64];
      12'd99: pkret__h17404 = pktStore_12[127:96];
      12'd100: pkret__h17404 = pktStore_12[159:128];
      12'd101: pkret__h17404 = pktStore_12[191:160];
      12'd102: pkret__h17404 = pktStore_12[223:192];
      12'd103: pkret__h17404 = pktStore_12[255:224];
      12'd104: pkret__h17404 = pktStore_13[31:0];
      12'd105: pkret__h17404 = pktStore_13[63:32];
      12'd106: pkret__h17404 = pktStore_13[95:64];
      12'd107: pkret__h17404 = pktStore_13[127:96];
      12'd108: pkret__h17404 = pktStore_13[159:128];
      12'd109: pkret__h17404 = pktStore_13[191:160];
      12'd110: pkret__h17404 = pktStore_13[223:192];
      12'd111: pkret__h17404 = pktStore_13[255:224];
      12'd112: pkret__h17404 = pktStore_14[31:0];
      12'd113: pkret__h17404 = pktStore_14[63:32];
      12'd114: pkret__h17404 = pktStore_14[95:64];
      12'd115: pkret__h17404 = pktStore_14[127:96];
      12'd116: pkret__h17404 = pktStore_14[159:128];
      12'd117: pkret__h17404 = pktStore_14[191:160];
      12'd118: pkret__h17404 = pktStore_14[223:192];
      12'd119: pkret__h17404 = pktStore_14[255:224];
      12'd120: pkret__h17404 = pktStore_15[31:0];
      12'd121: pkret__h17404 = pktStore_15[63:32];
      12'd122: pkret__h17404 = pktStore_15[95:64];
      12'd123: pkret__h17404 = pktStore_15[127:96];
      12'd124: pkret__h17404 = pktStore_15[159:128];
      12'd125: pkret__h17404 = pktStore_15[191:160];
      12'd126: pkret__h17404 = pktStore_15[223:192];
      12'd127: pkret__h17404 = pktStore_15[255:224];
      12'd128: pkret__h17404 = pktStore_16[31:0];
      12'd129: pkret__h17404 = pktStore_16[63:32];
      12'd130: pkret__h17404 = pktStore_16[95:64];
      12'd131: pkret__h17404 = pktStore_16[127:96];
      12'd132: pkret__h17404 = pktStore_16[159:128];
      12'd133: pkret__h17404 = pktStore_16[191:160];
      12'd134: pkret__h17404 = pktStore_16[223:192];
      12'd135: pkret__h17404 = pktStore_16[255:224];
      12'd136: pkret__h17404 = pktStore_17[31:0];
      12'd137: pkret__h17404 = pktStore_17[63:32];
      12'd138: pkret__h17404 = pktStore_17[95:64];
      12'd139: pkret__h17404 = pktStore_17[127:96];
      12'd140: pkret__h17404 = pktStore_17[159:128];
      12'd141: pkret__h17404 = pktStore_17[191:160];
      12'd142: pkret__h17404 = pktStore_17[223:192];
      12'd143: pkret__h17404 = pktStore_17[255:224];
      12'd144: pkret__h17404 = pktStore_18[31:0];
      12'd145: pkret__h17404 = pktStore_18[63:32];
      12'd146: pkret__h17404 = pktStore_18[95:64];
      12'd147: pkret__h17404 = pktStore_18[127:96];
      12'd148: pkret__h17404 = pktStore_18[159:128];
      12'd149: pkret__h17404 = pktStore_18[191:160];
      12'd150: pkret__h17404 = pktStore_18[223:192];
      12'd151: pkret__h17404 = pktStore_18[255:224];
      12'd152: pkret__h17404 = pktStore_19[31:0];
      12'd153: pkret__h17404 = pktStore_19[63:32];
      12'd154: pkret__h17404 = pktStore_19[95:64];
      12'd155: pkret__h17404 = pktStore_19[127:96];
      12'd156: pkret__h17404 = pktStore_19[159:128];
      12'd157: pkret__h17404 = pktStore_19[191:160];
      12'd158: pkret__h17404 = pktStore_19[223:192];
      12'd159: pkret__h17404 = pktStore_19[255:224];
      12'd160: pkret__h17404 = pktStore_20[31:0];
      12'd161: pkret__h17404 = pktStore_20[63:32];
      12'd162: pkret__h17404 = pktStore_20[95:64];
      12'd163: pkret__h17404 = pktStore_20[127:96];
      12'd164: pkret__h17404 = pktStore_20[159:128];
      12'd165: pkret__h17404 = pktStore_20[191:160];
      12'd166: pkret__h17404 = pktStore_20[223:192];
      12'd167: pkret__h17404 = pktStore_20[255:224];
      12'd168: pkret__h17404 = pktStore_21[31:0];
      12'd169: pkret__h17404 = pktStore_21[63:32];
      12'd170: pkret__h17404 = pktStore_21[95:64];
      12'd171: pkret__h17404 = pktStore_21[127:96];
      12'd172: pkret__h17404 = pktStore_21[159:128];
      12'd173: pkret__h17404 = pktStore_21[191:160];
      12'd174: pkret__h17404 = pktStore_21[223:192];
      12'd175: pkret__h17404 = pktStore_21[255:224];
      12'd176: pkret__h17404 = pktStore_22[31:0];
      12'd177: pkret__h17404 = pktStore_22[63:32];
      12'd178: pkret__h17404 = pktStore_22[95:64];
      12'd179: pkret__h17404 = pktStore_22[127:96];
      12'd180: pkret__h17404 = pktStore_22[159:128];
      12'd181: pkret__h17404 = pktStore_22[191:160];
      12'd182: pkret__h17404 = pktStore_22[223:192];
      12'd183: pkret__h17404 = pktStore_22[255:224];
      12'd184: pkret__h17404 = pktStore_23[31:0];
      12'd185: pkret__h17404 = pktStore_23[63:32];
      12'd186: pkret__h17404 = pktStore_23[95:64];
      12'd187: pkret__h17404 = pktStore_23[127:96];
      12'd188: pkret__h17404 = pktStore_23[159:128];
      12'd189: pkret__h17404 = pktStore_23[191:160];
      12'd190: pkret__h17404 = pktStore_23[223:192];
      12'd191: pkret__h17404 = pktStore_23[255:224];
      12'd192: pkret__h17404 = pktStore_24[31:0];
      12'd193: pkret__h17404 = pktStore_24[63:32];
      12'd194: pkret__h17404 = pktStore_24[95:64];
      12'd195: pkret__h17404 = pktStore_24[127:96];
      12'd196: pkret__h17404 = pktStore_24[159:128];
      12'd197: pkret__h17404 = pktStore_24[191:160];
      12'd198: pkret__h17404 = pktStore_24[223:192];
      12'd199: pkret__h17404 = pktStore_24[255:224];
      12'd200: pkret__h17404 = pktStore_25[31:0];
      12'd201: pkret__h17404 = pktStore_25[63:32];
      12'd202: pkret__h17404 = pktStore_25[95:64];
      12'd203: pkret__h17404 = pktStore_25[127:96];
      12'd204: pkret__h17404 = pktStore_25[159:128];
      12'd205: pkret__h17404 = pktStore_25[191:160];
      12'd206: pkret__h17404 = pktStore_25[223:192];
      12'd207: pkret__h17404 = pktStore_25[255:224];
      12'd208: pkret__h17404 = pktStore_26[31:0];
      12'd209: pkret__h17404 = pktStore_26[63:32];
      12'd210: pkret__h17404 = pktStore_26[95:64];
      12'd211: pkret__h17404 = pktStore_26[127:96];
      12'd212: pkret__h17404 = pktStore_26[159:128];
      12'd213: pkret__h17404 = pktStore_26[191:160];
      12'd214: pkret__h17404 = pktStore_26[223:192];
      12'd215: pkret__h17404 = pktStore_26[255:224];
      12'd216: pkret__h17404 = pktStore_27[31:0];
      12'd217: pkret__h17404 = pktStore_27[63:32];
      12'd218: pkret__h17404 = pktStore_27[95:64];
      12'd219: pkret__h17404 = pktStore_27[127:96];
      12'd220: pkret__h17404 = pktStore_27[159:128];
      12'd221: pkret__h17404 = pktStore_27[191:160];
      12'd222: pkret__h17404 = pktStore_27[223:192];
      12'd223: pkret__h17404 = pktStore_27[255:224];
      12'd224: pkret__h17404 = pktStore_28[31:0];
      12'd225: pkret__h17404 = pktStore_28[63:32];
      12'd226: pkret__h17404 = pktStore_28[95:64];
      12'd227: pkret__h17404 = pktStore_28[127:96];
      12'd228: pkret__h17404 = pktStore_28[159:128];
      12'd229: pkret__h17404 = pktStore_28[191:160];
      12'd230: pkret__h17404 = pktStore_28[223:192];
      12'd231: pkret__h17404 = pktStore_28[255:224];
      12'd232: pkret__h17404 = pktStore_29[31:0];
      12'd233: pkret__h17404 = pktStore_29[63:32];
      12'd234: pkret__h17404 = pktStore_29[95:64];
      12'd235: pkret__h17404 = pktStore_29[127:96];
      12'd236: pkret__h17404 = pktStore_29[159:128];
      12'd237: pkret__h17404 = pktStore_29[191:160];
      12'd238: pkret__h17404 = pktStore_29[223:192];
      12'd239: pkret__h17404 = pktStore_29[255:224];
      12'd240: pkret__h17404 = pktStore_30[31:0];
      12'd241: pkret__h17404 = pktStore_30[63:32];
      12'd242: pkret__h17404 = pktStore_30[95:64];
      12'd243: pkret__h17404 = pktStore_30[127:96];
      12'd244: pkret__h17404 = pktStore_30[159:128];
      12'd245: pkret__h17404 = pktStore_30[191:160];
      12'd246: pkret__h17404 = pktStore_30[223:192];
      12'd247: pkret__h17404 = pktStore_30[255:224];
      12'd248: pkret__h17404 = pktStore_31[31:0];
      12'd249: pkret__h17404 = pktStore_31[63:32];
      12'd250: pkret__h17404 = pktStore_31[95:64];
      12'd251: pkret__h17404 = pktStore_31[127:96];
      12'd252: pkret__h17404 = pktStore_31[159:128];
      12'd253: pkret__h17404 = pktStore_31[191:160];
      12'd254: pkret__h17404 = pktStore_31[223:192];
      12'd255: pkret__h17404 = pktStore_31[255:224];
      default: pkret__h17404 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beatCnt_r <= `BSV_ASSIGNMENT_DELAY 3'd0;
	empty_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	enable_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	full_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rdPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	s1_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s2_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sin_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wrPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (beatCnt_r_EN) beatCnt_r <= `BSV_ASSIGNMENT_DELAY beatCnt_r_D_IN;
	if (empty_r_EN) empty_r <= `BSV_ASSIGNMENT_DELAY empty_r_D_IN;
	if (enable_r_EN) enable_r <= `BSV_ASSIGNMENT_DELAY enable_r_D_IN;
	if (full_r_EN) full_r <= `BSV_ASSIGNMENT_DELAY full_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (pktDrop_r_clear_r_EN)
	  pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_clear_r_D_IN;
	if (pktDrop_r_incr_r_EN)
	  pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_incr_r_D_IN;
	if (pktError_r_clear_r_EN)
	  pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktError_r_clear_r_D_IN;
	if (pktError_r_incr_r_EN)
	  pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktError_r_incr_r_D_IN;
	if (ptpCnt_r_clear_r_EN)
	  ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_clear_r_D_IN;
	if (ptpCnt_r_incr_r_EN)
	  ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_incr_r_D_IN;
	if (rdPtr_r_EN) rdPtr_r <= `BSV_ASSIGNMENT_DELAY rdPtr_r_D_IN;
	if (s1_sop_r_EN) s1_sop_r <= `BSV_ASSIGNMENT_DELAY s1_sop_r_D_IN;
	if (s1_valid_EN) s1_valid <= `BSV_ASSIGNMENT_DELAY s1_valid_D_IN;
	if (s2_sop_r_EN) s2_sop_r <= `BSV_ASSIGNMENT_DELAY s2_sop_r_D_IN;
	if (s2_valid_EN) s2_valid <= `BSV_ASSIGNMENT_DELAY s2_valid_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (sin_sop_r_EN) sin_sop_r <= `BSV_ASSIGNMENT_DELAY sin_sop_r_D_IN;
	if (wrPtr_r_EN) wrPtr_r <= `BSV_ASSIGNMENT_DELAY wrPtr_r_D_IN;
      end
    if (capture_r_EN) capture_r <= `BSV_ASSIGNMENT_DELAY capture_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktDrop_r_EN) pktDrop_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_D_IN;
    if (pktError_r_EN) pktError_r <= `BSV_ASSIGNMENT_DELAY pktError_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (ptpCnt_r_EN) ptpCnt_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_D_IN;
    if (s1_r_EN) s1_r <= `BSV_ASSIGNMENT_DELAY s1_r_D_IN;
    if (s2_r_EN) s2_r <= `BSV_ASSIGNMENT_DELAY s2_r_D_IN;
    if (timeStamps_0_EN)
      timeStamps_0 <= `BSV_ASSIGNMENT_DELAY timeStamps_0_D_IN;
    if (timeStamps_1_EN)
      timeStamps_1 <= `BSV_ASSIGNMENT_DELAY timeStamps_1_D_IN;
    if (timeStamps_2_EN)
      timeStamps_2 <= `BSV_ASSIGNMENT_DELAY timeStamps_2_D_IN;
    if (timeStamps_3_EN)
      timeStamps_3 <= `BSV_ASSIGNMENT_DELAY timeStamps_3_D_IN;
    if (timeStamps_4_EN)
      timeStamps_4 <= `BSV_ASSIGNMENT_DELAY timeStamps_4_D_IN;
    if (timeStamps_5_EN)
      timeStamps_5 <= `BSV_ASSIGNMENT_DELAY timeStamps_5_D_IN;
    if (timeStamps_6_EN)
      timeStamps_6 <= `BSV_ASSIGNMENT_DELAY timeStamps_6_D_IN;
    if (timeStamps_7_EN)
      timeStamps_7 <= `BSV_ASSIGNMENT_DELAY timeStamps_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beatCnt_r = 3'h2;
    capture_r = 1'h0;
    empty_r = 1'h0;
    enable_r = 1'h0;
    full_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktDrop_r = 32'hAAAAAAAA;
    pktDrop_r_clear_r = 1'h0;
    pktDrop_r_incr_r = 1'h0;
    pktError_r = 32'hAAAAAAAA;
    pktError_r_clear_r = 1'h0;
    pktError_r_incr_r = 1'h0;
    pktStore_0 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_1 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_10 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_11 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_12 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_13 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_14 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_15 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_16 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_17 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_18 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_19 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_2 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_20 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_21 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_22 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_23 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_24 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_25 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_26 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_27 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_28 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_29 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_3 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_30 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_31 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_4 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_5 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_6 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_7 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_8 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_9 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ptpCnt_r = 32'hAAAAAAAA;
    ptpCnt_r_clear_r = 1'h0;
    ptpCnt_r_incr_r = 1'h0;
    rdPtr_r = 4'hA;
    s1_r =
	369'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s1_sop_r = 1'h0;
    s1_valid = 1'h0;
    s2_r =
	369'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s2_sop_r = 1'h0;
    s2_valid = 1'h0;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    sin_sop_r = 1'h0;
    timeStamps_0 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_1 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_2 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_3 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_4 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_5 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_6 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_7 = 80'hAAAAAAAAAAAAAAAAAAAA;
    wrPtr_r = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd5 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd10 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd11 &&
	  saxi_a4rdAddr_q_0[11:10] == 2'b0)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	  !beatCnt_r_37_ULE_4___d206)
	$display("Invalid size of ptp packet");
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] != 6'd6 &&
	  saxi_a4wrAddr_q_0[7:2] != 6'd7)
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkIngressCapture_32

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// mac_s_axis_tready              O     1 reg
// usr_m_axis_tvalid              O     1
// usr_m_axis_tdata               O   512 reg
// usr_m_axis_tuser               O    80 reg
// usr_m_axis_tkeep               O    64 reg
// usr_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// mac_s_axis_tdata               I   512
// mac_s_axis_tuser               I    80 reg
// mac_s_axis_tkeep               I    64 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// mac_s_axis_tvalid              I     1
// mac_s_axis_tlast               I     1 reg
// usr_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkIngressCapture_64(s_axi_aclk,
			   s_axi_aresetn,

			   mac_s_axis_tvalid,

			   mac_s_axis_tready,

			   mac_s_axis_tdata,

			   mac_s_axis_tuser,

			   mac_s_axis_tkeep,

			   mac_s_axis_tlast,

			   usr_m_axis_tvalid,

			   usr_m_axis_tready,

			   usr_m_axis_tdata,

			   usr_m_axis_tuser,

			   usr_m_axis_tkeep,

			   usr_m_axis_tlast,

			   s_axi_awvalid,

			   s_axi_awready,

			   s_axi_awaddr,

			   s_axi_awprot,

			   s_axi_wvalid,

			   s_axi_wready,

			   s_axi_wdata,

			   s_axi_wstrb,

			   s_axi_bvalid,

			   s_axi_bready,

			   s_axi_bresp,

			   s_axi_arvalid,

			   s_axi_arready,

			   s_axi_araddr,

			   s_axi_arprot,

			   s_axi_rvalid,

			   s_axi_rready,

			   s_axi_rdata,

			   s_axi_rresp);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method mac_s_axis_mTVALID
  input  mac_s_axis_tvalid;

  // value method mac_s_axis_sTREADY
  output mac_s_axis_tready;

  // action method mac_s_axis_mTDATA
  input  [511 : 0] mac_s_axis_tdata;

  // action method mac_s_axis_mTSTRB

  // action method mac_s_axis_mTUSER
  input  [79 : 0] mac_s_axis_tuser;

  // action method mac_s_axis_mTKEEP
  input  [63 : 0] mac_s_axis_tkeep;

  // action method mac_s_axis_mTLAST
  input  mac_s_axis_tlast;

  // value method usr_m_axis_mTVALID
  output usr_m_axis_tvalid;

  // action method usr_m_axis_sTREADY
  input  usr_m_axis_tready;

  // value method usr_m_axis_mTDATA
  output [511 : 0] usr_m_axis_tdata;

  // value method usr_m_axis_mTSTRB

  // value method usr_m_axis_mTUSER
  output [79 : 0] usr_m_axis_tuser;

  // value method usr_m_axis_mTKEEP
  output [63 : 0] usr_m_axis_tkeep;

  // value method usr_m_axis_mTLAST
  output usr_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [511 : 0] usr_m_axis_tdata;
  wire [79 : 0] usr_m_axis_tuser;
  wire [63 : 0] usr_m_axis_tkeep;
  wire [31 : 0] s_axi_rdata;
  wire [1 : 0] s_axi_bresp, s_axi_rresp;
  wire mac_s_axis_tready,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       usr_m_axis_tlast,
       usr_m_axis_tvalid;

  // inlined wires
  wire ackPkt_pw_whas,
       capPkt_pw_whas,
       pktCnt_r_incr_r_1_whas,
       pktDrop_r_incr_r_1_whas,
       pktError_r_incr_r_1_whas,
       ptpCnt_r_incr_r_1_whas,
       s1_valid_port1__read,
       s1_valid_port2__read,
       s2_valid_port1__read,
       s2_valid_port2__read,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beatCnt_r
  reg [1 : 0] beatCnt_r;
  wire [1 : 0] beatCnt_r_D_IN;
  wire beatCnt_r_EN;

  // register capture_r
  reg capture_r;
  wire capture_r_D_IN, capture_r_EN;

  // register empty_r
  reg empty_r;
  wire empty_r_D_IN, empty_r_EN;

  // register enable_r
  reg enable_r;
  wire enable_r_D_IN, enable_r_EN;

  // register full_r
  reg full_r;
  wire full_r_D_IN, full_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktDrop_r
  reg [31 : 0] pktDrop_r;
  wire [31 : 0] pktDrop_r_D_IN;
  wire pktDrop_r_EN;

  // register pktDrop_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktDrop_r_clear_r;
  wire pktDrop_r_clear_r_D_IN, pktDrop_r_clear_r_EN;

  // register pktDrop_r_incr_r
  reg pktDrop_r_incr_r;
  wire pktDrop_r_incr_r_D_IN, pktDrop_r_incr_r_EN;

  // register pktError_r
  reg [31 : 0] pktError_r;
  wire [31 : 0] pktError_r_D_IN;
  wire pktError_r_EN;

  // register pktError_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktError_r_clear_r;
  wire pktError_r_clear_r_D_IN, pktError_r_clear_r_EN;

  // register pktError_r_incr_r
  reg pktError_r_incr_r;
  wire pktError_r_incr_r_D_IN, pktError_r_incr_r_EN;

  // register pktStore_0
  reg [511 : 0] pktStore_0;
  wire [511 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [511 : 0] pktStore_1;
  wire [511 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [511 : 0] pktStore_10;
  wire [511 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [511 : 0] pktStore_11;
  wire [511 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [511 : 0] pktStore_12;
  wire [511 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [511 : 0] pktStore_13;
  wire [511 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [511 : 0] pktStore_14;
  wire [511 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [511 : 0] pktStore_15;
  wire [511 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_2
  reg [511 : 0] pktStore_2;
  wire [511 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_3
  reg [511 : 0] pktStore_3;
  wire [511 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_4
  reg [511 : 0] pktStore_4;
  wire [511 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [511 : 0] pktStore_5;
  wire [511 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [511 : 0] pktStore_6;
  wire [511 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [511 : 0] pktStore_7;
  wire [511 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [511 : 0] pktStore_8;
  wire [511 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [511 : 0] pktStore_9;
  wire [511 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register ptpCnt_r
  reg [31 : 0] ptpCnt_r;
  wire [31 : 0] ptpCnt_r_D_IN;
  wire ptpCnt_r_EN;

  // register ptpCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg ptpCnt_r_clear_r;
  wire ptpCnt_r_clear_r_D_IN, ptpCnt_r_clear_r_EN;

  // register ptpCnt_r_incr_r
  reg ptpCnt_r_incr_r;
  wire ptpCnt_r_incr_r_D_IN, ptpCnt_r_incr_r_EN;

  // register rdPtr_r
  reg [3 : 0] rdPtr_r;
  wire [3 : 0] rdPtr_r_D_IN;
  wire rdPtr_r_EN;

  // register s1_r
  reg [656 : 0] s1_r;
  wire [656 : 0] s1_r_D_IN;
  wire s1_r_EN;

  // register s1_sop_r
  reg s1_sop_r;
  wire s1_sop_r_D_IN, s1_sop_r_EN;

  // register s1_valid
  reg s1_valid;
  wire s1_valid_D_IN, s1_valid_EN;

  // register s2_r
  reg [656 : 0] s2_r;
  wire [656 : 0] s2_r_D_IN;
  wire s2_r_EN;

  // register s2_sop_r
  reg s2_sop_r;
  wire s2_sop_r_D_IN, s2_sop_r_EN;

  // register s2_valid
  reg s2_valid;
  wire s2_valid_D_IN, s2_valid_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register sin_sop_r
  reg sin_sop_r;
  wire sin_sop_r_D_IN, sin_sop_r_EN;

  // register timeStamps_0
  reg [79 : 0] timeStamps_0;
  wire [79 : 0] timeStamps_0_D_IN;
  wire timeStamps_0_EN;

  // register timeStamps_1
  reg [79 : 0] timeStamps_1;
  wire [79 : 0] timeStamps_1_D_IN;
  wire timeStamps_1_EN;

  // register timeStamps_2
  reg [79 : 0] timeStamps_2;
  wire [79 : 0] timeStamps_2_D_IN;
  wire timeStamps_2_EN;

  // register timeStamps_3
  reg [79 : 0] timeStamps_3;
  wire [79 : 0] timeStamps_3_D_IN;
  wire timeStamps_3_EN;

  // register timeStamps_4
  reg [79 : 0] timeStamps_4;
  wire [79 : 0] timeStamps_4_D_IN;
  wire timeStamps_4_EN;

  // register timeStamps_5
  reg [79 : 0] timeStamps_5;
  wire [79 : 0] timeStamps_5_D_IN;
  wire timeStamps_5_EN;

  // register timeStamps_6
  reg [79 : 0] timeStamps_6;
  wire [79 : 0] timeStamps_6_D_IN;
  wire timeStamps_6_EN;

  // register timeStamps_7
  reg [79 : 0] timeStamps_7;
  wire [79 : 0] timeStamps_7_D_IN;
  wire timeStamps_7_EN;

  // register wrPtr_r
  reg [3 : 0] wrPtr_r;
  wire [3 : 0] wrPtr_r_D_IN;
  wire wrPtr_r_EN;

  // ports of submodule s0Meta_f
  wire [3 : 0] s0Meta_f_D_IN, s0Meta_f_D_OUT;
  wire s0Meta_f_CLR,
       s0Meta_f_DEQ,
       s0Meta_f_EMPTY_N,
       s0Meta_f_ENQ,
       s0Meta_f_FULL_N;

  // ports of submodule s0_f
  wire [656 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captureAndMove,
       CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_decodeAndMove,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktDrop_r_setClear,
       CAN_FIRE_RL_pktDrop_r_update,
       CAN_FIRE_RL_pktError_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktError_r_setClear,
       CAN_FIRE_RL_pktError_r_update,
       CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_ptpCnt_r_setClear,
       CAN_FIRE_RL_ptpCnt_r_update,
       CAN_FIRE_RL_s2Taken,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_RL_updateState,
       CAN_FIRE_mac_s_axis_mTDATA,
       CAN_FIRE_mac_s_axis_mTKEEP,
       CAN_FIRE_mac_s_axis_mTLAST,
       CAN_FIRE_mac_s_axis_mTSTRB,
       CAN_FIRE_mac_s_axis_mTUSER,
       CAN_FIRE_mac_s_axis_mTVALID,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_usr_m_axis_sTREADY,
       WILL_FIRE_RL_captureAndMove,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_decodeAndMove,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktDrop_r_setClear,
       WILL_FIRE_RL_pktDrop_r_update,
       WILL_FIRE_RL_pktError_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktError_r_setClear,
       WILL_FIRE_RL_pktError_r_update,
       WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_ptpCnt_r_setClear,
       WILL_FIRE_RL_ptpCnt_r_update,
       WILL_FIRE_RL_s2Taken,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_RL_updateState,
       WILL_FIRE_mac_s_axis_mTDATA,
       WILL_FIRE_mac_s_axis_mTKEEP,
       WILL_FIRE_mac_s_axis_mTLAST,
       WILL_FIRE_mac_s_axis_mTSTRB,
       WILL_FIRE_mac_s_axis_mTUSER,
       WILL_FIRE_mac_s_axis_mTVALID,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_usr_m_axis_sTREADY;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_2,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_2,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_2,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] pkret__h15775, tsret__h15774, v__h12985;
  wire [47 : 0] dmac_mac__h2984;
  wire [31 : 0] cpret__h13049, cpret__h13061, x_data__h15864;
  wire [11 : 0] x__h15898, x__h18534;
  wire [3 : 0] x__h6906, x__h7355;
  wire s1_sop_r_87_AND_s0Meta_f_first__97_BIT_3_98_OR_ETC___d210;

  // action method mac_s_axis_mTVALID
  assign CAN_FIRE_mac_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTVALID = mac_s_axis_tvalid ;

  // value method mac_s_axis_sTREADY
  assign mac_s_axis_tready = s0_f_FULL_N ;

  // action method mac_s_axis_mTDATA
  assign CAN_FIRE_mac_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTDATA = 1'd1 ;

  // action method mac_s_axis_mTSTRB
  assign CAN_FIRE_mac_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTSTRB = 1'd1 ;

  // action method mac_s_axis_mTUSER
  assign CAN_FIRE_mac_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTUSER = 1'd1 ;

  // action method mac_s_axis_mTKEEP
  assign CAN_FIRE_mac_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTKEEP = 1'd1 ;

  // action method mac_s_axis_mTLAST
  assign CAN_FIRE_mac_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_mac_s_axis_mTLAST = mac_s_axis_tlast ;

  // value method usr_m_axis_mTVALID
  assign usr_m_axis_tvalid = s2_valid ;

  // action method usr_m_axis_sTREADY
  assign CAN_FIRE_usr_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_usr_m_axis_sTREADY = usr_m_axis_tready ;

  // value method usr_m_axis_mTDATA
  assign usr_m_axis_tdata = s2_r[656:145] ;

  // value method usr_m_axis_mTUSER
  assign usr_m_axis_tuser = s2_r[80:1] ;

  // value method usr_m_axis_mTKEEP
  assign usr_m_axis_tkeep = s2_r[144:81] ;

  // value method usr_m_axis_mTLAST
  assign usr_m_axis_tlast = s2_valid && s2_r[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // submodule s0Meta_f
  FIFO2 #(.width(32'd4), .guarded(32'd1)) s0Meta_f(.RST(s_axi_aresetn__DELAYED),
						   .CLK(s_axi_aclk),
						   .D_IN(s0Meta_f_D_IN),
						   .ENQ(s0Meta_f_ENQ),
						   .DEQ(s0Meta_f_DEQ),
						   .CLR(s0Meta_f_CLR),
						   .D_OUT(s0Meta_f_D_OUT),
						   .FULL_N(s0Meta_f_FULL_N),
						   .EMPTY_N(s0Meta_f_EMPTY_N));

  // submodule s0_f
  FIFO2 #(.width(32'd657), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_ptpCnt_r_update
  assign CAN_FIRE_RL_ptpCnt_r_update = ptpCnt_r_clear_r || ptpCnt_r_incr_r ;
  assign WILL_FIRE_RL_ptpCnt_r_update = CAN_FIRE_RL_ptpCnt_r_update ;

  // rule RL_pktDrop_r_update
  assign CAN_FIRE_RL_pktDrop_r_update =
	     pktDrop_r_clear_r || pktDrop_r_incr_r ;
  assign WILL_FIRE_RL_pktDrop_r_update = CAN_FIRE_RL_pktDrop_r_update ;

  // rule RL_pktError_r_update
  assign CAN_FIRE_RL_pktError_r_update =
	     pktError_r_clear_r || pktError_r_incr_r ;
  assign WILL_FIRE_RL_pktError_r_update = CAN_FIRE_RL_pktError_r_update ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways =
	     s0_f_FULL_N && (!sin_sop_r || s0Meta_f_FULL_N) &&
	     mac_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s2_valid && usr_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s2_valid ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s2_valid ;

  // rule RL_s2Taken
  assign CAN_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign WILL_FIRE_RL_s2Taken = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_captureAndMove
  assign CAN_FIRE_RL_captureAndMove = s1_valid && !s2_valid_port1__read ;
  assign WILL_FIRE_RL_captureAndMove = CAN_FIRE_RL_captureAndMove ;

  // rule RL_decodeAndMove
  assign CAN_FIRE_RL_decodeAndMove =
	     s0_f_EMPTY_N && (!s1_sop_r || s0Meta_f_EMPTY_N) &&
	     !s1_valid_port1__read ;
  assign WILL_FIRE_RL_decodeAndMove = CAN_FIRE_RL_decodeAndMove ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_updateState
  assign CAN_FIRE_RL_updateState = 1'd1 ;
  assign WILL_FIRE_RL_updateState = 1'd1 ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrData_q_0[1] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_ptpCnt_r_setClear
  assign CAN_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_ptpCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_ptpCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ptpCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktDrop_r_setClear
  assign CAN_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktDrop_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktDrop_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktDrop_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_pktError_r_setClear
  assign CAN_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_pktError_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktError_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktError_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_2 :
	       34'd0 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 = { 2'd0, x_data__h15864 } ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 :
	       15'd0 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_2 :
	       36'd0 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_decodeAndMove && s1_sop_r ;
  assign ptpCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_decodeAndMove && s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) ;
  assign pktDrop_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && full_r && capture_r && s2_r[0] ||
	     WILL_FIRE_RL_decodeAndMove &&
	     s1_sop_r_87_AND_s0Meta_f_first__97_BIT_3_98_OR_ETC___d210 ;
  assign pktError_r_incr_r_1_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     beatCnt_r == 2'd3 ;
  assign ackPkt_pw_whas =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 ;
  assign capPkt_pw_whas =
	     WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	     beatCnt_r != 2'd3 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;
  assign s1_valid_port1__read = !CAN_FIRE_RL_captureAndMove && s1_valid ;
  assign s1_valid_port2__read =
	     CAN_FIRE_RL_decodeAndMove || s1_valid_port1__read ;
  assign s2_valid_port1__read = !CAN_FIRE_RL_mst_ifc_doAlways && s2_valid ;
  assign s2_valid_port2__read =
	     CAN_FIRE_RL_captureAndMove || s2_valid_port1__read ;

  // register beatCnt_r
  assign beatCnt_r_D_IN =
	     s1_r[0] ?
	       2'd0 :
	       beatCnt_r + ((beatCnt_r == 2'd3) ? 2'd0 : 2'd1) ;
  assign beatCnt_r_EN = WILL_FIRE_RL_captureAndMove && capture_r && !full_r ;

  // register capture_r
  assign capture_r_D_IN =
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     enable_r ;
  assign capture_r_EN = pktCnt_r_incr_r_1_whas ;

  // register empty_r
  assign empty_r_D_IN =
	     ackPkt_pw_whas && !capPkt_pw_whas && rdPtr_r + 4'd1 == wrPtr_r ;
  assign empty_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register enable_r
  assign enable_r_D_IN = saxi_a4wrData_q_0[0] ;
  assign enable_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 ;

  // register full_r
  assign full_r_D_IN =
	     (!ackPkt_pw_whas || capPkt_pw_whas) &&
	     wrPtr_r + 4'd1 == { ~rdPtr_r[3], rdPtr_r[2:0] } ;
  assign full_r_EN =
	     ackPkt_pw_whas && !capPkt_pw_whas ||
	     !ackPkt_pw_whas && capPkt_pw_whas ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktDrop_r
  assign pktDrop_r_D_IN = pktDrop_r_clear_r ? 32'd0 : pktDrop_r + 32'd1 ;
  assign pktDrop_r_EN = CAN_FIRE_RL_pktDrop_r_update ;

  // register pktDrop_r_clear_r
  assign pktDrop_r_clear_r_D_IN = WILL_FIRE_RL_pktDrop_r_setClear ;
  assign pktDrop_r_clear_r_EN =
	     WILL_FIRE_RL_pktDrop_r_update && pktDrop_r_clear_r ||
	     WILL_FIRE_RL_pktDrop_r_setClear ;

  // register pktDrop_r_incr_r
  assign pktDrop_r_incr_r_D_IN = pktDrop_r_incr_r_1_whas ;
  assign pktDrop_r_incr_r_EN = 1'd1 ;

  // register pktError_r
  assign pktError_r_D_IN = pktError_r_clear_r ? 32'd0 : pktError_r + 32'd1 ;
  assign pktError_r_EN = CAN_FIRE_RL_pktError_r_update ;

  // register pktError_r_clear_r
  assign pktError_r_clear_r_D_IN = WILL_FIRE_RL_pktError_r_setClear ;
  assign pktError_r_clear_r_EN =
	     WILL_FIRE_RL_pktError_r_update && pktError_r_clear_r ||
	     WILL_FIRE_RL_pktError_r_setClear ;

  // register pktError_r_incr_r
  assign pktError_r_incr_r_D_IN = pktError_r_incr_r_1_whas ;
  assign pktError_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = s1_r[656:145] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd0 && capture_r &&
	     !full_r ;

  // register pktStore_1
  assign pktStore_1_D_IN = s1_r[656:145] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd1 && capture_r &&
	     !full_r ;

  // register pktStore_10
  assign pktStore_10_D_IN = s1_r[656:145] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd10 && capture_r &&
	     !full_r ;

  // register pktStore_11
  assign pktStore_11_D_IN = s1_r[656:145] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd11 && capture_r &&
	     !full_r ;

  // register pktStore_12
  assign pktStore_12_D_IN = s1_r[656:145] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd12 && capture_r &&
	     !full_r ;

  // register pktStore_13
  assign pktStore_13_D_IN = s1_r[656:145] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd13 && capture_r &&
	     !full_r ;

  // register pktStore_14
  assign pktStore_14_D_IN = s1_r[656:145] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd14 && capture_r &&
	     !full_r ;

  // register pktStore_15
  assign pktStore_15_D_IN = s1_r[656:145] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd15 && capture_r &&
	     !full_r ;

  // register pktStore_2
  assign pktStore_2_D_IN = s1_r[656:145] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd2 && capture_r &&
	     !full_r ;

  // register pktStore_3
  assign pktStore_3_D_IN = s1_r[656:145] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd3 && capture_r &&
	     !full_r ;

  // register pktStore_4
  assign pktStore_4_D_IN = s1_r[656:145] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd4 && capture_r &&
	     !full_r ;

  // register pktStore_5
  assign pktStore_5_D_IN = s1_r[656:145] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd5 && capture_r &&
	     !full_r ;

  // register pktStore_6
  assign pktStore_6_D_IN = s1_r[656:145] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd6 && capture_r &&
	     !full_r ;

  // register pktStore_7
  assign pktStore_7_D_IN = s1_r[656:145] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd7 && capture_r &&
	     !full_r ;

  // register pktStore_8
  assign pktStore_8_D_IN = s1_r[656:145] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd8 && capture_r &&
	     !full_r ;

  // register pktStore_9
  assign pktStore_9_D_IN = s1_r[656:145] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_captureAndMove && x__h7355 == 4'd9 && capture_r &&
	     !full_r ;

  // register ptpCnt_r
  assign ptpCnt_r_D_IN = ptpCnt_r_clear_r ? 32'd0 : ptpCnt_r + 32'd1 ;
  assign ptpCnt_r_EN = CAN_FIRE_RL_ptpCnt_r_update ;

  // register ptpCnt_r_clear_r
  assign ptpCnt_r_clear_r_D_IN = WILL_FIRE_RL_ptpCnt_r_setClear ;
  assign ptpCnt_r_clear_r_EN =
	     WILL_FIRE_RL_ptpCnt_r_update && ptpCnt_r_clear_r ||
	     WILL_FIRE_RL_ptpCnt_r_setClear ;

  // register ptpCnt_r_incr_r
  assign ptpCnt_r_incr_r_D_IN = ptpCnt_r_incr_r_1_whas ;
  assign ptpCnt_r_incr_r_EN = 1'd1 ;

  // register rdPtr_r
  assign rdPtr_r_D_IN = rdPtr_r + 4'd1 ;
  assign rdPtr_r_EN = ackPkt_pw_whas ;

  // register s1_r
  assign s1_r_D_IN = s0_f_D_OUT ;
  assign s1_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_sop_r
  assign s1_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign s1_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s1_valid
  assign s1_valid_D_IN = s1_valid_port2__read ;
  assign s1_valid_EN = 1'b1 ;

  // register s2_r
  assign s2_r_D_IN = s1_r ;
  assign s2_r_EN = CAN_FIRE_RL_captureAndMove ;

  // register s2_sop_r
  assign s2_sop_r_D_IN = s1_sop_r ;
  assign s2_sop_r_EN = CAN_FIRE_RL_decodeAndMove ;

  // register s2_valid
  assign s2_valid_D_IN = s2_valid_port2__read ;
  assign s2_valid_EN = 1'b1 ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_2:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__SEL_2 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      MUX_saxi_a4rdResp_q_0_write_1__SEL_2:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_2:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__SEL_2 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      MUX_saxi_a4wrData_q_0_write_1__SEL_2:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register sin_sop_r
  assign sin_sop_r_D_IN = mac_s_axis_tlast ;
  assign sin_sop_r_EN = CAN_FIRE_RL_slv_ifc_doAlways ;

  // register timeStamps_0
  assign timeStamps_0_D_IN = s1_r[80:1] ;
  assign timeStamps_0_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd0 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_1
  assign timeStamps_1_D_IN = s1_r[80:1] ;
  assign timeStamps_1_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd1 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_2
  assign timeStamps_2_D_IN = s1_r[80:1] ;
  assign timeStamps_2_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd2 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_3
  assign timeStamps_3_D_IN = s1_r[80:1] ;
  assign timeStamps_3_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd3 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_4
  assign timeStamps_4_D_IN = s1_r[80:1] ;
  assign timeStamps_4_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd4 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_5
  assign timeStamps_5_D_IN = s1_r[80:1] ;
  assign timeStamps_5_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd5 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_6
  assign timeStamps_6_D_IN = s1_r[80:1] ;
  assign timeStamps_6_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd6 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register timeStamps_7
  assign timeStamps_7_D_IN = s1_r[80:1] ;
  assign timeStamps_7_EN =
	     WILL_FIRE_RL_captureAndMove && x__h6906 == 4'd7 && capture_r &&
	     !full_r &&
	     s2_sop_r ;

  // register wrPtr_r
  assign wrPtr_r_D_IN = wrPtr_r + 4'd1 ;
  assign wrPtr_r_EN = capPkt_pw_whas ;

  // submodule s0Meta_f
  assign s0Meta_f_D_IN =
	     { dmac_mac__h2984 == 48'h011B19000000,
	       dmac_mac__h2984 == 48'h0180C200000E,
	       dmac_mac__h2984 == 48'h01005E000181,
	       dmac_mac__h2984 == 48'h01005E00006B } ;
  assign s0Meta_f_ENQ = WILL_FIRE_RL_slv_ifc_doAlways && sin_sop_r ;
  assign s0Meta_f_DEQ = pktCnt_r_incr_r_1_whas ;
  assign s0Meta_f_CLR = 1'b0 ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { mac_s_axis_tdata,
	       mac_s_axis_tkeep,
	       mac_s_axis_tuser,
	       mac_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_decodeAndMove ;
  assign s0_f_CLR = 1'b0 ;

  // remaining internal signals
  assign cpret__h13049 = { 31'd0, enable_r } ;
  assign cpret__h13061 = empty_r ? 32'hFFFFFFFF : { 29'd0, rdPtr_r[2:0] } ;
  assign dmac_mac__h2984 =
	     { mac_s_axis_tdata[7:0],
	       mac_s_axis_tdata[15:8],
	       mac_s_axis_tdata[23:16],
	       mac_s_axis_tdata[31:24],
	       mac_s_axis_tdata[39:32],
	       mac_s_axis_tdata[47:40] } ;
  assign s1_sop_r_87_AND_s0Meta_f_first__97_BIT_3_98_OR_ETC___d210 =
	     s1_sop_r &&
	     (s0Meta_f_D_OUT[3] || s0Meta_f_D_OUT[2] || s0Meta_f_D_OUT[1] ||
	      s0Meta_f_D_OUT[0]) &&
	     !enable_r ;
  assign x__h15898 = { 5'd0, saxi_a4rdAddr_q_0[8:2] } ;
  assign x__h18534 = { 4'd0, saxi_a4rdAddr_q_0[9:2] } ;
  assign x__h6906 = { 1'd0, wrPtr_r[2:0] } ;
  assign x__h7355 = { wrPtr_r[2:0], beatCnt_r[0] } ;
  assign x_data__h15864 =
	     (saxi_a4rdAddr_q_0[11:10] == 2'b01) ?
	       tsret__h15774 :
	       (saxi_a4rdAddr_q_0[11] ? pkret__h15775 : v__h12985) ;
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h13049 or
	  cpret__h13061 or pktCnt_r or ptpCnt_r or pktDrop_r or pktError_r)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h12985 = 32'd1447842644;
      6'd1: v__h12985 = 32'd825110857;
      6'd4: v__h12985 = cpret__h13049;
      6'd5: v__h12985 = cpret__h13061;
      6'd8: v__h12985 = pktCnt_r;
      6'd9: v__h12985 = ptpCnt_r;
      6'd10: v__h12985 = pktDrop_r;
      6'd11: v__h12985 = pktError_r;
      default: v__h12985 = 32'd0;
    endcase
  end
  always@(x__h15898 or
	  timeStamps_0 or
	  timeStamps_1 or
	  timeStamps_2 or
	  timeStamps_3 or
	  timeStamps_4 or timeStamps_5 or timeStamps_6 or timeStamps_7)
  begin
    case (x__h15898)
      12'd0: tsret__h15774 = timeStamps_0[31:0];
      12'd1: tsret__h15774 = timeStamps_0[63:32];
      12'd2: tsret__h15774 = { 16'd0, timeStamps_0[79:64] };
      12'd3, 12'd7, 12'd11, 12'd15, 12'd19, 12'd23, 12'd27, 12'd31:
	  tsret__h15774 = 32'd0;
      12'd4: tsret__h15774 = timeStamps_1[31:0];
      12'd5: tsret__h15774 = timeStamps_1[63:32];
      12'd6: tsret__h15774 = { 16'd0, timeStamps_1[79:64] };
      12'd8: tsret__h15774 = timeStamps_2[31:0];
      12'd9: tsret__h15774 = timeStamps_2[63:32];
      12'd10: tsret__h15774 = { 16'd0, timeStamps_2[79:64] };
      12'd12: tsret__h15774 = timeStamps_3[31:0];
      12'd13: tsret__h15774 = timeStamps_3[63:32];
      12'd14: tsret__h15774 = { 16'd0, timeStamps_3[79:64] };
      12'd16: tsret__h15774 = timeStamps_4[31:0];
      12'd17: tsret__h15774 = timeStamps_4[63:32];
      12'd18: tsret__h15774 = { 16'd0, timeStamps_4[79:64] };
      12'd20: tsret__h15774 = timeStamps_5[31:0];
      12'd21: tsret__h15774 = timeStamps_5[63:32];
      12'd22: tsret__h15774 = { 16'd0, timeStamps_5[79:64] };
      12'd24: tsret__h15774 = timeStamps_6[31:0];
      12'd25: tsret__h15774 = timeStamps_6[63:32];
      12'd26: tsret__h15774 = { 16'd0, timeStamps_6[79:64] };
      12'd28: tsret__h15774 = timeStamps_7[31:0];
      12'd29: tsret__h15774 = timeStamps_7[63:32];
      12'd30: tsret__h15774 = { 16'd0, timeStamps_7[79:64] };
      default: tsret__h15774 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h18534 or
	  pktStore_0 or
	  pktStore_1 or
	  pktStore_2 or
	  pktStore_3 or
	  pktStore_4 or
	  pktStore_5 or
	  pktStore_6 or
	  pktStore_7 or
	  pktStore_8 or
	  pktStore_9 or
	  pktStore_10 or
	  pktStore_11 or
	  pktStore_12 or pktStore_13 or pktStore_14 or pktStore_15)
  begin
    case (x__h18534)
      12'd0: pkret__h15775 = pktStore_0[31:0];
      12'd1: pkret__h15775 = pktStore_0[63:32];
      12'd2: pkret__h15775 = pktStore_0[95:64];
      12'd3: pkret__h15775 = pktStore_0[127:96];
      12'd4: pkret__h15775 = pktStore_0[159:128];
      12'd5: pkret__h15775 = pktStore_0[191:160];
      12'd6: pkret__h15775 = pktStore_0[223:192];
      12'd7: pkret__h15775 = pktStore_0[255:224];
      12'd8: pkret__h15775 = pktStore_0[287:256];
      12'd9: pkret__h15775 = pktStore_0[319:288];
      12'd10: pkret__h15775 = pktStore_0[351:320];
      12'd11: pkret__h15775 = pktStore_0[383:352];
      12'd12: pkret__h15775 = pktStore_0[415:384];
      12'd13: pkret__h15775 = pktStore_0[447:416];
      12'd14: pkret__h15775 = pktStore_0[479:448];
      12'd15: pkret__h15775 = pktStore_0[511:480];
      12'd16: pkret__h15775 = pktStore_1[31:0];
      12'd17: pkret__h15775 = pktStore_1[63:32];
      12'd18: pkret__h15775 = pktStore_1[95:64];
      12'd19: pkret__h15775 = pktStore_1[127:96];
      12'd20: pkret__h15775 = pktStore_1[159:128];
      12'd21: pkret__h15775 = pktStore_1[191:160];
      12'd22: pkret__h15775 = pktStore_1[223:192];
      12'd23: pkret__h15775 = pktStore_1[255:224];
      12'd24: pkret__h15775 = pktStore_1[287:256];
      12'd25: pkret__h15775 = pktStore_1[319:288];
      12'd26: pkret__h15775 = pktStore_1[351:320];
      12'd27: pkret__h15775 = pktStore_1[383:352];
      12'd28: pkret__h15775 = pktStore_1[415:384];
      12'd29: pkret__h15775 = pktStore_1[447:416];
      12'd30: pkret__h15775 = pktStore_1[479:448];
      12'd31: pkret__h15775 = pktStore_1[511:480];
      12'd32: pkret__h15775 = pktStore_2[31:0];
      12'd33: pkret__h15775 = pktStore_2[63:32];
      12'd34: pkret__h15775 = pktStore_2[95:64];
      12'd35: pkret__h15775 = pktStore_2[127:96];
      12'd36: pkret__h15775 = pktStore_2[159:128];
      12'd37: pkret__h15775 = pktStore_2[191:160];
      12'd38: pkret__h15775 = pktStore_2[223:192];
      12'd39: pkret__h15775 = pktStore_2[255:224];
      12'd40: pkret__h15775 = pktStore_2[287:256];
      12'd41: pkret__h15775 = pktStore_2[319:288];
      12'd42: pkret__h15775 = pktStore_2[351:320];
      12'd43: pkret__h15775 = pktStore_2[383:352];
      12'd44: pkret__h15775 = pktStore_2[415:384];
      12'd45: pkret__h15775 = pktStore_2[447:416];
      12'd46: pkret__h15775 = pktStore_2[479:448];
      12'd47: pkret__h15775 = pktStore_2[511:480];
      12'd48: pkret__h15775 = pktStore_3[31:0];
      12'd49: pkret__h15775 = pktStore_3[63:32];
      12'd50: pkret__h15775 = pktStore_3[95:64];
      12'd51: pkret__h15775 = pktStore_3[127:96];
      12'd52: pkret__h15775 = pktStore_3[159:128];
      12'd53: pkret__h15775 = pktStore_3[191:160];
      12'd54: pkret__h15775 = pktStore_3[223:192];
      12'd55: pkret__h15775 = pktStore_3[255:224];
      12'd56: pkret__h15775 = pktStore_3[287:256];
      12'd57: pkret__h15775 = pktStore_3[319:288];
      12'd58: pkret__h15775 = pktStore_3[351:320];
      12'd59: pkret__h15775 = pktStore_3[383:352];
      12'd60: pkret__h15775 = pktStore_3[415:384];
      12'd61: pkret__h15775 = pktStore_3[447:416];
      12'd62: pkret__h15775 = pktStore_3[479:448];
      12'd63: pkret__h15775 = pktStore_3[511:480];
      12'd64: pkret__h15775 = pktStore_4[31:0];
      12'd65: pkret__h15775 = pktStore_4[63:32];
      12'd66: pkret__h15775 = pktStore_4[95:64];
      12'd67: pkret__h15775 = pktStore_4[127:96];
      12'd68: pkret__h15775 = pktStore_4[159:128];
      12'd69: pkret__h15775 = pktStore_4[191:160];
      12'd70: pkret__h15775 = pktStore_4[223:192];
      12'd71: pkret__h15775 = pktStore_4[255:224];
      12'd72: pkret__h15775 = pktStore_4[287:256];
      12'd73: pkret__h15775 = pktStore_4[319:288];
      12'd74: pkret__h15775 = pktStore_4[351:320];
      12'd75: pkret__h15775 = pktStore_4[383:352];
      12'd76: pkret__h15775 = pktStore_4[415:384];
      12'd77: pkret__h15775 = pktStore_4[447:416];
      12'd78: pkret__h15775 = pktStore_4[479:448];
      12'd79: pkret__h15775 = pktStore_4[511:480];
      12'd80: pkret__h15775 = pktStore_5[31:0];
      12'd81: pkret__h15775 = pktStore_5[63:32];
      12'd82: pkret__h15775 = pktStore_5[95:64];
      12'd83: pkret__h15775 = pktStore_5[127:96];
      12'd84: pkret__h15775 = pktStore_5[159:128];
      12'd85: pkret__h15775 = pktStore_5[191:160];
      12'd86: pkret__h15775 = pktStore_5[223:192];
      12'd87: pkret__h15775 = pktStore_5[255:224];
      12'd88: pkret__h15775 = pktStore_5[287:256];
      12'd89: pkret__h15775 = pktStore_5[319:288];
      12'd90: pkret__h15775 = pktStore_5[351:320];
      12'd91: pkret__h15775 = pktStore_5[383:352];
      12'd92: pkret__h15775 = pktStore_5[415:384];
      12'd93: pkret__h15775 = pktStore_5[447:416];
      12'd94: pkret__h15775 = pktStore_5[479:448];
      12'd95: pkret__h15775 = pktStore_5[511:480];
      12'd96: pkret__h15775 = pktStore_6[31:0];
      12'd97: pkret__h15775 = pktStore_6[63:32];
      12'd98: pkret__h15775 = pktStore_6[95:64];
      12'd99: pkret__h15775 = pktStore_6[127:96];
      12'd100: pkret__h15775 = pktStore_6[159:128];
      12'd101: pkret__h15775 = pktStore_6[191:160];
      12'd102: pkret__h15775 = pktStore_6[223:192];
      12'd103: pkret__h15775 = pktStore_6[255:224];
      12'd104: pkret__h15775 = pktStore_6[287:256];
      12'd105: pkret__h15775 = pktStore_6[319:288];
      12'd106: pkret__h15775 = pktStore_6[351:320];
      12'd107: pkret__h15775 = pktStore_6[383:352];
      12'd108: pkret__h15775 = pktStore_6[415:384];
      12'd109: pkret__h15775 = pktStore_6[447:416];
      12'd110: pkret__h15775 = pktStore_6[479:448];
      12'd111: pkret__h15775 = pktStore_6[511:480];
      12'd112: pkret__h15775 = pktStore_7[31:0];
      12'd113: pkret__h15775 = pktStore_7[63:32];
      12'd114: pkret__h15775 = pktStore_7[95:64];
      12'd115: pkret__h15775 = pktStore_7[127:96];
      12'd116: pkret__h15775 = pktStore_7[159:128];
      12'd117: pkret__h15775 = pktStore_7[191:160];
      12'd118: pkret__h15775 = pktStore_7[223:192];
      12'd119: pkret__h15775 = pktStore_7[255:224];
      12'd120: pkret__h15775 = pktStore_7[287:256];
      12'd121: pkret__h15775 = pktStore_7[319:288];
      12'd122: pkret__h15775 = pktStore_7[351:320];
      12'd123: pkret__h15775 = pktStore_7[383:352];
      12'd124: pkret__h15775 = pktStore_7[415:384];
      12'd125: pkret__h15775 = pktStore_7[447:416];
      12'd126: pkret__h15775 = pktStore_7[479:448];
      12'd127: pkret__h15775 = pktStore_7[511:480];
      12'd128: pkret__h15775 = pktStore_8[31:0];
      12'd129: pkret__h15775 = pktStore_8[63:32];
      12'd130: pkret__h15775 = pktStore_8[95:64];
      12'd131: pkret__h15775 = pktStore_8[127:96];
      12'd132: pkret__h15775 = pktStore_8[159:128];
      12'd133: pkret__h15775 = pktStore_8[191:160];
      12'd134: pkret__h15775 = pktStore_8[223:192];
      12'd135: pkret__h15775 = pktStore_8[255:224];
      12'd136: pkret__h15775 = pktStore_8[287:256];
      12'd137: pkret__h15775 = pktStore_8[319:288];
      12'd138: pkret__h15775 = pktStore_8[351:320];
      12'd139: pkret__h15775 = pktStore_8[383:352];
      12'd140: pkret__h15775 = pktStore_8[415:384];
      12'd141: pkret__h15775 = pktStore_8[447:416];
      12'd142: pkret__h15775 = pktStore_8[479:448];
      12'd143: pkret__h15775 = pktStore_8[511:480];
      12'd144: pkret__h15775 = pktStore_9[31:0];
      12'd145: pkret__h15775 = pktStore_9[63:32];
      12'd146: pkret__h15775 = pktStore_9[95:64];
      12'd147: pkret__h15775 = pktStore_9[127:96];
      12'd148: pkret__h15775 = pktStore_9[159:128];
      12'd149: pkret__h15775 = pktStore_9[191:160];
      12'd150: pkret__h15775 = pktStore_9[223:192];
      12'd151: pkret__h15775 = pktStore_9[255:224];
      12'd152: pkret__h15775 = pktStore_9[287:256];
      12'd153: pkret__h15775 = pktStore_9[319:288];
      12'd154: pkret__h15775 = pktStore_9[351:320];
      12'd155: pkret__h15775 = pktStore_9[383:352];
      12'd156: pkret__h15775 = pktStore_9[415:384];
      12'd157: pkret__h15775 = pktStore_9[447:416];
      12'd158: pkret__h15775 = pktStore_9[479:448];
      12'd159: pkret__h15775 = pktStore_9[511:480];
      12'd160: pkret__h15775 = pktStore_10[31:0];
      12'd161: pkret__h15775 = pktStore_10[63:32];
      12'd162: pkret__h15775 = pktStore_10[95:64];
      12'd163: pkret__h15775 = pktStore_10[127:96];
      12'd164: pkret__h15775 = pktStore_10[159:128];
      12'd165: pkret__h15775 = pktStore_10[191:160];
      12'd166: pkret__h15775 = pktStore_10[223:192];
      12'd167: pkret__h15775 = pktStore_10[255:224];
      12'd168: pkret__h15775 = pktStore_10[287:256];
      12'd169: pkret__h15775 = pktStore_10[319:288];
      12'd170: pkret__h15775 = pktStore_10[351:320];
      12'd171: pkret__h15775 = pktStore_10[383:352];
      12'd172: pkret__h15775 = pktStore_10[415:384];
      12'd173: pkret__h15775 = pktStore_10[447:416];
      12'd174: pkret__h15775 = pktStore_10[479:448];
      12'd175: pkret__h15775 = pktStore_10[511:480];
      12'd176: pkret__h15775 = pktStore_11[31:0];
      12'd177: pkret__h15775 = pktStore_11[63:32];
      12'd178: pkret__h15775 = pktStore_11[95:64];
      12'd179: pkret__h15775 = pktStore_11[127:96];
      12'd180: pkret__h15775 = pktStore_11[159:128];
      12'd181: pkret__h15775 = pktStore_11[191:160];
      12'd182: pkret__h15775 = pktStore_11[223:192];
      12'd183: pkret__h15775 = pktStore_11[255:224];
      12'd184: pkret__h15775 = pktStore_11[287:256];
      12'd185: pkret__h15775 = pktStore_11[319:288];
      12'd186: pkret__h15775 = pktStore_11[351:320];
      12'd187: pkret__h15775 = pktStore_11[383:352];
      12'd188: pkret__h15775 = pktStore_11[415:384];
      12'd189: pkret__h15775 = pktStore_11[447:416];
      12'd190: pkret__h15775 = pktStore_11[479:448];
      12'd191: pkret__h15775 = pktStore_11[511:480];
      12'd192: pkret__h15775 = pktStore_12[31:0];
      12'd193: pkret__h15775 = pktStore_12[63:32];
      12'd194: pkret__h15775 = pktStore_12[95:64];
      12'd195: pkret__h15775 = pktStore_12[127:96];
      12'd196: pkret__h15775 = pktStore_12[159:128];
      12'd197: pkret__h15775 = pktStore_12[191:160];
      12'd198: pkret__h15775 = pktStore_12[223:192];
      12'd199: pkret__h15775 = pktStore_12[255:224];
      12'd200: pkret__h15775 = pktStore_12[287:256];
      12'd201: pkret__h15775 = pktStore_12[319:288];
      12'd202: pkret__h15775 = pktStore_12[351:320];
      12'd203: pkret__h15775 = pktStore_12[383:352];
      12'd204: pkret__h15775 = pktStore_12[415:384];
      12'd205: pkret__h15775 = pktStore_12[447:416];
      12'd206: pkret__h15775 = pktStore_12[479:448];
      12'd207: pkret__h15775 = pktStore_12[511:480];
      12'd208: pkret__h15775 = pktStore_13[31:0];
      12'd209: pkret__h15775 = pktStore_13[63:32];
      12'd210: pkret__h15775 = pktStore_13[95:64];
      12'd211: pkret__h15775 = pktStore_13[127:96];
      12'd212: pkret__h15775 = pktStore_13[159:128];
      12'd213: pkret__h15775 = pktStore_13[191:160];
      12'd214: pkret__h15775 = pktStore_13[223:192];
      12'd215: pkret__h15775 = pktStore_13[255:224];
      12'd216: pkret__h15775 = pktStore_13[287:256];
      12'd217: pkret__h15775 = pktStore_13[319:288];
      12'd218: pkret__h15775 = pktStore_13[351:320];
      12'd219: pkret__h15775 = pktStore_13[383:352];
      12'd220: pkret__h15775 = pktStore_13[415:384];
      12'd221: pkret__h15775 = pktStore_13[447:416];
      12'd222: pkret__h15775 = pktStore_13[479:448];
      12'd223: pkret__h15775 = pktStore_13[511:480];
      12'd224: pkret__h15775 = pktStore_14[31:0];
      12'd225: pkret__h15775 = pktStore_14[63:32];
      12'd226: pkret__h15775 = pktStore_14[95:64];
      12'd227: pkret__h15775 = pktStore_14[127:96];
      12'd228: pkret__h15775 = pktStore_14[159:128];
      12'd229: pkret__h15775 = pktStore_14[191:160];
      12'd230: pkret__h15775 = pktStore_14[223:192];
      12'd231: pkret__h15775 = pktStore_14[255:224];
      12'd232: pkret__h15775 = pktStore_14[287:256];
      12'd233: pkret__h15775 = pktStore_14[319:288];
      12'd234: pkret__h15775 = pktStore_14[351:320];
      12'd235: pkret__h15775 = pktStore_14[383:352];
      12'd236: pkret__h15775 = pktStore_14[415:384];
      12'd237: pkret__h15775 = pktStore_14[447:416];
      12'd238: pkret__h15775 = pktStore_14[479:448];
      12'd239: pkret__h15775 = pktStore_14[511:480];
      12'd240: pkret__h15775 = pktStore_15[31:0];
      12'd241: pkret__h15775 = pktStore_15[63:32];
      12'd242: pkret__h15775 = pktStore_15[95:64];
      12'd243: pkret__h15775 = pktStore_15[127:96];
      12'd244: pkret__h15775 = pktStore_15[159:128];
      12'd245: pkret__h15775 = pktStore_15[191:160];
      12'd246: pkret__h15775 = pktStore_15[223:192];
      12'd247: pkret__h15775 = pktStore_15[255:224];
      12'd248: pkret__h15775 = pktStore_15[287:256];
      12'd249: pkret__h15775 = pktStore_15[319:288];
      12'd250: pkret__h15775 = pktStore_15[351:320];
      12'd251: pkret__h15775 = pktStore_15[383:352];
      12'd252: pkret__h15775 = pktStore_15[415:384];
      12'd253: pkret__h15775 = pktStore_15[447:416];
      12'd254: pkret__h15775 = pktStore_15[479:448];
      12'd255: pkret__h15775 = pktStore_15[511:480];
      default: pkret__h15775 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beatCnt_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	empty_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	enable_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	full_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rdPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	s1_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s2_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	s2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sin_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wrPtr_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (beatCnt_r_EN) beatCnt_r <= `BSV_ASSIGNMENT_DELAY beatCnt_r_D_IN;
	if (empty_r_EN) empty_r <= `BSV_ASSIGNMENT_DELAY empty_r_D_IN;
	if (enable_r_EN) enable_r <= `BSV_ASSIGNMENT_DELAY enable_r_D_IN;
	if (full_r_EN) full_r <= `BSV_ASSIGNMENT_DELAY full_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (pktDrop_r_clear_r_EN)
	  pktDrop_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_clear_r_D_IN;
	if (pktDrop_r_incr_r_EN)
	  pktDrop_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_incr_r_D_IN;
	if (pktError_r_clear_r_EN)
	  pktError_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktError_r_clear_r_D_IN;
	if (pktError_r_incr_r_EN)
	  pktError_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktError_r_incr_r_D_IN;
	if (ptpCnt_r_clear_r_EN)
	  ptpCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_clear_r_D_IN;
	if (ptpCnt_r_incr_r_EN)
	  ptpCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_incr_r_D_IN;
	if (rdPtr_r_EN) rdPtr_r <= `BSV_ASSIGNMENT_DELAY rdPtr_r_D_IN;
	if (s1_sop_r_EN) s1_sop_r <= `BSV_ASSIGNMENT_DELAY s1_sop_r_D_IN;
	if (s1_valid_EN) s1_valid <= `BSV_ASSIGNMENT_DELAY s1_valid_D_IN;
	if (s2_sop_r_EN) s2_sop_r <= `BSV_ASSIGNMENT_DELAY s2_sop_r_D_IN;
	if (s2_valid_EN) s2_valid <= `BSV_ASSIGNMENT_DELAY s2_valid_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (sin_sop_r_EN) sin_sop_r <= `BSV_ASSIGNMENT_DELAY sin_sop_r_D_IN;
	if (wrPtr_r_EN) wrPtr_r <= `BSV_ASSIGNMENT_DELAY wrPtr_r_D_IN;
      end
    if (capture_r_EN) capture_r <= `BSV_ASSIGNMENT_DELAY capture_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktDrop_r_EN) pktDrop_r <= `BSV_ASSIGNMENT_DELAY pktDrop_r_D_IN;
    if (pktError_r_EN) pktError_r <= `BSV_ASSIGNMENT_DELAY pktError_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (ptpCnt_r_EN) ptpCnt_r <= `BSV_ASSIGNMENT_DELAY ptpCnt_r_D_IN;
    if (s1_r_EN) s1_r <= `BSV_ASSIGNMENT_DELAY s1_r_D_IN;
    if (s2_r_EN) s2_r <= `BSV_ASSIGNMENT_DELAY s2_r_D_IN;
    if (timeStamps_0_EN)
      timeStamps_0 <= `BSV_ASSIGNMENT_DELAY timeStamps_0_D_IN;
    if (timeStamps_1_EN)
      timeStamps_1 <= `BSV_ASSIGNMENT_DELAY timeStamps_1_D_IN;
    if (timeStamps_2_EN)
      timeStamps_2 <= `BSV_ASSIGNMENT_DELAY timeStamps_2_D_IN;
    if (timeStamps_3_EN)
      timeStamps_3 <= `BSV_ASSIGNMENT_DELAY timeStamps_3_D_IN;
    if (timeStamps_4_EN)
      timeStamps_4 <= `BSV_ASSIGNMENT_DELAY timeStamps_4_D_IN;
    if (timeStamps_5_EN)
      timeStamps_5 <= `BSV_ASSIGNMENT_DELAY timeStamps_5_D_IN;
    if (timeStamps_6_EN)
      timeStamps_6 <= `BSV_ASSIGNMENT_DELAY timeStamps_6_D_IN;
    if (timeStamps_7_EN)
      timeStamps_7 <= `BSV_ASSIGNMENT_DELAY timeStamps_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beatCnt_r = 2'h2;
    capture_r = 1'h0;
    empty_r = 1'h0;
    enable_r = 1'h0;
    full_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktDrop_r = 32'hAAAAAAAA;
    pktDrop_r_clear_r = 1'h0;
    pktDrop_r_incr_r = 1'h0;
    pktError_r = 32'hAAAAAAAA;
    pktError_r_clear_r = 1'h0;
    pktError_r_incr_r = 1'h0;
    pktStore_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_1 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_10 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_11 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_12 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_13 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_14 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_15 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_2 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_3 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_4 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_5 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_6 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_7 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_8 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pktStore_9 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ptpCnt_r = 32'hAAAAAAAA;
    ptpCnt_r_clear_r = 1'h0;
    ptpCnt_r_incr_r = 1'h0;
    rdPtr_r = 4'hA;
    s1_r =
	657'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s1_sop_r = 1'h0;
    s1_valid = 1'h0;
    s2_r =
	657'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    s2_sop_r = 1'h0;
    s2_valid = 1'h0;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    sin_sop_r = 1'h0;
    timeStamps_0 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_1 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_2 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_3 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_4 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_5 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_6 = 80'hAAAAAAAAAAAAAAAAAAAA;
    timeStamps_7 = 80'hAAAAAAAAAAAAAAAAAAAA;
    wrPtr_r = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd5 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd10 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd11 &&
	  saxi_a4rdAddr_q_0[11:10] == 2'b0)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_captureAndMove && capture_r && !full_r && s1_r[0] &&
	  beatCnt_r == 2'd3)
	$display("Invalid size of ptp packet");
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] != 6'd6 &&
	  saxi_a4wrAddr_q_0[7:2] != 6'd7)
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkIngressCapture_64

