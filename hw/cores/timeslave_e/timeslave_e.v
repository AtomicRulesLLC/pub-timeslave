// Copyright (c) 2020 Atomic Rules LLC - All Rights Reserved
// This file contains "Licensed Materials" as defined in the Software License
// Agreement (SLA). It is provided strictly under the terms of the SLA.



//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// usr_s_axis_tready              O     1 reg
// mac_m_axis_tvalid              O     1 reg
// mac_m_axis_tdata               O    64 reg
// mac_m_axis_tuser               O     2 reg
// mac_m_axis_tkeep               O     8 reg
// mac_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// tx_ptp_tstamp_tready           O     1 const
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// usr_s_axis_tdata               I    64 reg
// usr_s_axis_tuser               I     1 reg
// usr_s_axis_tkeep               I     8 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// tx_ptp_tstamp_tdata            I    80 reg
// usr_s_axis_tvalid              I     1
// usr_s_axis_tlast               I     1 reg
// mac_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
// tx_ptp_tstamp_tvalid           I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkEgressMerge_8(s_axi_aclk,
		       s_axi_aresetn,

		       usr_s_axis_tvalid,

		       usr_s_axis_tready,

		       usr_s_axis_tdata,

		       usr_s_axis_tuser,

		       usr_s_axis_tkeep,

		       usr_s_axis_tlast,

		       mac_m_axis_tvalid,

		       mac_m_axis_tready,

		       mac_m_axis_tdata,

		       mac_m_axis_tuser,

		       mac_m_axis_tkeep,

		       mac_m_axis_tlast,

		       s_axi_awvalid,

		       s_axi_awready,

		       s_axi_awaddr,

		       s_axi_awprot,

		       s_axi_wvalid,

		       s_axi_wready,

		       s_axi_wdata,

		       s_axi_wstrb,

		       s_axi_bvalid,

		       s_axi_bready,

		       s_axi_bresp,

		       s_axi_arvalid,

		       s_axi_arready,

		       s_axi_araddr,

		       s_axi_arprot,

		       s_axi_rvalid,

		       s_axi_rready,

		       s_axi_rdata,

		       s_axi_rresp,

		       tx_ptp_tstamp_tdata,
		       tx_ptp_tstamp_tvalid,

		       tx_ptp_tstamp_tready);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method usr_s_axis_mTVALID
  input  usr_s_axis_tvalid;

  // value method usr_s_axis_sTREADY
  output usr_s_axis_tready;

  // action method usr_s_axis_mTDATA
  input  [63 : 0] usr_s_axis_tdata;

  // action method usr_s_axis_mTSTRB

  // action method usr_s_axis_mTUSER
  input  usr_s_axis_tuser;

  // action method usr_s_axis_mTKEEP
  input  [7 : 0] usr_s_axis_tkeep;

  // action method usr_s_axis_mTLAST
  input  usr_s_axis_tlast;

  // value method mac_m_axis_mTVALID
  output mac_m_axis_tvalid;

  // action method mac_m_axis_sTREADY
  input  mac_m_axis_tready;

  // value method mac_m_axis_mTDATA
  output [63 : 0] mac_m_axis_tdata;

  // value method mac_m_axis_mTSTRB

  // value method mac_m_axis_mTUSER
  output [1 : 0] mac_m_axis_tuser;

  // value method mac_m_axis_mTKEEP
  output [7 : 0] mac_m_axis_tkeep;

  // value method mac_m_axis_mTLAST
  output mac_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // action method tx_ptp_tstamp_tdata
  input  [79 : 0] tx_ptp_tstamp_tdata;
  input  tx_ptp_tstamp_tvalid;

  // value method tx_ptp_tstamp_tready
  output tx_ptp_tstamp_tready;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [63 : 0] mac_m_axis_tdata;
  wire [31 : 0] s_axi_rdata;
  wire [7 : 0] mac_m_axis_tkeep;
  wire [1 : 0] mac_m_axis_tuser, s_axi_bresp, s_axi_rresp;
  wire mac_m_axis_tlast,
       mac_m_axis_tvalid,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       tx_ptp_tstamp_tready,
       usr_s_axis_tready;

  // inlined wires
  wire insCnt_r_incr_r_1_whas,
       pktCnt_r_incr_r_1_whas,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beat_r
  reg [3 : 0] beat_r;
  wire [3 : 0] beat_r_D_IN;
  wire beat_r_EN;

  // register insCnt_r
  reg [31 : 0] insCnt_r;
  wire [31 : 0] insCnt_r_D_IN;
  wire insCnt_r_EN;

  // register insCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg insCnt_r_clear_r;
  wire insCnt_r_clear_r_D_IN, insCnt_r_clear_r_EN;

  // register insCnt_r_incr_r
  reg insCnt_r_incr_r;
  wire insCnt_r_incr_r_D_IN, insCnt_r_incr_r_EN;

  // register ins_rdy_r
  reg ins_rdy_r;
  wire ins_rdy_r_D_IN, ins_rdy_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktStore_0
  reg [31 : 0] pktStore_0;
  wire [31 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [31 : 0] pktStore_1;
  wire [31 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [31 : 0] pktStore_10;
  wire [31 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [31 : 0] pktStore_11;
  wire [31 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [31 : 0] pktStore_12;
  wire [31 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [31 : 0] pktStore_13;
  wire [31 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [31 : 0] pktStore_14;
  wire [31 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [31 : 0] pktStore_15;
  wire [31 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [31 : 0] pktStore_16;
  wire [31 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [31 : 0] pktStore_17;
  wire [31 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [31 : 0] pktStore_18;
  wire [31 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [31 : 0] pktStore_19;
  wire [31 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [31 : 0] pktStore_2;
  wire [31 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [31 : 0] pktStore_20;
  wire [31 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [31 : 0] pktStore_21;
  wire [31 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [31 : 0] pktStore_22;
  wire [31 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [31 : 0] pktStore_23;
  wire [31 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [31 : 0] pktStore_24;
  wire [31 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [31 : 0] pktStore_25;
  wire [31 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [31 : 0] pktStore_26;
  wire [31 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [31 : 0] pktStore_27;
  wire [31 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [31 : 0] pktStore_28;
  wire [31 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [31 : 0] pktStore_29;
  wire [31 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [31 : 0] pktStore_3;
  wire [31 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [31 : 0] pktStore_30;
  wire [31 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [31 : 0] pktStore_31;
  wire [31 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_4
  reg [31 : 0] pktStore_4;
  wire [31 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [31 : 0] pktStore_5;
  wire [31 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [31 : 0] pktStore_6;
  wire [31 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [31 : 0] pktStore_7;
  wire [31 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [31 : 0] pktStore_8;
  wire [31 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [31 : 0] pktStore_9;
  wire [31 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register toSend_r
  reg [7 : 0] toSend_r;
  wire [7 : 0] toSend_r_D_IN;
  wire toSend_r_EN;

  // register ts_valid_r
  reg ts_valid_r;
  wire ts_valid_r_D_IN, ts_valid_r_EN;

  // register tx_ptp_tstamp_r
  reg [79 : 0] tx_ptp_tstamp_r;
  wire [79 : 0] tx_ptp_tstamp_r_D_IN;
  wire tx_ptp_tstamp_r_EN;

  // register userOut_0
  reg [31 : 0] userOut_0;
  wire [31 : 0] userOut_0_D_IN;
  wire userOut_0_EN;

  // register usr_sop_r
  reg usr_sop_r;
  wire usr_sop_r_D_IN, usr_sop_r_EN;

  // ports of submodule s0_f
  wire [73 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // ports of submodule s1_f
  wire [74 : 0] s1_f_D_IN, s1_f_D_OUT;
  wire s1_f_CLR, s1_f_DEQ, s1_f_EMPTY_N, s1_f_ENQ, s1_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_insCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_insCnt_r_setClear,
       CAN_FIRE_RL_insCnt_r_update,
       CAN_FIRE_RL_moveInsPkt,
       CAN_FIRE_RL_moveUsrPkt,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_mac_m_axis_sTREADY,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_tx_ptp_tstamp_tdata,
       CAN_FIRE_usr_s_axis_mTDATA,
       CAN_FIRE_usr_s_axis_mTKEEP,
       CAN_FIRE_usr_s_axis_mTLAST,
       CAN_FIRE_usr_s_axis_mTSTRB,
       CAN_FIRE_usr_s_axis_mTUSER,
       CAN_FIRE_usr_s_axis_mTVALID,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_insCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_insCnt_r_setClear,
       WILL_FIRE_RL_insCnt_r_update,
       WILL_FIRE_RL_moveInsPkt,
       WILL_FIRE_RL_moveUsrPkt,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_mac_m_axis_sTREADY,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_tx_ptp_tstamp_tdata,
       WILL_FIRE_usr_s_axis_mTDATA,
       WILL_FIRE_usr_s_axis_mTKEEP,
       WILL_FIRE_usr_s_axis_mTLAST,
       WILL_FIRE_usr_s_axis_mTSTRB,
       WILL_FIRE_usr_s_axis_mTUSER,
       WILL_FIRE_usr_s_axis_mTVALID;

  // inputs to muxes for submodule ports
  wire [74 : 0] MUX_s1_f_enq_1__VAL_1, MUX_s1_f_enq_1__VAL_2;
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire [7 : 0] MUX_toSend_r_write_1__VAL_2;
  wire MUX_ins_rdy_r_write_1__SEL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2,
       MUX_ts_valid_r_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] x_data__h4507;
  reg [31 : 0] v__h14436;
  wire [31 : 0] cpret__h14512, cpret__h14548, cpret__h14584;
  wire [7 : 0] x__h9684, x_keep__h4508;
  wire toSend_r_0_ULE_8___d61;

  // action method usr_s_axis_mTVALID
  assign CAN_FIRE_usr_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTVALID = usr_s_axis_tvalid ;

  // value method usr_s_axis_sTREADY
  assign usr_s_axis_tready = s0_f_FULL_N ;

  // action method usr_s_axis_mTDATA
  assign CAN_FIRE_usr_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTDATA = 1'd1 ;

  // action method usr_s_axis_mTSTRB
  assign CAN_FIRE_usr_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTSTRB = 1'd1 ;

  // action method usr_s_axis_mTUSER
  assign CAN_FIRE_usr_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTUSER = 1'd1 ;

  // action method usr_s_axis_mTKEEP
  assign CAN_FIRE_usr_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTKEEP = 1'd1 ;

  // action method usr_s_axis_mTLAST
  assign CAN_FIRE_usr_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTLAST = usr_s_axis_tlast ;

  // value method mac_m_axis_mTVALID
  assign mac_m_axis_tvalid = s1_f_EMPTY_N ;

  // action method mac_m_axis_sTREADY
  assign CAN_FIRE_mac_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_mac_m_axis_sTREADY = mac_m_axis_tready ;

  // value method mac_m_axis_mTDATA
  assign mac_m_axis_tdata = s1_f_D_OUT[74:11] ;

  // value method mac_m_axis_mTUSER
  assign mac_m_axis_tuser = s1_f_D_OUT[2:1] ;

  // value method mac_m_axis_mTKEEP
  assign mac_m_axis_tkeep = s1_f_D_OUT[10:3] ;

  // value method mac_m_axis_mTLAST
  assign mac_m_axis_tlast = s1_f_EMPTY_N && s1_f_D_OUT[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // action method tx_ptp_tstamp_tdata
  assign CAN_FIRE_tx_ptp_tstamp_tdata = 1'd1 ;
  assign WILL_FIRE_tx_ptp_tstamp_tdata = tx_ptp_tstamp_tvalid ;

  // value method tx_ptp_tstamp_tready
  assign tx_ptp_tstamp_tready = 1'd1 ;

  // submodule s0_f
  FIFO2 #(.width(32'd74), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						.CLK(s_axi_aclk),
						.D_IN(s0_f_D_IN),
						.ENQ(s0_f_ENQ),
						.DEQ(s0_f_DEQ),
						.CLR(s0_f_CLR),
						.D_OUT(s0_f_D_OUT),
						.FULL_N(s0_f_FULL_N),
						.EMPTY_N(s0_f_EMPTY_N));

  // submodule s1_f
  FIFO2 #(.width(32'd75), .guarded(32'd1)) s1_f(.RST(s_axi_aresetn__DELAYED),
						.CLK(s_axi_aclk),
						.D_IN(s1_f_D_IN),
						.ENQ(s1_f_ENQ),
						.DEQ(s1_f_DEQ),
						.CLR(s1_f_CLR),
						.D_OUT(s1_f_D_OUT),
						.FULL_N(s1_f_FULL_N),
						.EMPTY_N(s1_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways = s0_f_FULL_N && usr_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_moveUsrPkt
  assign CAN_FIRE_RL_moveUsrPkt =
	     s1_f_FULL_N && s0_f_EMPTY_N && (!ins_rdy_r || !usr_sop_r) ;
  assign WILL_FIRE_RL_moveUsrPkt = CAN_FIRE_RL_moveUsrPkt ;

  // rule RL_moveInsPkt
  assign CAN_FIRE_RL_moveInsPkt = s1_f_FULL_N && ins_rdy_r && usr_sop_r ;
  assign WILL_FIRE_RL_moveInsPkt = CAN_FIRE_RL_moveInsPkt ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s1_f_EMPTY_N && mac_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd6 &&
	     saxi_a4wrData_q_0[0] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_insCnt_r_update
  assign CAN_FIRE_RL_insCnt_r_update = insCnt_r_clear_r || insCnt_r_incr_r ;
  assign WILL_FIRE_RL_insCnt_r_update = CAN_FIRE_RL_insCnt_r_update ;

  // rule RL_insCnt_r_setClear
  assign CAN_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_insCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_ins_rdy_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_ts_valid_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ;
  assign MUX_s1_f_enq_1__VAL_1 = { s0_f_D_OUT[73:2], 2'd0, s0_f_D_OUT[0] } ;
  assign MUX_s1_f_enq_1__VAL_2 =
	     { x_data__h4507,
	       x_keep__h4508,
	       userOut_0[1:0],
	       toSend_r_0_ULE_8___d61 } ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 = { 2'd0, v__h14436 } ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;
  assign MUX_toSend_r_write_1__VAL_2 = toSend_r - 8'd8 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_moveUsrPkt && s0_f_D_OUT[0] ;
  assign insCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_moveInsPkt && toSend_r_0_ULE_8___d61 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;

  // register beat_r
  assign beat_r_D_IN = toSend_r_0_ULE_8___d61 ? 4'd0 : beat_r + 4'd1 ;
  assign beat_r_EN = CAN_FIRE_RL_moveInsPkt ;

  // register insCnt_r
  assign insCnt_r_D_IN = insCnt_r_clear_r ? 32'd0 : insCnt_r + 32'd1 ;
  assign insCnt_r_EN = CAN_FIRE_RL_insCnt_r_update ;

  // register insCnt_r_clear_r
  assign insCnt_r_clear_r_D_IN = WILL_FIRE_RL_insCnt_r_setClear ;
  assign insCnt_r_clear_r_EN =
	     WILL_FIRE_RL_insCnt_r_update && insCnt_r_clear_r ||
	     WILL_FIRE_RL_insCnt_r_setClear ;

  // register insCnt_r_incr_r
  assign insCnt_r_incr_r_D_IN = insCnt_r_incr_r_1_whas ;
  assign insCnt_r_incr_r_EN = 1'd1 ;

  // register ins_rdy_r
  assign ins_rdy_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] != 8'd0 :
	       !toSend_r_0_ULE_8___d61 ;
  assign ins_rdy_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd0 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_1
  assign pktStore_1_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd1 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_10
  assign pktStore_10_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd10 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_11
  assign pktStore_11_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd11 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_12
  assign pktStore_12_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd12 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_13
  assign pktStore_13_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd13 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_14
  assign pktStore_14_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd14 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_15
  assign pktStore_15_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd15 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_16
  assign pktStore_16_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd16 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_17
  assign pktStore_17_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd17 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_18
  assign pktStore_18_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd18 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_19
  assign pktStore_19_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd19 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_2
  assign pktStore_2_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd2 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_20
  assign pktStore_20_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd20 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_21
  assign pktStore_21_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd21 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_22
  assign pktStore_22_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd22 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_23
  assign pktStore_23_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd23 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_24
  assign pktStore_24_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd24 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_25
  assign pktStore_25_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd25 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_26
  assign pktStore_26_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd26 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_27
  assign pktStore_27_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd27 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_28
  assign pktStore_28_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd28 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_29
  assign pktStore_29_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd29 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_3
  assign pktStore_3_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd3 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_30
  assign pktStore_30_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd30 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_31
  assign pktStore_31_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd31 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_4
  assign pktStore_4_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd4 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_5
  assign pktStore_5_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd5 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_6
  assign pktStore_6_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_7
  assign pktStore_7_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_8
  assign pktStore_8_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd8 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_9
  assign pktStore_9_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd9 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_1:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(MUX_saxi_a4rdResp_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdResp_q_0_write_1__SEL_1:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_1:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(MUX_saxi_a4wrData_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrData_q_0_write_1__SEL_1:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register toSend_r
  assign toSend_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] :
	       MUX_toSend_r_write_1__VAL_2 ;
  assign toSend_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register ts_valid_r
  assign ts_valid_r_D_IN = !MUX_ts_valid_r_write_1__SEL_1 ;
  assign ts_valid_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ||
	     tx_ptp_tstamp_tvalid ;

  // register tx_ptp_tstamp_r
  assign tx_ptp_tstamp_r_D_IN = tx_ptp_tstamp_tdata ;
  assign tx_ptp_tstamp_r_EN = tx_ptp_tstamp_tvalid ;

  // register userOut_0
  assign userOut_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign userOut_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd128 ;

  // register usr_sop_r
  assign usr_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign usr_sop_r_EN = CAN_FIRE_RL_moveUsrPkt ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { usr_s_axis_tdata,
	       usr_s_axis_tkeep,
	       usr_s_axis_tuser,
	       usr_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_moveUsrPkt ;
  assign s0_f_CLR = 1'b0 ;

  // submodule s1_f
  assign s1_f_D_IN =
	     WILL_FIRE_RL_moveUsrPkt ?
	       MUX_s1_f_enq_1__VAL_1 :
	       MUX_s1_f_enq_1__VAL_2 ;
  assign s1_f_ENQ = WILL_FIRE_RL_moveUsrPkt || WILL_FIRE_RL_moveInsPkt ;
  assign s1_f_DEQ = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign s1_f_CLR = 1'b0 ;

  // remaining internal signals
  assign cpret__h14512 = { 31'd0, ins_rdy_r } ;
  assign cpret__h14548 = { 31'd0, ts_valid_r } ;
  assign cpret__h14584 = { 16'd0, tx_ptp_tstamp_r[79:64] } ;
  assign toSend_r_0_ULE_8___d61 = toSend_r <= 8'd8 ;
  assign x__h9684 = 8'd255 << toSend_r ;
  assign x_keep__h4508 = toSend_r_0_ULE_8___d61 ? ~x__h9684 : 8'd255 ;
  always@(beat_r or
	  pktStore_1 or
	  pktStore_0 or
	  pktStore_3 or
	  pktStore_2 or
	  pktStore_5 or
	  pktStore_4 or
	  pktStore_7 or
	  pktStore_6 or
	  pktStore_9 or
	  pktStore_8 or
	  pktStore_11 or
	  pktStore_10 or
	  pktStore_13 or
	  pktStore_12 or
	  pktStore_15 or
	  pktStore_14 or
	  pktStore_17 or
	  pktStore_16 or
	  pktStore_19 or
	  pktStore_18 or
	  pktStore_21 or
	  pktStore_20 or
	  pktStore_23 or
	  pktStore_22 or
	  pktStore_25 or
	  pktStore_24 or
	  pktStore_27 or
	  pktStore_26 or
	  pktStore_29 or pktStore_28 or pktStore_31 or pktStore_30)
  begin
    case (beat_r)
      4'd0: x_data__h4507 = { pktStore_1, pktStore_0 };
      4'd1: x_data__h4507 = { pktStore_3, pktStore_2 };
      4'd2: x_data__h4507 = { pktStore_5, pktStore_4 };
      4'd3: x_data__h4507 = { pktStore_7, pktStore_6 };
      4'd4: x_data__h4507 = { pktStore_9, pktStore_8 };
      4'd5: x_data__h4507 = { pktStore_11, pktStore_10 };
      4'd6: x_data__h4507 = { pktStore_13, pktStore_12 };
      4'd7: x_data__h4507 = { pktStore_15, pktStore_14 };
      4'd8: x_data__h4507 = { pktStore_17, pktStore_16 };
      4'd9: x_data__h4507 = { pktStore_19, pktStore_18 };
      4'd10: x_data__h4507 = { pktStore_21, pktStore_20 };
      4'd11: x_data__h4507 = { pktStore_23, pktStore_22 };
      4'd12: x_data__h4507 = { pktStore_25, pktStore_24 };
      4'd13: x_data__h4507 = { pktStore_27, pktStore_26 };
      4'd14: x_data__h4507 = { pktStore_29, pktStore_28 };
      4'd15: x_data__h4507 = { pktStore_31, pktStore_30 };
    endcase
  end
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h14512 or
	  pktCnt_r or
	  insCnt_r or cpret__h14548 or tx_ptp_tstamp_r or cpret__h14584)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h14436 = 32'd1447842644;
      6'd1: v__h14436 = 32'd808333637;
      6'd2: v__h14436 = 32'd128;
      6'd4: v__h14436 = cpret__h14512;
      6'd8: v__h14436 = pktCnt_r;
      6'd9: v__h14436 = insCnt_r;
      6'd12: v__h14436 = cpret__h14548;
      6'd13: v__h14436 = tx_ptp_tstamp_r[31:0];
      6'd14: v__h14436 = tx_ptp_tstamp_r[63:32];
      6'd15: v__h14436 = cpret__h14584;
      default: v__h14436 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beat_r <= `BSV_ASSIGNMENT_DELAY 4'd0;
	insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ins_rdy_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ts_valid_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	usr_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (beat_r_EN) beat_r <= `BSV_ASSIGNMENT_DELAY beat_r_D_IN;
	if (insCnt_r_clear_r_EN)
	  insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_clear_r_D_IN;
	if (insCnt_r_incr_r_EN)
	  insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_incr_r_D_IN;
	if (ins_rdy_r_EN) ins_rdy_r <= `BSV_ASSIGNMENT_DELAY ins_rdy_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (ts_valid_r_EN)
	  ts_valid_r <= `BSV_ASSIGNMENT_DELAY ts_valid_r_D_IN;
	if (usr_sop_r_EN) usr_sop_r <= `BSV_ASSIGNMENT_DELAY usr_sop_r_D_IN;
      end
    if (insCnt_r_EN) insCnt_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (toSend_r_EN) toSend_r <= `BSV_ASSIGNMENT_DELAY toSend_r_D_IN;
    if (tx_ptp_tstamp_r_EN)
      tx_ptp_tstamp_r <= `BSV_ASSIGNMENT_DELAY tx_ptp_tstamp_r_D_IN;
    if (userOut_0_EN) userOut_0 <= `BSV_ASSIGNMENT_DELAY userOut_0_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beat_r = 4'hA;
    insCnt_r = 32'hAAAAAAAA;
    insCnt_r_clear_r = 1'h0;
    insCnt_r_incr_r = 1'h0;
    ins_rdy_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktStore_0 = 32'hAAAAAAAA;
    pktStore_1 = 32'hAAAAAAAA;
    pktStore_10 = 32'hAAAAAAAA;
    pktStore_11 = 32'hAAAAAAAA;
    pktStore_12 = 32'hAAAAAAAA;
    pktStore_13 = 32'hAAAAAAAA;
    pktStore_14 = 32'hAAAAAAAA;
    pktStore_15 = 32'hAAAAAAAA;
    pktStore_16 = 32'hAAAAAAAA;
    pktStore_17 = 32'hAAAAAAAA;
    pktStore_18 = 32'hAAAAAAAA;
    pktStore_19 = 32'hAAAAAAAA;
    pktStore_2 = 32'hAAAAAAAA;
    pktStore_20 = 32'hAAAAAAAA;
    pktStore_21 = 32'hAAAAAAAA;
    pktStore_22 = 32'hAAAAAAAA;
    pktStore_23 = 32'hAAAAAAAA;
    pktStore_24 = 32'hAAAAAAAA;
    pktStore_25 = 32'hAAAAAAAA;
    pktStore_26 = 32'hAAAAAAAA;
    pktStore_27 = 32'hAAAAAAAA;
    pktStore_28 = 32'hAAAAAAAA;
    pktStore_29 = 32'hAAAAAAAA;
    pktStore_3 = 32'hAAAAAAAA;
    pktStore_30 = 32'hAAAAAAAA;
    pktStore_31 = 32'hAAAAAAAA;
    pktStore_4 = 32'hAAAAAAAA;
    pktStore_5 = 32'hAAAAAAAA;
    pktStore_6 = 32'hAAAAAAAA;
    pktStore_7 = 32'hAAAAAAAA;
    pktStore_8 = 32'hAAAAAAAA;
    pktStore_9 = 32'hAAAAAAAA;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    toSend_r = 8'hAA;
    ts_valid_r = 1'h0;
    tx_ptp_tstamp_r = 80'hAAAAAAAAAAAAAAAAAAAA;
    userOut_0 = 32'hAAAAAAAA;
    usr_sop_r = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd2 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd12 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd13 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd14 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd15)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] != 9'd5 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd6 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd12 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd128 &&
	  !saxi_a4wrAddr_q_0[10])
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkEgressMerge_8

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// usr_s_axis_tready              O     1 reg
// mac_m_axis_tvalid              O     1 reg
// mac_m_axis_tdata               O   128 reg
// mac_m_axis_tuser               O     2 reg
// mac_m_axis_tkeep               O    16 reg
// mac_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// tx_ptp_tstamp_tready           O     1 const
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// usr_s_axis_tdata               I   128 reg
// usr_s_axis_tuser               I     1 reg
// usr_s_axis_tkeep               I    16 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// tx_ptp_tstamp_tdata            I    80 reg
// usr_s_axis_tvalid              I     1
// usr_s_axis_tlast               I     1 reg
// mac_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
// tx_ptp_tstamp_tvalid           I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkEgressMerge_16(s_axi_aclk,
			s_axi_aresetn,

			usr_s_axis_tvalid,

			usr_s_axis_tready,

			usr_s_axis_tdata,

			usr_s_axis_tuser,

			usr_s_axis_tkeep,

			usr_s_axis_tlast,

			mac_m_axis_tvalid,

			mac_m_axis_tready,

			mac_m_axis_tdata,

			mac_m_axis_tuser,

			mac_m_axis_tkeep,

			mac_m_axis_tlast,

			s_axi_awvalid,

			s_axi_awready,

			s_axi_awaddr,

			s_axi_awprot,

			s_axi_wvalid,

			s_axi_wready,

			s_axi_wdata,

			s_axi_wstrb,

			s_axi_bvalid,

			s_axi_bready,

			s_axi_bresp,

			s_axi_arvalid,

			s_axi_arready,

			s_axi_araddr,

			s_axi_arprot,

			s_axi_rvalid,

			s_axi_rready,

			s_axi_rdata,

			s_axi_rresp,

			tx_ptp_tstamp_tdata,
			tx_ptp_tstamp_tvalid,

			tx_ptp_tstamp_tready);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method usr_s_axis_mTVALID
  input  usr_s_axis_tvalid;

  // value method usr_s_axis_sTREADY
  output usr_s_axis_tready;

  // action method usr_s_axis_mTDATA
  input  [127 : 0] usr_s_axis_tdata;

  // action method usr_s_axis_mTSTRB

  // action method usr_s_axis_mTUSER
  input  usr_s_axis_tuser;

  // action method usr_s_axis_mTKEEP
  input  [15 : 0] usr_s_axis_tkeep;

  // action method usr_s_axis_mTLAST
  input  usr_s_axis_tlast;

  // value method mac_m_axis_mTVALID
  output mac_m_axis_tvalid;

  // action method mac_m_axis_sTREADY
  input  mac_m_axis_tready;

  // value method mac_m_axis_mTDATA
  output [127 : 0] mac_m_axis_tdata;

  // value method mac_m_axis_mTSTRB

  // value method mac_m_axis_mTUSER
  output [1 : 0] mac_m_axis_tuser;

  // value method mac_m_axis_mTKEEP
  output [15 : 0] mac_m_axis_tkeep;

  // value method mac_m_axis_mTLAST
  output mac_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // action method tx_ptp_tstamp_tdata
  input  [79 : 0] tx_ptp_tstamp_tdata;
  input  tx_ptp_tstamp_tvalid;

  // value method tx_ptp_tstamp_tready
  output tx_ptp_tstamp_tready;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [127 : 0] mac_m_axis_tdata;
  wire [31 : 0] s_axi_rdata;
  wire [15 : 0] mac_m_axis_tkeep;
  wire [1 : 0] mac_m_axis_tuser, s_axi_bresp, s_axi_rresp;
  wire mac_m_axis_tlast,
       mac_m_axis_tvalid,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       tx_ptp_tstamp_tready,
       usr_s_axis_tready;

  // inlined wires
  wire insCnt_r_incr_r_1_whas,
       pktCnt_r_incr_r_1_whas,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beat_r
  reg [2 : 0] beat_r;
  wire [2 : 0] beat_r_D_IN;
  wire beat_r_EN;

  // register insCnt_r
  reg [31 : 0] insCnt_r;
  wire [31 : 0] insCnt_r_D_IN;
  wire insCnt_r_EN;

  // register insCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg insCnt_r_clear_r;
  wire insCnt_r_clear_r_D_IN, insCnt_r_clear_r_EN;

  // register insCnt_r_incr_r
  reg insCnt_r_incr_r;
  wire insCnt_r_incr_r_D_IN, insCnt_r_incr_r_EN;

  // register ins_rdy_r
  reg ins_rdy_r;
  wire ins_rdy_r_D_IN, ins_rdy_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktStore_0
  reg [31 : 0] pktStore_0;
  wire [31 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [31 : 0] pktStore_1;
  wire [31 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [31 : 0] pktStore_10;
  wire [31 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [31 : 0] pktStore_11;
  wire [31 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [31 : 0] pktStore_12;
  wire [31 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [31 : 0] pktStore_13;
  wire [31 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [31 : 0] pktStore_14;
  wire [31 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [31 : 0] pktStore_15;
  wire [31 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [31 : 0] pktStore_16;
  wire [31 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [31 : 0] pktStore_17;
  wire [31 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [31 : 0] pktStore_18;
  wire [31 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [31 : 0] pktStore_19;
  wire [31 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [31 : 0] pktStore_2;
  wire [31 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [31 : 0] pktStore_20;
  wire [31 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [31 : 0] pktStore_21;
  wire [31 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [31 : 0] pktStore_22;
  wire [31 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [31 : 0] pktStore_23;
  wire [31 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [31 : 0] pktStore_24;
  wire [31 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [31 : 0] pktStore_25;
  wire [31 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [31 : 0] pktStore_26;
  wire [31 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [31 : 0] pktStore_27;
  wire [31 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [31 : 0] pktStore_28;
  wire [31 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [31 : 0] pktStore_29;
  wire [31 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [31 : 0] pktStore_3;
  wire [31 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [31 : 0] pktStore_30;
  wire [31 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [31 : 0] pktStore_31;
  wire [31 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_4
  reg [31 : 0] pktStore_4;
  wire [31 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [31 : 0] pktStore_5;
  wire [31 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [31 : 0] pktStore_6;
  wire [31 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [31 : 0] pktStore_7;
  wire [31 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [31 : 0] pktStore_8;
  wire [31 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [31 : 0] pktStore_9;
  wire [31 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register toSend_r
  reg [7 : 0] toSend_r;
  wire [7 : 0] toSend_r_D_IN;
  wire toSend_r_EN;

  // register ts_valid_r
  reg ts_valid_r;
  wire ts_valid_r_D_IN, ts_valid_r_EN;

  // register tx_ptp_tstamp_r
  reg [79 : 0] tx_ptp_tstamp_r;
  wire [79 : 0] tx_ptp_tstamp_r_D_IN;
  wire tx_ptp_tstamp_r_EN;

  // register userOut_0
  reg [31 : 0] userOut_0;
  wire [31 : 0] userOut_0_D_IN;
  wire userOut_0_EN;

  // register usr_sop_r
  reg usr_sop_r;
  wire usr_sop_r_D_IN, usr_sop_r_EN;

  // ports of submodule s0_f
  wire [145 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // ports of submodule s1_f
  wire [146 : 0] s1_f_D_IN, s1_f_D_OUT;
  wire s1_f_CLR, s1_f_DEQ, s1_f_EMPTY_N, s1_f_ENQ, s1_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_insCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_insCnt_r_setClear,
       CAN_FIRE_RL_insCnt_r_update,
       CAN_FIRE_RL_moveInsPkt,
       CAN_FIRE_RL_moveUsrPkt,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_mac_m_axis_sTREADY,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_tx_ptp_tstamp_tdata,
       CAN_FIRE_usr_s_axis_mTDATA,
       CAN_FIRE_usr_s_axis_mTKEEP,
       CAN_FIRE_usr_s_axis_mTLAST,
       CAN_FIRE_usr_s_axis_mTSTRB,
       CAN_FIRE_usr_s_axis_mTUSER,
       CAN_FIRE_usr_s_axis_mTVALID,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_insCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_insCnt_r_setClear,
       WILL_FIRE_RL_insCnt_r_update,
       WILL_FIRE_RL_moveInsPkt,
       WILL_FIRE_RL_moveUsrPkt,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_mac_m_axis_sTREADY,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_tx_ptp_tstamp_tdata,
       WILL_FIRE_usr_s_axis_mTDATA,
       WILL_FIRE_usr_s_axis_mTKEEP,
       WILL_FIRE_usr_s_axis_mTLAST,
       WILL_FIRE_usr_s_axis_mTSTRB,
       WILL_FIRE_usr_s_axis_mTUSER,
       WILL_FIRE_usr_s_axis_mTVALID;

  // inputs to muxes for submodule ports
  wire [146 : 0] MUX_s1_f_enq_1__VAL_1, MUX_s1_f_enq_1__VAL_2;
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire [7 : 0] MUX_toSend_r_write_1__VAL_2;
  wire MUX_ins_rdy_r_write_1__SEL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2,
       MUX_ts_valid_r_write_1__SEL_1;

  // remaining internal signals
  reg [127 : 0] x_data__h4507;
  reg [31 : 0] v__h14092;
  wire [31 : 0] cpret__h14168, cpret__h14204, cpret__h14240;
  wire [15 : 0] x__h9340, x_keep__h4508;
  wire toSend_r_0_ULE_16___d61;

  // action method usr_s_axis_mTVALID
  assign CAN_FIRE_usr_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTVALID = usr_s_axis_tvalid ;

  // value method usr_s_axis_sTREADY
  assign usr_s_axis_tready = s0_f_FULL_N ;

  // action method usr_s_axis_mTDATA
  assign CAN_FIRE_usr_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTDATA = 1'd1 ;

  // action method usr_s_axis_mTSTRB
  assign CAN_FIRE_usr_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTSTRB = 1'd1 ;

  // action method usr_s_axis_mTUSER
  assign CAN_FIRE_usr_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTUSER = 1'd1 ;

  // action method usr_s_axis_mTKEEP
  assign CAN_FIRE_usr_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTKEEP = 1'd1 ;

  // action method usr_s_axis_mTLAST
  assign CAN_FIRE_usr_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTLAST = usr_s_axis_tlast ;

  // value method mac_m_axis_mTVALID
  assign mac_m_axis_tvalid = s1_f_EMPTY_N ;

  // action method mac_m_axis_sTREADY
  assign CAN_FIRE_mac_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_mac_m_axis_sTREADY = mac_m_axis_tready ;

  // value method mac_m_axis_mTDATA
  assign mac_m_axis_tdata = s1_f_D_OUT[146:19] ;

  // value method mac_m_axis_mTUSER
  assign mac_m_axis_tuser = s1_f_D_OUT[2:1] ;

  // value method mac_m_axis_mTKEEP
  assign mac_m_axis_tkeep = s1_f_D_OUT[18:3] ;

  // value method mac_m_axis_mTLAST
  assign mac_m_axis_tlast = s1_f_EMPTY_N && s1_f_D_OUT[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // action method tx_ptp_tstamp_tdata
  assign CAN_FIRE_tx_ptp_tstamp_tdata = 1'd1 ;
  assign WILL_FIRE_tx_ptp_tstamp_tdata = tx_ptp_tstamp_tvalid ;

  // value method tx_ptp_tstamp_tready
  assign tx_ptp_tstamp_tready = 1'd1 ;

  // submodule s0_f
  FIFO2 #(.width(32'd146), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // submodule s1_f
  FIFO2 #(.width(32'd147), .guarded(32'd1)) s1_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s1_f_D_IN),
						 .ENQ(s1_f_ENQ),
						 .DEQ(s1_f_DEQ),
						 .CLR(s1_f_CLR),
						 .D_OUT(s1_f_D_OUT),
						 .FULL_N(s1_f_FULL_N),
						 .EMPTY_N(s1_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways = s0_f_FULL_N && usr_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_moveUsrPkt
  assign CAN_FIRE_RL_moveUsrPkt =
	     s1_f_FULL_N && s0_f_EMPTY_N && (!ins_rdy_r || !usr_sop_r) ;
  assign WILL_FIRE_RL_moveUsrPkt = CAN_FIRE_RL_moveUsrPkt ;

  // rule RL_moveInsPkt
  assign CAN_FIRE_RL_moveInsPkt = s1_f_FULL_N && ins_rdy_r && usr_sop_r ;
  assign WILL_FIRE_RL_moveInsPkt = CAN_FIRE_RL_moveInsPkt ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s1_f_EMPTY_N && mac_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd6 &&
	     saxi_a4wrData_q_0[0] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_insCnt_r_update
  assign CAN_FIRE_RL_insCnt_r_update = insCnt_r_clear_r || insCnt_r_incr_r ;
  assign WILL_FIRE_RL_insCnt_r_update = CAN_FIRE_RL_insCnt_r_update ;

  // rule RL_insCnt_r_setClear
  assign CAN_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_insCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_ins_rdy_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_ts_valid_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ;
  assign MUX_s1_f_enq_1__VAL_1 = { s0_f_D_OUT[145:2], 2'd0, s0_f_D_OUT[0] } ;
  assign MUX_s1_f_enq_1__VAL_2 =
	     { x_data__h4507,
	       x_keep__h4508,
	       userOut_0[1:0],
	       toSend_r_0_ULE_16___d61 } ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 = { 2'd0, v__h14092 } ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;
  assign MUX_toSend_r_write_1__VAL_2 = toSend_r - 8'd16 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_moveUsrPkt && s0_f_D_OUT[0] ;
  assign insCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_moveInsPkt && toSend_r_0_ULE_16___d61 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;

  // register beat_r
  assign beat_r_D_IN = toSend_r_0_ULE_16___d61 ? 3'd0 : beat_r + 3'd1 ;
  assign beat_r_EN = CAN_FIRE_RL_moveInsPkt ;

  // register insCnt_r
  assign insCnt_r_D_IN = insCnt_r_clear_r ? 32'd0 : insCnt_r + 32'd1 ;
  assign insCnt_r_EN = CAN_FIRE_RL_insCnt_r_update ;

  // register insCnt_r_clear_r
  assign insCnt_r_clear_r_D_IN = WILL_FIRE_RL_insCnt_r_setClear ;
  assign insCnt_r_clear_r_EN =
	     WILL_FIRE_RL_insCnt_r_update && insCnt_r_clear_r ||
	     WILL_FIRE_RL_insCnt_r_setClear ;

  // register insCnt_r_incr_r
  assign insCnt_r_incr_r_D_IN = insCnt_r_incr_r_1_whas ;
  assign insCnt_r_incr_r_EN = 1'd1 ;

  // register ins_rdy_r
  assign ins_rdy_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] != 8'd0 :
	       !toSend_r_0_ULE_16___d61 ;
  assign ins_rdy_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd0 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_1
  assign pktStore_1_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd1 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_10
  assign pktStore_10_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd10 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_11
  assign pktStore_11_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd11 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_12
  assign pktStore_12_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd12 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_13
  assign pktStore_13_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd13 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_14
  assign pktStore_14_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd14 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_15
  assign pktStore_15_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd15 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_16
  assign pktStore_16_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd16 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_17
  assign pktStore_17_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd17 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_18
  assign pktStore_18_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd18 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_19
  assign pktStore_19_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd19 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_2
  assign pktStore_2_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd2 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_20
  assign pktStore_20_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd20 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_21
  assign pktStore_21_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd21 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_22
  assign pktStore_22_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd22 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_23
  assign pktStore_23_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd23 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_24
  assign pktStore_24_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd24 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_25
  assign pktStore_25_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd25 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_26
  assign pktStore_26_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd26 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_27
  assign pktStore_27_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd27 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_28
  assign pktStore_28_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd28 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_29
  assign pktStore_29_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd29 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_3
  assign pktStore_3_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd3 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_30
  assign pktStore_30_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd30 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_31
  assign pktStore_31_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd31 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_4
  assign pktStore_4_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd4 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_5
  assign pktStore_5_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd5 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_6
  assign pktStore_6_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_7
  assign pktStore_7_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_8
  assign pktStore_8_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd8 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_9
  assign pktStore_9_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd9 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_1:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(MUX_saxi_a4rdResp_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdResp_q_0_write_1__SEL_1:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_1:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(MUX_saxi_a4wrData_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrData_q_0_write_1__SEL_1:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register toSend_r
  assign toSend_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] :
	       MUX_toSend_r_write_1__VAL_2 ;
  assign toSend_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register ts_valid_r
  assign ts_valid_r_D_IN = !MUX_ts_valid_r_write_1__SEL_1 ;
  assign ts_valid_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ||
	     tx_ptp_tstamp_tvalid ;

  // register tx_ptp_tstamp_r
  assign tx_ptp_tstamp_r_D_IN = tx_ptp_tstamp_tdata ;
  assign tx_ptp_tstamp_r_EN = tx_ptp_tstamp_tvalid ;

  // register userOut_0
  assign userOut_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign userOut_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd128 ;

  // register usr_sop_r
  assign usr_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign usr_sop_r_EN = CAN_FIRE_RL_moveUsrPkt ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { usr_s_axis_tdata,
	       usr_s_axis_tkeep,
	       usr_s_axis_tuser,
	       usr_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_moveUsrPkt ;
  assign s0_f_CLR = 1'b0 ;

  // submodule s1_f
  assign s1_f_D_IN =
	     WILL_FIRE_RL_moveUsrPkt ?
	       MUX_s1_f_enq_1__VAL_1 :
	       MUX_s1_f_enq_1__VAL_2 ;
  assign s1_f_ENQ = WILL_FIRE_RL_moveUsrPkt || WILL_FIRE_RL_moveInsPkt ;
  assign s1_f_DEQ = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign s1_f_CLR = 1'b0 ;

  // remaining internal signals
  assign cpret__h14168 = { 31'd0, ins_rdy_r } ;
  assign cpret__h14204 = { 31'd0, ts_valid_r } ;
  assign cpret__h14240 = { 16'd0, tx_ptp_tstamp_r[79:64] } ;
  assign toSend_r_0_ULE_16___d61 = toSend_r <= 8'd16 ;
  assign x__h9340 = 16'd65535 << toSend_r ;
  assign x_keep__h4508 = toSend_r_0_ULE_16___d61 ? ~x__h9340 : 16'd65535 ;
  always@(beat_r or
	  pktStore_3 or
	  pktStore_2 or
	  pktStore_1 or
	  pktStore_0 or
	  pktStore_7 or
	  pktStore_6 or
	  pktStore_5 or
	  pktStore_4 or
	  pktStore_11 or
	  pktStore_10 or
	  pktStore_9 or
	  pktStore_8 or
	  pktStore_15 or
	  pktStore_14 or
	  pktStore_13 or
	  pktStore_12 or
	  pktStore_19 or
	  pktStore_18 or
	  pktStore_17 or
	  pktStore_16 or
	  pktStore_23 or
	  pktStore_22 or
	  pktStore_21 or
	  pktStore_20 or
	  pktStore_27 or
	  pktStore_26 or
	  pktStore_25 or
	  pktStore_24 or
	  pktStore_31 or pktStore_30 or pktStore_29 or pktStore_28)
  begin
    case (beat_r)
      3'd0:
	  x_data__h4507 = { pktStore_3, pktStore_2, pktStore_1, pktStore_0 };
      3'd1:
	  x_data__h4507 = { pktStore_7, pktStore_6, pktStore_5, pktStore_4 };
      3'd2:
	  x_data__h4507 =
	      { pktStore_11, pktStore_10, pktStore_9, pktStore_8 };
      3'd3:
	  x_data__h4507 =
	      { pktStore_15, pktStore_14, pktStore_13, pktStore_12 };
      3'd4:
	  x_data__h4507 =
	      { pktStore_19, pktStore_18, pktStore_17, pktStore_16 };
      3'd5:
	  x_data__h4507 =
	      { pktStore_23, pktStore_22, pktStore_21, pktStore_20 };
      3'd6:
	  x_data__h4507 =
	      { pktStore_27, pktStore_26, pktStore_25, pktStore_24 };
      3'd7:
	  x_data__h4507 =
	      { pktStore_31, pktStore_30, pktStore_29, pktStore_28 };
    endcase
  end
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h14168 or
	  pktCnt_r or
	  insCnt_r or cpret__h14204 or tx_ptp_tstamp_r or cpret__h14240)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h14092 = 32'd1447842644;
      6'd1: v__h14092 = 32'd808333637;
      6'd2: v__h14092 = 32'd128;
      6'd4: v__h14092 = cpret__h14168;
      6'd8: v__h14092 = pktCnt_r;
      6'd9: v__h14092 = insCnt_r;
      6'd12: v__h14092 = cpret__h14204;
      6'd13: v__h14092 = tx_ptp_tstamp_r[31:0];
      6'd14: v__h14092 = tx_ptp_tstamp_r[63:32];
      6'd15: v__h14092 = cpret__h14240;
      default: v__h14092 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beat_r <= `BSV_ASSIGNMENT_DELAY 3'd0;
	insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ins_rdy_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ts_valid_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	usr_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (beat_r_EN) beat_r <= `BSV_ASSIGNMENT_DELAY beat_r_D_IN;
	if (insCnt_r_clear_r_EN)
	  insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_clear_r_D_IN;
	if (insCnt_r_incr_r_EN)
	  insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_incr_r_D_IN;
	if (ins_rdy_r_EN) ins_rdy_r <= `BSV_ASSIGNMENT_DELAY ins_rdy_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (ts_valid_r_EN)
	  ts_valid_r <= `BSV_ASSIGNMENT_DELAY ts_valid_r_D_IN;
	if (usr_sop_r_EN) usr_sop_r <= `BSV_ASSIGNMENT_DELAY usr_sop_r_D_IN;
      end
    if (insCnt_r_EN) insCnt_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (toSend_r_EN) toSend_r <= `BSV_ASSIGNMENT_DELAY toSend_r_D_IN;
    if (tx_ptp_tstamp_r_EN)
      tx_ptp_tstamp_r <= `BSV_ASSIGNMENT_DELAY tx_ptp_tstamp_r_D_IN;
    if (userOut_0_EN) userOut_0 <= `BSV_ASSIGNMENT_DELAY userOut_0_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beat_r = 3'h2;
    insCnt_r = 32'hAAAAAAAA;
    insCnt_r_clear_r = 1'h0;
    insCnt_r_incr_r = 1'h0;
    ins_rdy_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktStore_0 = 32'hAAAAAAAA;
    pktStore_1 = 32'hAAAAAAAA;
    pktStore_10 = 32'hAAAAAAAA;
    pktStore_11 = 32'hAAAAAAAA;
    pktStore_12 = 32'hAAAAAAAA;
    pktStore_13 = 32'hAAAAAAAA;
    pktStore_14 = 32'hAAAAAAAA;
    pktStore_15 = 32'hAAAAAAAA;
    pktStore_16 = 32'hAAAAAAAA;
    pktStore_17 = 32'hAAAAAAAA;
    pktStore_18 = 32'hAAAAAAAA;
    pktStore_19 = 32'hAAAAAAAA;
    pktStore_2 = 32'hAAAAAAAA;
    pktStore_20 = 32'hAAAAAAAA;
    pktStore_21 = 32'hAAAAAAAA;
    pktStore_22 = 32'hAAAAAAAA;
    pktStore_23 = 32'hAAAAAAAA;
    pktStore_24 = 32'hAAAAAAAA;
    pktStore_25 = 32'hAAAAAAAA;
    pktStore_26 = 32'hAAAAAAAA;
    pktStore_27 = 32'hAAAAAAAA;
    pktStore_28 = 32'hAAAAAAAA;
    pktStore_29 = 32'hAAAAAAAA;
    pktStore_3 = 32'hAAAAAAAA;
    pktStore_30 = 32'hAAAAAAAA;
    pktStore_31 = 32'hAAAAAAAA;
    pktStore_4 = 32'hAAAAAAAA;
    pktStore_5 = 32'hAAAAAAAA;
    pktStore_6 = 32'hAAAAAAAA;
    pktStore_7 = 32'hAAAAAAAA;
    pktStore_8 = 32'hAAAAAAAA;
    pktStore_9 = 32'hAAAAAAAA;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    toSend_r = 8'hAA;
    ts_valid_r = 1'h0;
    tx_ptp_tstamp_r = 80'hAAAAAAAAAAAAAAAAAAAA;
    userOut_0 = 32'hAAAAAAAA;
    usr_sop_r = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd2 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd12 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd13 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd14 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd15)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] != 9'd5 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd6 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd12 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd128 &&
	  !saxi_a4wrAddr_q_0[10])
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkEgressMerge_16

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// usr_s_axis_tready              O     1 reg
// mac_m_axis_tvalid              O     1 reg
// mac_m_axis_tdata               O   256 reg
// mac_m_axis_tuser               O     2 reg
// mac_m_axis_tkeep               O    32 reg
// mac_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// tx_ptp_tstamp_tready           O     1 const
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// usr_s_axis_tdata               I   256 reg
// usr_s_axis_tuser               I     1 reg
// usr_s_axis_tkeep               I    32 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// tx_ptp_tstamp_tdata            I    80 reg
// usr_s_axis_tvalid              I     1
// usr_s_axis_tlast               I     1 reg
// mac_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
// tx_ptp_tstamp_tvalid           I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkEgressMerge_32(s_axi_aclk,
			s_axi_aresetn,

			usr_s_axis_tvalid,

			usr_s_axis_tready,

			usr_s_axis_tdata,

			usr_s_axis_tuser,

			usr_s_axis_tkeep,

			usr_s_axis_tlast,

			mac_m_axis_tvalid,

			mac_m_axis_tready,

			mac_m_axis_tdata,

			mac_m_axis_tuser,

			mac_m_axis_tkeep,

			mac_m_axis_tlast,

			s_axi_awvalid,

			s_axi_awready,

			s_axi_awaddr,

			s_axi_awprot,

			s_axi_wvalid,

			s_axi_wready,

			s_axi_wdata,

			s_axi_wstrb,

			s_axi_bvalid,

			s_axi_bready,

			s_axi_bresp,

			s_axi_arvalid,

			s_axi_arready,

			s_axi_araddr,

			s_axi_arprot,

			s_axi_rvalid,

			s_axi_rready,

			s_axi_rdata,

			s_axi_rresp,

			tx_ptp_tstamp_tdata,
			tx_ptp_tstamp_tvalid,

			tx_ptp_tstamp_tready);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method usr_s_axis_mTVALID
  input  usr_s_axis_tvalid;

  // value method usr_s_axis_sTREADY
  output usr_s_axis_tready;

  // action method usr_s_axis_mTDATA
  input  [255 : 0] usr_s_axis_tdata;

  // action method usr_s_axis_mTSTRB

  // action method usr_s_axis_mTUSER
  input  usr_s_axis_tuser;

  // action method usr_s_axis_mTKEEP
  input  [31 : 0] usr_s_axis_tkeep;

  // action method usr_s_axis_mTLAST
  input  usr_s_axis_tlast;

  // value method mac_m_axis_mTVALID
  output mac_m_axis_tvalid;

  // action method mac_m_axis_sTREADY
  input  mac_m_axis_tready;

  // value method mac_m_axis_mTDATA
  output [255 : 0] mac_m_axis_tdata;

  // value method mac_m_axis_mTSTRB

  // value method mac_m_axis_mTUSER
  output [1 : 0] mac_m_axis_tuser;

  // value method mac_m_axis_mTKEEP
  output [31 : 0] mac_m_axis_tkeep;

  // value method mac_m_axis_mTLAST
  output mac_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // action method tx_ptp_tstamp_tdata
  input  [79 : 0] tx_ptp_tstamp_tdata;
  input  tx_ptp_tstamp_tvalid;

  // value method tx_ptp_tstamp_tready
  output tx_ptp_tstamp_tready;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [255 : 0] mac_m_axis_tdata;
  wire [31 : 0] mac_m_axis_tkeep, s_axi_rdata;
  wire [1 : 0] mac_m_axis_tuser, s_axi_bresp, s_axi_rresp;
  wire mac_m_axis_tlast,
       mac_m_axis_tvalid,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       tx_ptp_tstamp_tready,
       usr_s_axis_tready;

  // inlined wires
  wire insCnt_r_incr_r_1_whas,
       pktCnt_r_incr_r_1_whas,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beat_r
  reg [1 : 0] beat_r;
  wire [1 : 0] beat_r_D_IN;
  wire beat_r_EN;

  // register insCnt_r
  reg [31 : 0] insCnt_r;
  wire [31 : 0] insCnt_r_D_IN;
  wire insCnt_r_EN;

  // register insCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg insCnt_r_clear_r;
  wire insCnt_r_clear_r_D_IN, insCnt_r_clear_r_EN;

  // register insCnt_r_incr_r
  reg insCnt_r_incr_r;
  wire insCnt_r_incr_r_D_IN, insCnt_r_incr_r_EN;

  // register ins_rdy_r
  reg ins_rdy_r;
  wire ins_rdy_r_D_IN, ins_rdy_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktStore_0
  reg [31 : 0] pktStore_0;
  wire [31 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [31 : 0] pktStore_1;
  wire [31 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [31 : 0] pktStore_10;
  wire [31 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [31 : 0] pktStore_11;
  wire [31 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [31 : 0] pktStore_12;
  wire [31 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [31 : 0] pktStore_13;
  wire [31 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [31 : 0] pktStore_14;
  wire [31 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [31 : 0] pktStore_15;
  wire [31 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [31 : 0] pktStore_16;
  wire [31 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [31 : 0] pktStore_17;
  wire [31 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [31 : 0] pktStore_18;
  wire [31 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [31 : 0] pktStore_19;
  wire [31 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [31 : 0] pktStore_2;
  wire [31 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [31 : 0] pktStore_20;
  wire [31 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [31 : 0] pktStore_21;
  wire [31 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [31 : 0] pktStore_22;
  wire [31 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [31 : 0] pktStore_23;
  wire [31 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [31 : 0] pktStore_24;
  wire [31 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [31 : 0] pktStore_25;
  wire [31 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [31 : 0] pktStore_26;
  wire [31 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [31 : 0] pktStore_27;
  wire [31 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [31 : 0] pktStore_28;
  wire [31 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [31 : 0] pktStore_29;
  wire [31 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [31 : 0] pktStore_3;
  wire [31 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [31 : 0] pktStore_30;
  wire [31 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [31 : 0] pktStore_31;
  wire [31 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_4
  reg [31 : 0] pktStore_4;
  wire [31 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [31 : 0] pktStore_5;
  wire [31 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [31 : 0] pktStore_6;
  wire [31 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [31 : 0] pktStore_7;
  wire [31 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [31 : 0] pktStore_8;
  wire [31 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [31 : 0] pktStore_9;
  wire [31 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register toSend_r
  reg [7 : 0] toSend_r;
  wire [7 : 0] toSend_r_D_IN;
  wire toSend_r_EN;

  // register ts_valid_r
  reg ts_valid_r;
  wire ts_valid_r_D_IN, ts_valid_r_EN;

  // register tx_ptp_tstamp_r
  reg [79 : 0] tx_ptp_tstamp_r;
  wire [79 : 0] tx_ptp_tstamp_r_D_IN;
  wire tx_ptp_tstamp_r_EN;

  // register userOut_0
  reg [31 : 0] userOut_0;
  wire [31 : 0] userOut_0_D_IN;
  wire userOut_0_EN;

  // register usr_sop_r
  reg usr_sop_r;
  wire usr_sop_r_D_IN, usr_sop_r_EN;

  // ports of submodule s0_f
  wire [289 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // ports of submodule s1_f
  wire [290 : 0] s1_f_D_IN, s1_f_D_OUT;
  wire s1_f_CLR, s1_f_DEQ, s1_f_EMPTY_N, s1_f_ENQ, s1_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_insCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_insCnt_r_setClear,
       CAN_FIRE_RL_insCnt_r_update,
       CAN_FIRE_RL_moveInsPkt,
       CAN_FIRE_RL_moveUsrPkt,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_mac_m_axis_sTREADY,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_tx_ptp_tstamp_tdata,
       CAN_FIRE_usr_s_axis_mTDATA,
       CAN_FIRE_usr_s_axis_mTKEEP,
       CAN_FIRE_usr_s_axis_mTLAST,
       CAN_FIRE_usr_s_axis_mTSTRB,
       CAN_FIRE_usr_s_axis_mTUSER,
       CAN_FIRE_usr_s_axis_mTVALID,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_insCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_insCnt_r_setClear,
       WILL_FIRE_RL_insCnt_r_update,
       WILL_FIRE_RL_moveInsPkt,
       WILL_FIRE_RL_moveUsrPkt,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_mac_m_axis_sTREADY,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_tx_ptp_tstamp_tdata,
       WILL_FIRE_usr_s_axis_mTDATA,
       WILL_FIRE_usr_s_axis_mTKEEP,
       WILL_FIRE_usr_s_axis_mTLAST,
       WILL_FIRE_usr_s_axis_mTSTRB,
       WILL_FIRE_usr_s_axis_mTUSER,
       WILL_FIRE_usr_s_axis_mTVALID;

  // inputs to muxes for submodule ports
  wire [290 : 0] MUX_s1_f_enq_1__VAL_1, MUX_s1_f_enq_1__VAL_2;
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire [7 : 0] MUX_toSend_r_write_1__VAL_2;
  wire MUX_ins_rdy_r_write_1__SEL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2,
       MUX_ts_valid_r_write_1__SEL_1;

  // remaining internal signals
  reg [255 : 0] x_data__h4507;
  reg [31 : 0] v__h13920;
  wire [31 : 0] cpret__h13996,
		cpret__h14032,
		cpret__h14068,
		x__h9168,
		x_keep__h4508;
  wire toSend_r_0_ULE_32___d61;

  // action method usr_s_axis_mTVALID
  assign CAN_FIRE_usr_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTVALID = usr_s_axis_tvalid ;

  // value method usr_s_axis_sTREADY
  assign usr_s_axis_tready = s0_f_FULL_N ;

  // action method usr_s_axis_mTDATA
  assign CAN_FIRE_usr_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTDATA = 1'd1 ;

  // action method usr_s_axis_mTSTRB
  assign CAN_FIRE_usr_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTSTRB = 1'd1 ;

  // action method usr_s_axis_mTUSER
  assign CAN_FIRE_usr_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTUSER = 1'd1 ;

  // action method usr_s_axis_mTKEEP
  assign CAN_FIRE_usr_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTKEEP = 1'd1 ;

  // action method usr_s_axis_mTLAST
  assign CAN_FIRE_usr_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTLAST = usr_s_axis_tlast ;

  // value method mac_m_axis_mTVALID
  assign mac_m_axis_tvalid = s1_f_EMPTY_N ;

  // action method mac_m_axis_sTREADY
  assign CAN_FIRE_mac_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_mac_m_axis_sTREADY = mac_m_axis_tready ;

  // value method mac_m_axis_mTDATA
  assign mac_m_axis_tdata = s1_f_D_OUT[290:35] ;

  // value method mac_m_axis_mTUSER
  assign mac_m_axis_tuser = s1_f_D_OUT[2:1] ;

  // value method mac_m_axis_mTKEEP
  assign mac_m_axis_tkeep = s1_f_D_OUT[34:3] ;

  // value method mac_m_axis_mTLAST
  assign mac_m_axis_tlast = s1_f_EMPTY_N && s1_f_D_OUT[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // action method tx_ptp_tstamp_tdata
  assign CAN_FIRE_tx_ptp_tstamp_tdata = 1'd1 ;
  assign WILL_FIRE_tx_ptp_tstamp_tdata = tx_ptp_tstamp_tvalid ;

  // value method tx_ptp_tstamp_tready
  assign tx_ptp_tstamp_tready = 1'd1 ;

  // submodule s0_f
  FIFO2 #(.width(32'd290), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // submodule s1_f
  FIFO2 #(.width(32'd291), .guarded(32'd1)) s1_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s1_f_D_IN),
						 .ENQ(s1_f_ENQ),
						 .DEQ(s1_f_DEQ),
						 .CLR(s1_f_CLR),
						 .D_OUT(s1_f_D_OUT),
						 .FULL_N(s1_f_FULL_N),
						 .EMPTY_N(s1_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways = s0_f_FULL_N && usr_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_moveUsrPkt
  assign CAN_FIRE_RL_moveUsrPkt =
	     s1_f_FULL_N && s0_f_EMPTY_N && (!ins_rdy_r || !usr_sop_r) ;
  assign WILL_FIRE_RL_moveUsrPkt = CAN_FIRE_RL_moveUsrPkt ;

  // rule RL_moveInsPkt
  assign CAN_FIRE_RL_moveInsPkt = s1_f_FULL_N && ins_rdy_r && usr_sop_r ;
  assign WILL_FIRE_RL_moveInsPkt = CAN_FIRE_RL_moveInsPkt ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s1_f_EMPTY_N && mac_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd6 &&
	     saxi_a4wrData_q_0[0] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_insCnt_r_update
  assign CAN_FIRE_RL_insCnt_r_update = insCnt_r_clear_r || insCnt_r_incr_r ;
  assign WILL_FIRE_RL_insCnt_r_update = CAN_FIRE_RL_insCnt_r_update ;

  // rule RL_insCnt_r_setClear
  assign CAN_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_insCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_ins_rdy_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_ts_valid_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ;
  assign MUX_s1_f_enq_1__VAL_1 = { s0_f_D_OUT[289:2], 2'd0, s0_f_D_OUT[0] } ;
  assign MUX_s1_f_enq_1__VAL_2 =
	     { x_data__h4507,
	       x_keep__h4508,
	       userOut_0[1:0],
	       toSend_r_0_ULE_32___d61 } ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 = { 2'd0, v__h13920 } ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;
  assign MUX_toSend_r_write_1__VAL_2 = toSend_r - 8'd32 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_moveUsrPkt && s0_f_D_OUT[0] ;
  assign insCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_moveInsPkt && toSend_r_0_ULE_32___d61 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;

  // register beat_r
  assign beat_r_D_IN = toSend_r_0_ULE_32___d61 ? 2'd0 : beat_r + 2'd1 ;
  assign beat_r_EN = CAN_FIRE_RL_moveInsPkt ;

  // register insCnt_r
  assign insCnt_r_D_IN = insCnt_r_clear_r ? 32'd0 : insCnt_r + 32'd1 ;
  assign insCnt_r_EN = CAN_FIRE_RL_insCnt_r_update ;

  // register insCnt_r_clear_r
  assign insCnt_r_clear_r_D_IN = WILL_FIRE_RL_insCnt_r_setClear ;
  assign insCnt_r_clear_r_EN =
	     WILL_FIRE_RL_insCnt_r_update && insCnt_r_clear_r ||
	     WILL_FIRE_RL_insCnt_r_setClear ;

  // register insCnt_r_incr_r
  assign insCnt_r_incr_r_D_IN = insCnt_r_incr_r_1_whas ;
  assign insCnt_r_incr_r_EN = 1'd1 ;

  // register ins_rdy_r
  assign ins_rdy_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] != 8'd0 :
	       !toSend_r_0_ULE_32___d61 ;
  assign ins_rdy_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd0 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_1
  assign pktStore_1_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd1 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_10
  assign pktStore_10_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd10 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_11
  assign pktStore_11_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd11 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_12
  assign pktStore_12_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd12 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_13
  assign pktStore_13_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd13 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_14
  assign pktStore_14_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd14 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_15
  assign pktStore_15_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd15 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_16
  assign pktStore_16_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd16 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_17
  assign pktStore_17_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd17 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_18
  assign pktStore_18_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd18 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_19
  assign pktStore_19_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd19 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_2
  assign pktStore_2_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd2 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_20
  assign pktStore_20_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd20 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_21
  assign pktStore_21_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd21 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_22
  assign pktStore_22_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd22 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_23
  assign pktStore_23_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd23 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_24
  assign pktStore_24_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd24 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_25
  assign pktStore_25_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd25 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_26
  assign pktStore_26_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd26 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_27
  assign pktStore_27_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd27 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_28
  assign pktStore_28_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd28 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_29
  assign pktStore_29_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd29 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_3
  assign pktStore_3_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd3 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_30
  assign pktStore_30_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd30 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_31
  assign pktStore_31_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd31 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_4
  assign pktStore_4_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd4 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_5
  assign pktStore_5_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd5 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_6
  assign pktStore_6_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_7
  assign pktStore_7_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_8
  assign pktStore_8_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd8 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_9
  assign pktStore_9_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd9 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_1:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(MUX_saxi_a4rdResp_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdResp_q_0_write_1__SEL_1:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_1:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(MUX_saxi_a4wrData_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrData_q_0_write_1__SEL_1:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register toSend_r
  assign toSend_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] :
	       MUX_toSend_r_write_1__VAL_2 ;
  assign toSend_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register ts_valid_r
  assign ts_valid_r_D_IN = !MUX_ts_valid_r_write_1__SEL_1 ;
  assign ts_valid_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ||
	     tx_ptp_tstamp_tvalid ;

  // register tx_ptp_tstamp_r
  assign tx_ptp_tstamp_r_D_IN = tx_ptp_tstamp_tdata ;
  assign tx_ptp_tstamp_r_EN = tx_ptp_tstamp_tvalid ;

  // register userOut_0
  assign userOut_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign userOut_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd128 ;

  // register usr_sop_r
  assign usr_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign usr_sop_r_EN = CAN_FIRE_RL_moveUsrPkt ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { usr_s_axis_tdata,
	       usr_s_axis_tkeep,
	       usr_s_axis_tuser,
	       usr_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_moveUsrPkt ;
  assign s0_f_CLR = 1'b0 ;

  // submodule s1_f
  assign s1_f_D_IN =
	     WILL_FIRE_RL_moveUsrPkt ?
	       MUX_s1_f_enq_1__VAL_1 :
	       MUX_s1_f_enq_1__VAL_2 ;
  assign s1_f_ENQ = WILL_FIRE_RL_moveUsrPkt || WILL_FIRE_RL_moveInsPkt ;
  assign s1_f_DEQ = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign s1_f_CLR = 1'b0 ;

  // remaining internal signals
  assign cpret__h13996 = { 31'd0, ins_rdy_r } ;
  assign cpret__h14032 = { 31'd0, ts_valid_r } ;
  assign cpret__h14068 = { 16'd0, tx_ptp_tstamp_r[79:64] } ;
  assign toSend_r_0_ULE_32___d61 = toSend_r <= 8'd32 ;
  assign x__h9168 = 32'hFFFFFFFF << toSend_r ;
  assign x_keep__h4508 = toSend_r_0_ULE_32___d61 ? ~x__h9168 : 32'hFFFFFFFF ;
  always@(beat_r or
	  pktStore_7 or
	  pktStore_6 or
	  pktStore_5 or
	  pktStore_4 or
	  pktStore_3 or
	  pktStore_2 or
	  pktStore_1 or
	  pktStore_0 or
	  pktStore_15 or
	  pktStore_14 or
	  pktStore_13 or
	  pktStore_12 or
	  pktStore_11 or
	  pktStore_10 or
	  pktStore_9 or
	  pktStore_8 or
	  pktStore_23 or
	  pktStore_22 or
	  pktStore_21 or
	  pktStore_20 or
	  pktStore_19 or
	  pktStore_18 or
	  pktStore_17 or
	  pktStore_16 or
	  pktStore_31 or
	  pktStore_30 or
	  pktStore_29 or
	  pktStore_28 or
	  pktStore_27 or pktStore_26 or pktStore_25 or pktStore_24)
  begin
    case (beat_r)
      2'd0:
	  x_data__h4507 =
	      { pktStore_7,
		pktStore_6,
		pktStore_5,
		pktStore_4,
		pktStore_3,
		pktStore_2,
		pktStore_1,
		pktStore_0 };
      2'd1:
	  x_data__h4507 =
	      { pktStore_15,
		pktStore_14,
		pktStore_13,
		pktStore_12,
		pktStore_11,
		pktStore_10,
		pktStore_9,
		pktStore_8 };
      2'd2:
	  x_data__h4507 =
	      { pktStore_23,
		pktStore_22,
		pktStore_21,
		pktStore_20,
		pktStore_19,
		pktStore_18,
		pktStore_17,
		pktStore_16 };
      2'd3:
	  x_data__h4507 =
	      { pktStore_31,
		pktStore_30,
		pktStore_29,
		pktStore_28,
		pktStore_27,
		pktStore_26,
		pktStore_25,
		pktStore_24 };
    endcase
  end
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h13996 or
	  pktCnt_r or
	  insCnt_r or cpret__h14032 or tx_ptp_tstamp_r or cpret__h14068)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h13920 = 32'd1447842644;
      6'd1: v__h13920 = 32'd808333637;
      6'd2: v__h13920 = 32'd128;
      6'd4: v__h13920 = cpret__h13996;
      6'd8: v__h13920 = pktCnt_r;
      6'd9: v__h13920 = insCnt_r;
      6'd12: v__h13920 = cpret__h14032;
      6'd13: v__h13920 = tx_ptp_tstamp_r[31:0];
      6'd14: v__h13920 = tx_ptp_tstamp_r[63:32];
      6'd15: v__h13920 = cpret__h14068;
      default: v__h13920 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beat_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ins_rdy_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ts_valid_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	usr_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (beat_r_EN) beat_r <= `BSV_ASSIGNMENT_DELAY beat_r_D_IN;
	if (insCnt_r_clear_r_EN)
	  insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_clear_r_D_IN;
	if (insCnt_r_incr_r_EN)
	  insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_incr_r_D_IN;
	if (ins_rdy_r_EN) ins_rdy_r <= `BSV_ASSIGNMENT_DELAY ins_rdy_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (ts_valid_r_EN)
	  ts_valid_r <= `BSV_ASSIGNMENT_DELAY ts_valid_r_D_IN;
	if (usr_sop_r_EN) usr_sop_r <= `BSV_ASSIGNMENT_DELAY usr_sop_r_D_IN;
      end
    if (insCnt_r_EN) insCnt_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (toSend_r_EN) toSend_r <= `BSV_ASSIGNMENT_DELAY toSend_r_D_IN;
    if (tx_ptp_tstamp_r_EN)
      tx_ptp_tstamp_r <= `BSV_ASSIGNMENT_DELAY tx_ptp_tstamp_r_D_IN;
    if (userOut_0_EN) userOut_0 <= `BSV_ASSIGNMENT_DELAY userOut_0_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beat_r = 2'h2;
    insCnt_r = 32'hAAAAAAAA;
    insCnt_r_clear_r = 1'h0;
    insCnt_r_incr_r = 1'h0;
    ins_rdy_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktStore_0 = 32'hAAAAAAAA;
    pktStore_1 = 32'hAAAAAAAA;
    pktStore_10 = 32'hAAAAAAAA;
    pktStore_11 = 32'hAAAAAAAA;
    pktStore_12 = 32'hAAAAAAAA;
    pktStore_13 = 32'hAAAAAAAA;
    pktStore_14 = 32'hAAAAAAAA;
    pktStore_15 = 32'hAAAAAAAA;
    pktStore_16 = 32'hAAAAAAAA;
    pktStore_17 = 32'hAAAAAAAA;
    pktStore_18 = 32'hAAAAAAAA;
    pktStore_19 = 32'hAAAAAAAA;
    pktStore_2 = 32'hAAAAAAAA;
    pktStore_20 = 32'hAAAAAAAA;
    pktStore_21 = 32'hAAAAAAAA;
    pktStore_22 = 32'hAAAAAAAA;
    pktStore_23 = 32'hAAAAAAAA;
    pktStore_24 = 32'hAAAAAAAA;
    pktStore_25 = 32'hAAAAAAAA;
    pktStore_26 = 32'hAAAAAAAA;
    pktStore_27 = 32'hAAAAAAAA;
    pktStore_28 = 32'hAAAAAAAA;
    pktStore_29 = 32'hAAAAAAAA;
    pktStore_3 = 32'hAAAAAAAA;
    pktStore_30 = 32'hAAAAAAAA;
    pktStore_31 = 32'hAAAAAAAA;
    pktStore_4 = 32'hAAAAAAAA;
    pktStore_5 = 32'hAAAAAAAA;
    pktStore_6 = 32'hAAAAAAAA;
    pktStore_7 = 32'hAAAAAAAA;
    pktStore_8 = 32'hAAAAAAAA;
    pktStore_9 = 32'hAAAAAAAA;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    toSend_r = 8'hAA;
    ts_valid_r = 1'h0;
    tx_ptp_tstamp_r = 80'hAAAAAAAAAAAAAAAAAAAA;
    userOut_0 = 32'hAAAAAAAA;
    usr_sop_r = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd2 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd12 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd13 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd14 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd15)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] != 9'd5 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd6 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd12 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd128 &&
	  !saxi_a4wrAddr_q_0[10])
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkEgressMerge_32

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
// Ports:
// Name                         I/O  size props
// usr_s_axis_tready              O     1 reg
// mac_m_axis_tvalid              O     1 reg
// mac_m_axis_tdata               O   512 reg
// mac_m_axis_tuser               O     2 reg
// mac_m_axis_tkeep               O    64 reg
// mac_m_axis_tlast               O     1
// s_axi_awready                  O     1
// s_axi_wready                   O     1
// s_axi_bvalid                   O     1 reg
// s_axi_bresp                    O     2 reg
// s_axi_arready                  O     1
// s_axi_rvalid                   O     1 reg
// s_axi_rdata                    O    32 reg
// s_axi_rresp                    O     2 reg
// tx_ptp_tstamp_tready           O     1 const
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// usr_s_axis_tdata               I   512 reg
// usr_s_axis_tuser               I     1 reg
// usr_s_axis_tkeep               I    64 reg
// s_axi_awaddr                   I    12
// s_axi_awprot                   I     3
// s_axi_wdata                    I    32
// s_axi_wstrb                    I     4
// s_axi_araddr                   I    12
// s_axi_arprot                   I     3
// tx_ptp_tstamp_tdata            I    80 reg
// usr_s_axis_tvalid              I     1
// usr_s_axis_tlast               I     1 reg
// mac_m_axis_tready              I     1
// s_axi_awvalid                  I     1
// s_axi_wvalid                   I     1
// s_axi_bready                   I     1
// s_axi_arvalid                  I     1
// s_axi_rready                   I     1
// tx_ptp_tstamp_tvalid           I     1
//
// No combinational paths from inputs to outputs
//
//
// DELAY_RESET s_axi_aresetn s_axi_aclk 256
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

(* KEEP_HIERARCHY = "YES" *)
module mkEgressMerge_64(s_axi_aclk,
			s_axi_aresetn,

			usr_s_axis_tvalid,

			usr_s_axis_tready,

			usr_s_axis_tdata,

			usr_s_axis_tuser,

			usr_s_axis_tkeep,

			usr_s_axis_tlast,

			mac_m_axis_tvalid,

			mac_m_axis_tready,

			mac_m_axis_tdata,

			mac_m_axis_tuser,

			mac_m_axis_tkeep,

			mac_m_axis_tlast,

			s_axi_awvalid,

			s_axi_awready,

			s_axi_awaddr,

			s_axi_awprot,

			s_axi_wvalid,

			s_axi_wready,

			s_axi_wdata,

			s_axi_wstrb,

			s_axi_bvalid,

			s_axi_bready,

			s_axi_bresp,

			s_axi_arvalid,

			s_axi_arready,

			s_axi_araddr,

			s_axi_arprot,

			s_axi_rvalid,

			s_axi_rready,

			s_axi_rdata,

			s_axi_rresp,

			tx_ptp_tstamp_tdata,
			tx_ptp_tstamp_tvalid,

			tx_ptp_tstamp_tready);
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // action method usr_s_axis_mTVALID
  input  usr_s_axis_tvalid;

  // value method usr_s_axis_sTREADY
  output usr_s_axis_tready;

  // action method usr_s_axis_mTDATA
  input  [511 : 0] usr_s_axis_tdata;

  // action method usr_s_axis_mTSTRB

  // action method usr_s_axis_mTUSER
  input  usr_s_axis_tuser;

  // action method usr_s_axis_mTKEEP
  input  [63 : 0] usr_s_axis_tkeep;

  // action method usr_s_axis_mTLAST
  input  usr_s_axis_tlast;

  // value method mac_m_axis_mTVALID
  output mac_m_axis_tvalid;

  // action method mac_m_axis_sTREADY
  input  mac_m_axis_tready;

  // value method mac_m_axis_mTDATA
  output [511 : 0] mac_m_axis_tdata;

  // value method mac_m_axis_mTSTRB

  // value method mac_m_axis_mTUSER
  output [1 : 0] mac_m_axis_tuser;

  // value method mac_m_axis_mTKEEP
  output [63 : 0] mac_m_axis_tkeep;

  // value method mac_m_axis_mTLAST
  output mac_m_axis_tlast;

  // action method s_axi_mAWVALID
  input  s_axi_awvalid;

  // value method s_axi_sAWREADY
  output s_axi_awready;

  // action method s_axi_mAWADDR
  input  [11 : 0] s_axi_awaddr;

  // action method s_axi_mAWPROT
  input  [2 : 0] s_axi_awprot;

  // action method s_axi_mWVALID
  input  s_axi_wvalid;

  // value method s_axi_sWREADY
  output s_axi_wready;

  // action method s_axi_mWDATA
  input  [31 : 0] s_axi_wdata;

  // action method s_axi_mWSTRB
  input  [3 : 0] s_axi_wstrb;

  // value method s_axi_sBVALID
  output s_axi_bvalid;

  // action method s_axi_mBREADY
  input  s_axi_bready;

  // value method s_axi_sBRESP
  output [1 : 0] s_axi_bresp;

  // action method s_axi_mARVALID
  input  s_axi_arvalid;

  // value method s_axi_sARREADY
  output s_axi_arready;

  // action method s_axi_mARADDR
  input  [11 : 0] s_axi_araddr;

  // action method s_axi_mARPROT
  input  [2 : 0] s_axi_arprot;

  // value method s_axi_sRVALID
  output s_axi_rvalid;

  // action method s_axi_mRREADY
  input  s_axi_rready;

  // value method s_axi_sRDATA
  output [31 : 0] s_axi_rdata;

  // value method s_axi_sRRESP
  output [1 : 0] s_axi_rresp;

  // action method tx_ptp_tstamp_tdata
  input  [79 : 0] tx_ptp_tstamp_tdata;
  input  tx_ptp_tstamp_tvalid;

  // value method tx_ptp_tstamp_tready
  output tx_ptp_tstamp_tready;

  // RESET DELAY FLOPS for `s_axi_aresetn'
  (* max_fanout = 256 *)  reg s_axi_aresetn__DELAYED;
  always @(posedge s_axi_aclk) s_axi_aresetn__DELAYED <= s_axi_aresetn;

  // signals for module outputs
  wire [511 : 0] mac_m_axis_tdata;
  wire [63 : 0] mac_m_axis_tkeep;
  wire [31 : 0] s_axi_rdata;
  wire [1 : 0] mac_m_axis_tuser, s_axi_bresp, s_axi_rresp;
  wire mac_m_axis_tlast,
       mac_m_axis_tvalid,
       s_axi_arready,
       s_axi_awready,
       s_axi_bvalid,
       s_axi_rvalid,
       s_axi_wready,
       tx_ptp_tstamp_tready,
       usr_s_axis_tready;

  // inlined wires
  wire insCnt_r_incr_r_1_whas,
       pktCnt_r_incr_r_1_whas,
       saxi_a4rdResp_dequeueing_whas,
       saxi_a4wrResp_dequeueing_whas;

  // register beat_r
  reg beat_r;
  wire beat_r_D_IN, beat_r_EN;

  // register insCnt_r
  reg [31 : 0] insCnt_r;
  wire [31 : 0] insCnt_r_D_IN;
  wire insCnt_r_EN;

  // register insCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg insCnt_r_clear_r;
  wire insCnt_r_clear_r_D_IN, insCnt_r_clear_r_EN;

  // register insCnt_r_incr_r
  reg insCnt_r_incr_r;
  wire insCnt_r_incr_r_D_IN, insCnt_r_incr_r_EN;

  // register ins_rdy_r
  reg ins_rdy_r;
  wire ins_rdy_r_D_IN, ins_rdy_r_EN;

  // register pktCnt_r
  reg [31 : 0] pktCnt_r;
  wire [31 : 0] pktCnt_r_D_IN;
  wire pktCnt_r_EN;

  // register pktCnt_r_clear_r
  (* KEEP = "TRUE" *)
  reg pktCnt_r_clear_r;
  wire pktCnt_r_clear_r_D_IN, pktCnt_r_clear_r_EN;

  // register pktCnt_r_incr_r
  reg pktCnt_r_incr_r;
  wire pktCnt_r_incr_r_D_IN, pktCnt_r_incr_r_EN;

  // register pktStore_0
  reg [31 : 0] pktStore_0;
  wire [31 : 0] pktStore_0_D_IN;
  wire pktStore_0_EN;

  // register pktStore_1
  reg [31 : 0] pktStore_1;
  wire [31 : 0] pktStore_1_D_IN;
  wire pktStore_1_EN;

  // register pktStore_10
  reg [31 : 0] pktStore_10;
  wire [31 : 0] pktStore_10_D_IN;
  wire pktStore_10_EN;

  // register pktStore_11
  reg [31 : 0] pktStore_11;
  wire [31 : 0] pktStore_11_D_IN;
  wire pktStore_11_EN;

  // register pktStore_12
  reg [31 : 0] pktStore_12;
  wire [31 : 0] pktStore_12_D_IN;
  wire pktStore_12_EN;

  // register pktStore_13
  reg [31 : 0] pktStore_13;
  wire [31 : 0] pktStore_13_D_IN;
  wire pktStore_13_EN;

  // register pktStore_14
  reg [31 : 0] pktStore_14;
  wire [31 : 0] pktStore_14_D_IN;
  wire pktStore_14_EN;

  // register pktStore_15
  reg [31 : 0] pktStore_15;
  wire [31 : 0] pktStore_15_D_IN;
  wire pktStore_15_EN;

  // register pktStore_16
  reg [31 : 0] pktStore_16;
  wire [31 : 0] pktStore_16_D_IN;
  wire pktStore_16_EN;

  // register pktStore_17
  reg [31 : 0] pktStore_17;
  wire [31 : 0] pktStore_17_D_IN;
  wire pktStore_17_EN;

  // register pktStore_18
  reg [31 : 0] pktStore_18;
  wire [31 : 0] pktStore_18_D_IN;
  wire pktStore_18_EN;

  // register pktStore_19
  reg [31 : 0] pktStore_19;
  wire [31 : 0] pktStore_19_D_IN;
  wire pktStore_19_EN;

  // register pktStore_2
  reg [31 : 0] pktStore_2;
  wire [31 : 0] pktStore_2_D_IN;
  wire pktStore_2_EN;

  // register pktStore_20
  reg [31 : 0] pktStore_20;
  wire [31 : 0] pktStore_20_D_IN;
  wire pktStore_20_EN;

  // register pktStore_21
  reg [31 : 0] pktStore_21;
  wire [31 : 0] pktStore_21_D_IN;
  wire pktStore_21_EN;

  // register pktStore_22
  reg [31 : 0] pktStore_22;
  wire [31 : 0] pktStore_22_D_IN;
  wire pktStore_22_EN;

  // register pktStore_23
  reg [31 : 0] pktStore_23;
  wire [31 : 0] pktStore_23_D_IN;
  wire pktStore_23_EN;

  // register pktStore_24
  reg [31 : 0] pktStore_24;
  wire [31 : 0] pktStore_24_D_IN;
  wire pktStore_24_EN;

  // register pktStore_25
  reg [31 : 0] pktStore_25;
  wire [31 : 0] pktStore_25_D_IN;
  wire pktStore_25_EN;

  // register pktStore_26
  reg [31 : 0] pktStore_26;
  wire [31 : 0] pktStore_26_D_IN;
  wire pktStore_26_EN;

  // register pktStore_27
  reg [31 : 0] pktStore_27;
  wire [31 : 0] pktStore_27_D_IN;
  wire pktStore_27_EN;

  // register pktStore_28
  reg [31 : 0] pktStore_28;
  wire [31 : 0] pktStore_28_D_IN;
  wire pktStore_28_EN;

  // register pktStore_29
  reg [31 : 0] pktStore_29;
  wire [31 : 0] pktStore_29_D_IN;
  wire pktStore_29_EN;

  // register pktStore_3
  reg [31 : 0] pktStore_3;
  wire [31 : 0] pktStore_3_D_IN;
  wire pktStore_3_EN;

  // register pktStore_30
  reg [31 : 0] pktStore_30;
  wire [31 : 0] pktStore_30_D_IN;
  wire pktStore_30_EN;

  // register pktStore_31
  reg [31 : 0] pktStore_31;
  wire [31 : 0] pktStore_31_D_IN;
  wire pktStore_31_EN;

  // register pktStore_4
  reg [31 : 0] pktStore_4;
  wire [31 : 0] pktStore_4_D_IN;
  wire pktStore_4_EN;

  // register pktStore_5
  reg [31 : 0] pktStore_5;
  wire [31 : 0] pktStore_5_D_IN;
  wire pktStore_5_EN;

  // register pktStore_6
  reg [31 : 0] pktStore_6;
  wire [31 : 0] pktStore_6_D_IN;
  wire pktStore_6_EN;

  // register pktStore_7
  reg [31 : 0] pktStore_7;
  wire [31 : 0] pktStore_7_D_IN;
  wire pktStore_7_EN;

  // register pktStore_8
  reg [31 : 0] pktStore_8;
  wire [31 : 0] pktStore_8_D_IN;
  wire pktStore_8_EN;

  // register pktStore_9
  reg [31 : 0] pktStore_9;
  wire [31 : 0] pktStore_9_D_IN;
  wire pktStore_9_EN;

  // register saxi_a4rdAddr_cntr_r
  reg saxi_a4rdAddr_cntr_r;
  wire saxi_a4rdAddr_cntr_r_D_IN, saxi_a4rdAddr_cntr_r_EN;

  // register saxi_a4rdAddr_q_0
  reg [14 : 0] saxi_a4rdAddr_q_0;
  reg [14 : 0] saxi_a4rdAddr_q_0_D_IN;
  wire saxi_a4rdAddr_q_0_EN;

  // register saxi_a4rdResp_cntr_r
  reg saxi_a4rdResp_cntr_r;
  wire saxi_a4rdResp_cntr_r_D_IN, saxi_a4rdResp_cntr_r_EN;

  // register saxi_a4rdResp_q_0
  reg [33 : 0] saxi_a4rdResp_q_0;
  reg [33 : 0] saxi_a4rdResp_q_0_D_IN;
  wire saxi_a4rdResp_q_0_EN;

  // register saxi_a4wrAddr_cntr_r
  reg saxi_a4wrAddr_cntr_r;
  wire saxi_a4wrAddr_cntr_r_D_IN, saxi_a4wrAddr_cntr_r_EN;

  // register saxi_a4wrAddr_q_0
  reg [14 : 0] saxi_a4wrAddr_q_0;
  reg [14 : 0] saxi_a4wrAddr_q_0_D_IN;
  wire saxi_a4wrAddr_q_0_EN;

  // register saxi_a4wrData_cntr_r
  reg saxi_a4wrData_cntr_r;
  wire saxi_a4wrData_cntr_r_D_IN, saxi_a4wrData_cntr_r_EN;

  // register saxi_a4wrData_q_0
  reg [35 : 0] saxi_a4wrData_q_0;
  reg [35 : 0] saxi_a4wrData_q_0_D_IN;
  wire saxi_a4wrData_q_0_EN;

  // register saxi_a4wrResp_cntr_r
  reg saxi_a4wrResp_cntr_r;
  wire saxi_a4wrResp_cntr_r_D_IN, saxi_a4wrResp_cntr_r_EN;

  // register saxi_a4wrResp_q_0
  reg [1 : 0] saxi_a4wrResp_q_0;
  wire [1 : 0] saxi_a4wrResp_q_0_D_IN;
  wire saxi_a4wrResp_q_0_EN;

  // register toSend_r
  reg [7 : 0] toSend_r;
  wire [7 : 0] toSend_r_D_IN;
  wire toSend_r_EN;

  // register ts_valid_r
  reg ts_valid_r;
  wire ts_valid_r_D_IN, ts_valid_r_EN;

  // register tx_ptp_tstamp_r
  reg [79 : 0] tx_ptp_tstamp_r;
  wire [79 : 0] tx_ptp_tstamp_r_D_IN;
  wire tx_ptp_tstamp_r_EN;

  // register userOut_0
  reg [31 : 0] userOut_0;
  wire [31 : 0] userOut_0_D_IN;
  wire userOut_0_EN;

  // register usr_sop_r
  reg usr_sop_r;
  wire usr_sop_r_D_IN, usr_sop_r_EN;

  // ports of submodule s0_f
  wire [577 : 0] s0_f_D_IN, s0_f_D_OUT;
  wire s0_f_CLR, s0_f_DEQ, s0_f_EMPTY_N, s0_f_ENQ, s0_f_FULL_N;

  // ports of submodule s1_f
  wire [578 : 0] s1_f_D_IN, s1_f_D_OUT;
  wire s1_f_CLR, s1_f_DEQ, s1_f_EMPTY_N, s1_f_ENQ, s1_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_cfgRead,
       CAN_FIRE_RL_cfgWrite,
       CAN_FIRE_RL_insCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_insCnt_r_setClear,
       CAN_FIRE_RL_insCnt_r_update,
       CAN_FIRE_RL_moveInsPkt,
       CAN_FIRE_RL_moveUsrPkt,
       CAN_FIRE_RL_mst_ifc_doAlways,
       CAN_FIRE_RL_mst_ifc_passStrm,
       CAN_FIRE_RL_mst_ifc_stale,
       CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       CAN_FIRE_RL_pktCnt_r_setClear,
       CAN_FIRE_RL_pktCnt_r_update,
       CAN_FIRE_RL_saxi_a4rdAddr_both,
       CAN_FIRE_RL_saxi_a4rdAddr_decCtr,
       CAN_FIRE_RL_saxi_a4rdAddr_incCtr,
       CAN_FIRE_RL_saxi_a4rdResp_both,
       CAN_FIRE_RL_saxi_a4rdResp_decCtr,
       CAN_FIRE_RL_saxi_a4rdResp_incCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_both,
       CAN_FIRE_RL_saxi_a4wrAddr_decCtr,
       CAN_FIRE_RL_saxi_a4wrAddr_incCtr,
       CAN_FIRE_RL_saxi_a4wrData_both,
       CAN_FIRE_RL_saxi_a4wrData_decCtr,
       CAN_FIRE_RL_saxi_a4wrData_incCtr,
       CAN_FIRE_RL_saxi_a4wrResp_both,
       CAN_FIRE_RL_saxi_a4wrResp_decCtr,
       CAN_FIRE_RL_saxi_a4wrResp_incCtr,
       CAN_FIRE_RL_sifc_rdAddr,
       CAN_FIRE_RL_sifc_rdResp,
       CAN_FIRE_RL_sifc_wrAddr,
       CAN_FIRE_RL_sifc_wrData,
       CAN_FIRE_RL_sifc_wrResp,
       CAN_FIRE_RL_slv_ifc_doAlways,
       CAN_FIRE_mac_m_axis_sTREADY,
       CAN_FIRE_s_axi_mARADDR,
       CAN_FIRE_s_axi_mARPROT,
       CAN_FIRE_s_axi_mARVALID,
       CAN_FIRE_s_axi_mAWADDR,
       CAN_FIRE_s_axi_mAWPROT,
       CAN_FIRE_s_axi_mAWVALID,
       CAN_FIRE_s_axi_mBREADY,
       CAN_FIRE_s_axi_mRREADY,
       CAN_FIRE_s_axi_mWDATA,
       CAN_FIRE_s_axi_mWSTRB,
       CAN_FIRE_s_axi_mWVALID,
       CAN_FIRE_tx_ptp_tstamp_tdata,
       CAN_FIRE_usr_s_axis_mTDATA,
       CAN_FIRE_usr_s_axis_mTKEEP,
       CAN_FIRE_usr_s_axis_mTLAST,
       CAN_FIRE_usr_s_axis_mTSTRB,
       CAN_FIRE_usr_s_axis_mTUSER,
       CAN_FIRE_usr_s_axis_mTVALID,
       WILL_FIRE_RL_cfgRead,
       WILL_FIRE_RL_cfgWrite,
       WILL_FIRE_RL_insCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_insCnt_r_setClear,
       WILL_FIRE_RL_insCnt_r_update,
       WILL_FIRE_RL_moveInsPkt,
       WILL_FIRE_RL_moveUsrPkt,
       WILL_FIRE_RL_mst_ifc_doAlways,
       WILL_FIRE_RL_mst_ifc_passStrm,
       WILL_FIRE_RL_mst_ifc_stale,
       WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update,
       WILL_FIRE_RL_pktCnt_r_setClear,
       WILL_FIRE_RL_pktCnt_r_update,
       WILL_FIRE_RL_saxi_a4rdAddr_both,
       WILL_FIRE_RL_saxi_a4rdAddr_decCtr,
       WILL_FIRE_RL_saxi_a4rdAddr_incCtr,
       WILL_FIRE_RL_saxi_a4rdResp_both,
       WILL_FIRE_RL_saxi_a4rdResp_decCtr,
       WILL_FIRE_RL_saxi_a4rdResp_incCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_both,
       WILL_FIRE_RL_saxi_a4wrAddr_decCtr,
       WILL_FIRE_RL_saxi_a4wrAddr_incCtr,
       WILL_FIRE_RL_saxi_a4wrData_both,
       WILL_FIRE_RL_saxi_a4wrData_decCtr,
       WILL_FIRE_RL_saxi_a4wrData_incCtr,
       WILL_FIRE_RL_saxi_a4wrResp_both,
       WILL_FIRE_RL_saxi_a4wrResp_decCtr,
       WILL_FIRE_RL_saxi_a4wrResp_incCtr,
       WILL_FIRE_RL_sifc_rdAddr,
       WILL_FIRE_RL_sifc_rdResp,
       WILL_FIRE_RL_sifc_wrAddr,
       WILL_FIRE_RL_sifc_wrData,
       WILL_FIRE_RL_sifc_wrResp,
       WILL_FIRE_RL_slv_ifc_doAlways,
       WILL_FIRE_mac_m_axis_sTREADY,
       WILL_FIRE_s_axi_mARADDR,
       WILL_FIRE_s_axi_mARPROT,
       WILL_FIRE_s_axi_mARVALID,
       WILL_FIRE_s_axi_mAWADDR,
       WILL_FIRE_s_axi_mAWPROT,
       WILL_FIRE_s_axi_mAWVALID,
       WILL_FIRE_s_axi_mBREADY,
       WILL_FIRE_s_axi_mRREADY,
       WILL_FIRE_s_axi_mWDATA,
       WILL_FIRE_s_axi_mWSTRB,
       WILL_FIRE_s_axi_mWVALID,
       WILL_FIRE_tx_ptp_tstamp_tdata,
       WILL_FIRE_usr_s_axis_mTDATA,
       WILL_FIRE_usr_s_axis_mTKEEP,
       WILL_FIRE_usr_s_axis_mTLAST,
       WILL_FIRE_usr_s_axis_mTSTRB,
       WILL_FIRE_usr_s_axis_mTUSER,
       WILL_FIRE_usr_s_axis_mTVALID;

  // inputs to muxes for submodule ports
  wire [578 : 0] MUX_s1_f_enq_1__VAL_1, MUX_s1_f_enq_1__VAL_2;
  wire [35 : 0] MUX_saxi_a4wrData_q_0_write_1__VAL_1,
		MUX_saxi_a4wrData_q_0_write_1__VAL_2;
  wire [33 : 0] MUX_saxi_a4rdResp_q_0_write_1__VAL_1,
		MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
  wire [14 : 0] MUX_saxi_a4rdAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4rdAddr_q_0_write_1__VAL_2,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_1,
		MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
  wire [7 : 0] MUX_toSend_r_write_1__VAL_2;
  wire MUX_ins_rdy_r_write_1__SEL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2,
       MUX_saxi_a4rdResp_q_0_write_1__SEL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrAddr_q_0_write_1__SEL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2,
       MUX_saxi_a4wrData_q_0_write_1__SEL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1,
       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2,
       MUX_ts_valid_r_write_1__SEL_1;

  // remaining internal signals
  reg [511 : 0] x_data__h4509;
  reg [31 : 0] v__h13836;
  wire [63 : 0] x__h9084, x_keep__h4510;
  wire [31 : 0] cpret__h13912, cpret__h13948, cpret__h13984;
  wire toSend_r_0_ULE_64___d61;

  // action method usr_s_axis_mTVALID
  assign CAN_FIRE_usr_s_axis_mTVALID = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTVALID = usr_s_axis_tvalid ;

  // value method usr_s_axis_sTREADY
  assign usr_s_axis_tready = s0_f_FULL_N ;

  // action method usr_s_axis_mTDATA
  assign CAN_FIRE_usr_s_axis_mTDATA = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTDATA = 1'd1 ;

  // action method usr_s_axis_mTSTRB
  assign CAN_FIRE_usr_s_axis_mTSTRB = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTSTRB = 1'd1 ;

  // action method usr_s_axis_mTUSER
  assign CAN_FIRE_usr_s_axis_mTUSER = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTUSER = 1'd1 ;

  // action method usr_s_axis_mTKEEP
  assign CAN_FIRE_usr_s_axis_mTKEEP = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTKEEP = 1'd1 ;

  // action method usr_s_axis_mTLAST
  assign CAN_FIRE_usr_s_axis_mTLAST = 1'd1 ;
  assign WILL_FIRE_usr_s_axis_mTLAST = usr_s_axis_tlast ;

  // value method mac_m_axis_mTVALID
  assign mac_m_axis_tvalid = s1_f_EMPTY_N ;

  // action method mac_m_axis_sTREADY
  assign CAN_FIRE_mac_m_axis_sTREADY = 1'd1 ;
  assign WILL_FIRE_mac_m_axis_sTREADY = mac_m_axis_tready ;

  // value method mac_m_axis_mTDATA
  assign mac_m_axis_tdata = s1_f_D_OUT[578:67] ;

  // value method mac_m_axis_mTUSER
  assign mac_m_axis_tuser = s1_f_D_OUT[2:1] ;

  // value method mac_m_axis_mTKEEP
  assign mac_m_axis_tkeep = s1_f_D_OUT[66:3] ;

  // value method mac_m_axis_mTLAST
  assign mac_m_axis_tlast = s1_f_EMPTY_N && s1_f_D_OUT[0] ;

  // action method s_axi_mAWVALID
  assign CAN_FIRE_s_axi_mAWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWVALID = s_axi_awvalid ;

  // value method s_axi_sAWREADY
  assign s_axi_awready = !saxi_a4wrAddr_cntr_r ;

  // action method s_axi_mAWADDR
  assign CAN_FIRE_s_axi_mAWADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWADDR = 1'd1 ;

  // action method s_axi_mAWPROT
  assign CAN_FIRE_s_axi_mAWPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mAWPROT = 1'd1 ;

  // action method s_axi_mWVALID
  assign CAN_FIRE_s_axi_mWVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mWVALID = s_axi_wvalid ;

  // value method s_axi_sWREADY
  assign s_axi_wready = !saxi_a4wrData_cntr_r ;

  // action method s_axi_mWDATA
  assign CAN_FIRE_s_axi_mWDATA = 1'd1 ;
  assign WILL_FIRE_s_axi_mWDATA = 1'd1 ;

  // action method s_axi_mWSTRB
  assign CAN_FIRE_s_axi_mWSTRB = 1'd1 ;
  assign WILL_FIRE_s_axi_mWSTRB = 1'd1 ;

  // value method s_axi_sBVALID
  assign s_axi_bvalid = saxi_a4wrResp_cntr_r ;

  // action method s_axi_mBREADY
  assign CAN_FIRE_s_axi_mBREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mBREADY = s_axi_bready ;

  // value method s_axi_sBRESP
  assign s_axi_bresp = saxi_a4wrResp_q_0 ;

  // action method s_axi_mARVALID
  assign CAN_FIRE_s_axi_mARVALID = 1'd1 ;
  assign WILL_FIRE_s_axi_mARVALID = s_axi_arvalid ;

  // value method s_axi_sARREADY
  assign s_axi_arready = !saxi_a4rdAddr_cntr_r ;

  // action method s_axi_mARADDR
  assign CAN_FIRE_s_axi_mARADDR = 1'd1 ;
  assign WILL_FIRE_s_axi_mARADDR = 1'd1 ;

  // action method s_axi_mARPROT
  assign CAN_FIRE_s_axi_mARPROT = 1'd1 ;
  assign WILL_FIRE_s_axi_mARPROT = 1'd1 ;

  // value method s_axi_sRVALID
  assign s_axi_rvalid = saxi_a4rdResp_cntr_r ;

  // action method s_axi_mRREADY
  assign CAN_FIRE_s_axi_mRREADY = 1'd1 ;
  assign WILL_FIRE_s_axi_mRREADY = s_axi_rready ;

  // value method s_axi_sRDATA
  assign s_axi_rdata = saxi_a4rdResp_q_0[31:0] ;

  // value method s_axi_sRRESP
  assign s_axi_rresp = saxi_a4rdResp_q_0[33:32] ;

  // action method tx_ptp_tstamp_tdata
  assign CAN_FIRE_tx_ptp_tstamp_tdata = 1'd1 ;
  assign WILL_FIRE_tx_ptp_tstamp_tdata = tx_ptp_tstamp_tvalid ;

  // value method tx_ptp_tstamp_tready
  assign tx_ptp_tstamp_tready = 1'd1 ;

  // submodule s0_f
  FIFO2 #(.width(32'd578), .guarded(32'd1)) s0_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s0_f_D_IN),
						 .ENQ(s0_f_ENQ),
						 .DEQ(s0_f_DEQ),
						 .CLR(s0_f_CLR),
						 .D_OUT(s0_f_D_OUT),
						 .FULL_N(s0_f_FULL_N),
						 .EMPTY_N(s0_f_EMPTY_N));

  // submodule s1_f
  FIFO2 #(.width(32'd579), .guarded(32'd1)) s1_f(.RST(s_axi_aresetn__DELAYED),
						 .CLK(s_axi_aclk),
						 .D_IN(s1_f_D_IN),
						 .ENQ(s1_f_ENQ),
						 .DEQ(s1_f_DEQ),
						 .CLR(s1_f_CLR),
						 .D_OUT(s1_f_D_OUT),
						 .FULL_N(s1_f_FULL_N),
						 .EMPTY_N(s1_f_EMPTY_N));

  // rule RL_cfgRead
  assign CAN_FIRE_RL_cfgRead = !saxi_a4rdResp_cntr_r && saxi_a4rdAddr_cntr_r ;
  assign WILL_FIRE_RL_cfgRead = CAN_FIRE_RL_cfgRead ;

  // rule RL_slv_ifc_doAlways
  assign CAN_FIRE_RL_slv_ifc_doAlways = s0_f_FULL_N && usr_s_axis_tvalid ;
  assign WILL_FIRE_RL_slv_ifc_doAlways = CAN_FIRE_RL_slv_ifc_doAlways ;

  // rule RL_mst_ifc_stale
  assign CAN_FIRE_RL_mst_ifc_stale = 1'd1 ;
  assign WILL_FIRE_RL_mst_ifc_stale = 1'd1 ;

  // rule RL_moveUsrPkt
  assign CAN_FIRE_RL_moveUsrPkt =
	     s1_f_FULL_N && s0_f_EMPTY_N && (!ins_rdy_r || !usr_sop_r) ;
  assign WILL_FIRE_RL_moveUsrPkt = CAN_FIRE_RL_moveUsrPkt ;

  // rule RL_moveInsPkt
  assign CAN_FIRE_RL_moveInsPkt = s1_f_FULL_N && ins_rdy_r && usr_sop_r ;
  assign WILL_FIRE_RL_moveInsPkt = CAN_FIRE_RL_moveInsPkt ;

  // rule RL_cfgWrite
  assign CAN_FIRE_RL_cfgWrite =
	     !saxi_a4wrResp_cntr_r && saxi_a4wrAddr_cntr_r &&
	     saxi_a4wrData_cntr_r ;
  assign WILL_FIRE_RL_cfgWrite = CAN_FIRE_RL_cfgWrite ;

  // rule RL_mst_ifc_passStrm
  assign CAN_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;
  assign WILL_FIRE_RL_mst_ifc_passStrm = s1_f_EMPTY_N ;

  // rule RL_mst_ifc_doAlways
  assign CAN_FIRE_RL_mst_ifc_doAlways = s1_f_EMPTY_N && mac_m_axis_tready ;
  assign WILL_FIRE_RL_mst_ifc_doAlways = CAN_FIRE_RL_mst_ifc_doAlways ;

  // rule RL_pktCnt_r_update
  assign CAN_FIRE_RL_pktCnt_r_update = pktCnt_r_clear_r || pktCnt_r_incr_r ;
  assign WILL_FIRE_RL_pktCnt_r_update = CAN_FIRE_RL_pktCnt_r_update ;

  // rule RL_pktCnt_r_setClear
  assign CAN_FIRE_RL_pktCnt_r_setClear =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd6 &&
	     saxi_a4wrData_q_0[0] ;
  assign WILL_FIRE_RL_pktCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_pktCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pktCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_insCnt_r_update
  assign CAN_FIRE_RL_insCnt_r_update = insCnt_r_clear_r || insCnt_r_incr_r ;
  assign WILL_FIRE_RL_insCnt_r_update = CAN_FIRE_RL_insCnt_r_update ;

  // rule RL_insCnt_r_setClear
  assign CAN_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;
  assign WILL_FIRE_RL_insCnt_r_setClear = CAN_FIRE_RL_pktCnt_r_setClear ;

  // rule RL_insCnt_r_incr_r__dreg_update
  assign CAN_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_insCnt_r_incr_r__dreg_update = 1'd1 ;

  // rule RL_sifc_wrResp
  assign CAN_FIRE_RL_sifc_wrResp = s_axi_bready ;
  assign WILL_FIRE_RL_sifc_wrResp = s_axi_bready ;

  // rule RL_saxi_a4wrResp_incCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_incCtr =
	     (saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     CAN_FIRE_RL_cfgWrite &&
	     !saxi_a4wrResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4wrResp_incCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_incCtr ;

  // rule RL_saxi_a4wrResp_decCtr
  assign CAN_FIRE_RL_saxi_a4wrResp_decCtr =
	     saxi_a4wrResp_dequeueing_whas && !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_decCtr =
	     CAN_FIRE_RL_saxi_a4wrResp_decCtr ;

  // rule RL_saxi_a4wrResp_both
  assign CAN_FIRE_RL_saxi_a4wrResp_both =
	     (!saxi_a4wrResp_cntr_r || CAN_FIRE_RL_cfgWrite) &&
	     saxi_a4wrResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrResp_both = CAN_FIRE_RL_saxi_a4wrResp_both ;

  // rule RL_sifc_rdResp
  assign CAN_FIRE_RL_sifc_rdResp = s_axi_rready ;
  assign WILL_FIRE_RL_sifc_rdResp = s_axi_rready ;

  // rule RL_saxi_a4rdResp_incCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_incCtr =
	     (saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     CAN_FIRE_RL_cfgRead &&
	     !saxi_a4rdResp_dequeueing_whas ;
  assign WILL_FIRE_RL_saxi_a4rdResp_incCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_incCtr ;

  // rule RL_saxi_a4rdResp_decCtr
  assign CAN_FIRE_RL_saxi_a4rdResp_decCtr =
	     saxi_a4rdResp_dequeueing_whas && !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_decCtr =
	     CAN_FIRE_RL_saxi_a4rdResp_decCtr ;

  // rule RL_saxi_a4rdResp_both
  assign CAN_FIRE_RL_saxi_a4rdResp_both =
	     (!saxi_a4rdResp_cntr_r || CAN_FIRE_RL_cfgRead) &&
	     saxi_a4rdResp_dequeueing_whas &&
	     CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdResp_both = CAN_FIRE_RL_saxi_a4rdResp_both ;

  // rule RL_sifc_wrAddr
  assign CAN_FIRE_RL_sifc_wrAddr = !saxi_a4wrAddr_cntr_r && s_axi_awvalid ;
  assign WILL_FIRE_RL_sifc_wrAddr = CAN_FIRE_RL_sifc_wrAddr ;

  // rule RL_saxi_a4wrAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_incCtr =
	     (saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_sifc_wrAddr &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_incCtr ;

  // rule RL_saxi_a4wrAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // rule RL_saxi_a4wrAddr_both
  assign CAN_FIRE_RL_saxi_a4wrAddr_both =
	     (!saxi_a4wrAddr_cntr_r || CAN_FIRE_RL_sifc_wrAddr) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrAddr ;
  assign WILL_FIRE_RL_saxi_a4wrAddr_both = CAN_FIRE_RL_saxi_a4wrAddr_both ;

  // rule RL_sifc_wrData
  assign CAN_FIRE_RL_sifc_wrData = !saxi_a4wrData_cntr_r && s_axi_wvalid ;
  assign WILL_FIRE_RL_sifc_wrData = CAN_FIRE_RL_sifc_wrData ;

  // rule RL_saxi_a4wrData_incCtr
  assign CAN_FIRE_RL_saxi_a4wrData_incCtr =
	     (saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_sifc_wrData &&
	     !CAN_FIRE_RL_cfgWrite ;
  assign WILL_FIRE_RL_saxi_a4wrData_incCtr =
	     CAN_FIRE_RL_saxi_a4wrData_incCtr ;

  // rule RL_saxi_a4wrData_decCtr
  assign CAN_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_cfgWrite && !CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_decCtr =
	     CAN_FIRE_RL_saxi_a4wrData_decCtr ;

  // rule RL_saxi_a4wrData_both
  assign CAN_FIRE_RL_saxi_a4wrData_both =
	     (!saxi_a4wrData_cntr_r || CAN_FIRE_RL_sifc_wrData) &&
	     CAN_FIRE_RL_cfgWrite &&
	     CAN_FIRE_RL_sifc_wrData ;
  assign WILL_FIRE_RL_saxi_a4wrData_both = CAN_FIRE_RL_saxi_a4wrData_both ;

  // rule RL_sifc_rdAddr
  assign CAN_FIRE_RL_sifc_rdAddr = !saxi_a4rdAddr_cntr_r && s_axi_arvalid ;
  assign WILL_FIRE_RL_sifc_rdAddr = CAN_FIRE_RL_sifc_rdAddr ;

  // rule RL_saxi_a4rdAddr_incCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_incCtr =
	     (saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_sifc_rdAddr &&
	     !CAN_FIRE_RL_cfgRead ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_incCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_incCtr ;

  // rule RL_saxi_a4rdAddr_decCtr
  assign CAN_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_cfgRead && !CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_decCtr =
	     CAN_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // rule RL_saxi_a4rdAddr_both
  assign CAN_FIRE_RL_saxi_a4rdAddr_both =
	     (!saxi_a4rdAddr_cntr_r || CAN_FIRE_RL_sifc_rdAddr) &&
	     CAN_FIRE_RL_cfgRead &&
	     CAN_FIRE_RL_sifc_rdAddr ;
  assign WILL_FIRE_RL_saxi_a4rdAddr_both = CAN_FIRE_RL_saxi_a4rdAddr_both ;

  // inputs to muxes for submodule ports
  assign MUX_ins_rdy_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ;
  assign MUX_saxi_a4rdResp_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ;
  assign MUX_saxi_a4wrData_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ;
  assign MUX_ts_valid_r_write_1__SEL_1 =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ;
  assign MUX_s1_f_enq_1__VAL_1 = { s0_f_D_OUT[577:2], 2'd0, s0_f_D_OUT[0] } ;
  assign MUX_s1_f_enq_1__VAL_2 =
	     { x_data__h4509,
	       x_keep__h4510,
	       userOut_0[1:0],
	       toSend_r_0_ULE_64___d61 } ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4rdAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 =
	     { s_axi_arprot, s_axi_araddr } ;
  assign MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 =
	     saxi_a4rdAddr_cntr_r ?
	       MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 =
	     saxi_a4rdResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r - 1'd1 ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_1 = { 2'd0, v__h13836 } ;
  assign MUX_saxi_a4rdResp_q_0_write_1__VAL_2 =
	     saxi_a4rdResp_cntr_r ?
	       MUX_saxi_a4rdResp_q_0_write_1__VAL_1 :
	       34'd0 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 =
	     saxi_a4wrAddr_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 =
	     { s_axi_awprot, s_axi_awaddr } ;
  assign MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 =
	     saxi_a4wrAddr_cntr_r ?
	       MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 :
	       15'd0 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 =
	     saxi_a4wrData_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r - 1'd1 ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_1 = { s_axi_wstrb, s_axi_wdata } ;
  assign MUX_saxi_a4wrData_q_0_write_1__VAL_2 =
	     saxi_a4wrData_cntr_r ?
	       MUX_saxi_a4wrData_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 =
	     saxi_a4wrResp_cntr_r + 1'd1 ;
  assign MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 =
	     saxi_a4wrResp_cntr_r - 1'd1 ;
  assign MUX_toSend_r_write_1__VAL_2 = toSend_r - 8'd64 ;

  // inlined wires
  assign pktCnt_r_incr_r_1_whas = WILL_FIRE_RL_moveUsrPkt && s0_f_D_OUT[0] ;
  assign insCnt_r_incr_r_1_whas =
	     WILL_FIRE_RL_moveInsPkt && toSend_r_0_ULE_64___d61 ;
  assign saxi_a4wrResp_dequeueing_whas =
	     s_axi_bready && saxi_a4wrResp_cntr_r ;
  assign saxi_a4rdResp_dequeueing_whas =
	     s_axi_rready && saxi_a4rdResp_cntr_r ;

  // register beat_r
  assign beat_r_D_IN = !toSend_r_0_ULE_64___d61 && beat_r + 1'd1 ;
  assign beat_r_EN = CAN_FIRE_RL_moveInsPkt ;

  // register insCnt_r
  assign insCnt_r_D_IN = insCnt_r_clear_r ? 32'd0 : insCnt_r + 32'd1 ;
  assign insCnt_r_EN = CAN_FIRE_RL_insCnt_r_update ;

  // register insCnt_r_clear_r
  assign insCnt_r_clear_r_D_IN = WILL_FIRE_RL_insCnt_r_setClear ;
  assign insCnt_r_clear_r_EN =
	     WILL_FIRE_RL_insCnt_r_update && insCnt_r_clear_r ||
	     WILL_FIRE_RL_insCnt_r_setClear ;

  // register insCnt_r_incr_r
  assign insCnt_r_incr_r_D_IN = insCnt_r_incr_r_1_whas ;
  assign insCnt_r_incr_r_EN = 1'd1 ;

  // register ins_rdy_r
  assign ins_rdy_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] != 8'd0 :
	       !toSend_r_0_ULE_64___d61 ;
  assign ins_rdy_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register pktCnt_r
  assign pktCnt_r_D_IN = pktCnt_r_clear_r ? 32'd0 : pktCnt_r + 32'd1 ;
  assign pktCnt_r_EN = CAN_FIRE_RL_pktCnt_r_update ;

  // register pktCnt_r_clear_r
  assign pktCnt_r_clear_r_D_IN = WILL_FIRE_RL_pktCnt_r_setClear ;
  assign pktCnt_r_clear_r_EN =
	     WILL_FIRE_RL_pktCnt_r_update && pktCnt_r_clear_r ||
	     WILL_FIRE_RL_pktCnt_r_setClear ;

  // register pktCnt_r_incr_r
  assign pktCnt_r_incr_r_D_IN = pktCnt_r_incr_r_1_whas ;
  assign pktCnt_r_incr_r_EN = 1'd1 ;

  // register pktStore_0
  assign pktStore_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd0 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_1
  assign pktStore_1_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_1_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd1 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_10
  assign pktStore_10_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_10_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd10 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_11
  assign pktStore_11_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_11_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd11 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_12
  assign pktStore_12_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_12_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd12 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_13
  assign pktStore_13_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_13_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd13 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_14
  assign pktStore_14_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_14_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd14 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_15
  assign pktStore_15_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_15_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd15 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_16
  assign pktStore_16_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_16_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd16 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_17
  assign pktStore_17_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_17_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd17 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_18
  assign pktStore_18_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_18_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd18 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_19
  assign pktStore_19_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_19_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd19 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_2
  assign pktStore_2_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_2_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd2 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_20
  assign pktStore_20_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_20_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd20 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_21
  assign pktStore_21_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_21_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd21 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_22
  assign pktStore_22_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_22_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd22 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_23
  assign pktStore_23_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_23_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd23 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_24
  assign pktStore_24_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_24_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd24 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_25
  assign pktStore_25_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_25_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd25 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_26
  assign pktStore_26_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_26_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd26 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_27
  assign pktStore_27_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_27_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd27 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_28
  assign pktStore_28_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_28_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd28 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_29
  assign pktStore_29_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_29_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd29 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_3
  assign pktStore_3_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_3_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd3 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_30
  assign pktStore_30_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_30_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd30 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_31
  assign pktStore_31_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_31_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd31 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_4
  assign pktStore_4_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_4_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd4 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_5
  assign pktStore_5_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_5_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd5 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_6
  assign pktStore_6_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_6_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd6 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_7
  assign pktStore_7_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_7_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd7 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_8
  assign pktStore_8_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_8_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd8 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register pktStore_9
  assign pktStore_9_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign pktStore_9_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[7:2] == 6'd9 &&
	     saxi_a4wrAddr_q_0[10] ;

  // register saxi_a4rdAddr_cntr_r
  assign saxi_a4rdAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ?
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdAddr_q_0
  always@(MUX_saxi_a4rdAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdAddr_both or
	  MUX_saxi_a4rdAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdAddr_q_0_write_1__SEL_1:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdAddr_both:
	  saxi_a4rdAddr_q_0_D_IN = MUX_saxi_a4rdAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdAddr_decCtr: saxi_a4rdAddr_q_0_D_IN = 15'd0;
      default: saxi_a4rdAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdAddr_incCtr && !saxi_a4rdAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdAddr_both ||
	     WILL_FIRE_RL_saxi_a4rdAddr_decCtr ;

  // register saxi_a4rdResp_cntr_r
  assign saxi_a4rdResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ?
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4rdResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4rdResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4rdResp_q_0
  always@(MUX_saxi_a4rdResp_q_0_write_1__SEL_1 or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4rdResp_both or
	  MUX_saxi_a4rdResp_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4rdResp_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4rdResp_q_0_write_1__SEL_1:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4rdResp_both:
	  saxi_a4rdResp_q_0_D_IN = MUX_saxi_a4rdResp_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4rdResp_decCtr: saxi_a4rdResp_q_0_D_IN = 34'd0;
      default: saxi_a4rdResp_q_0_D_IN =
		   34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4rdResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4rdResp_incCtr && !saxi_a4rdResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4rdResp_both ||
	     WILL_FIRE_RL_saxi_a4rdResp_decCtr ;

  // register saxi_a4wrAddr_cntr_r
  assign saxi_a4wrAddr_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ?
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrAddr_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrAddr_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrAddr_q_0
  always@(MUX_saxi_a4wrAddr_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrAddr_both or
	  MUX_saxi_a4wrAddr_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrAddr_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrAddr_q_0_write_1__SEL_1:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrAddr_both:
	  saxi_a4wrAddr_q_0_D_IN = MUX_saxi_a4wrAddr_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrAddr_decCtr: saxi_a4wrAddr_q_0_D_IN = 15'd0;
      default: saxi_a4wrAddr_q_0_D_IN =
		   15'bxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrAddr_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrAddr_incCtr && !saxi_a4wrAddr_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrAddr_both ||
	     WILL_FIRE_RL_saxi_a4wrAddr_decCtr ;

  // register saxi_a4wrData_cntr_r
  assign saxi_a4wrData_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ?
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrData_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrData_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrData_q_0
  always@(MUX_saxi_a4wrData_q_0_write_1__SEL_1 or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_saxi_a4wrData_both or
	  MUX_saxi_a4wrData_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_saxi_a4wrData_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_saxi_a4wrData_q_0_write_1__SEL_1:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_1;
      WILL_FIRE_RL_saxi_a4wrData_both:
	  saxi_a4wrData_q_0_D_IN = MUX_saxi_a4wrData_q_0_write_1__VAL_2;
      WILL_FIRE_RL_saxi_a4wrData_decCtr: saxi_a4wrData_q_0_D_IN = 36'd0;
      default: saxi_a4wrData_q_0_D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign saxi_a4wrData_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrData_incCtr && !saxi_a4wrData_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrData_both ||
	     WILL_FIRE_RL_saxi_a4wrData_decCtr ;

  // register saxi_a4wrResp_cntr_r
  assign saxi_a4wrResp_cntr_r_D_IN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ?
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_1 :
	       MUX_saxi_a4wrResp_cntr_r_write_1__VAL_2 ;
  assign saxi_a4wrResp_cntr_r_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register saxi_a4wrResp_q_0
  assign saxi_a4wrResp_q_0_D_IN = 2'd0 ;
  assign saxi_a4wrResp_q_0_EN =
	     WILL_FIRE_RL_saxi_a4wrResp_incCtr && !saxi_a4wrResp_cntr_r ||
	     WILL_FIRE_RL_saxi_a4wrResp_both ||
	     WILL_FIRE_RL_saxi_a4wrResp_decCtr ;

  // register toSend_r
  assign toSend_r_D_IN =
	     MUX_ins_rdy_r_write_1__SEL_1 ?
	       saxi_a4wrData_q_0[7:0] :
	       MUX_toSend_r_write_1__VAL_2 ;
  assign toSend_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd5 ||
	     WILL_FIRE_RL_moveInsPkt ;

  // register ts_valid_r
  assign ts_valid_r_D_IN = !MUX_ts_valid_r_write_1__SEL_1 ;
  assign ts_valid_r_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd12 ||
	     tx_ptp_tstamp_tvalid ;

  // register tx_ptp_tstamp_r
  assign tx_ptp_tstamp_r_D_IN = tx_ptp_tstamp_tdata ;
  assign tx_ptp_tstamp_r_EN = tx_ptp_tstamp_tvalid ;

  // register userOut_0
  assign userOut_0_D_IN = saxi_a4wrData_q_0[31:0] ;
  assign userOut_0_EN =
	     WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] == 9'd128 ;

  // register usr_sop_r
  assign usr_sop_r_D_IN = s0_f_D_OUT[0] ;
  assign usr_sop_r_EN = CAN_FIRE_RL_moveUsrPkt ;

  // submodule s0_f
  assign s0_f_D_IN =
	     { usr_s_axis_tdata,
	       usr_s_axis_tkeep,
	       usr_s_axis_tuser,
	       usr_s_axis_tlast } ;
  assign s0_f_ENQ = CAN_FIRE_RL_slv_ifc_doAlways ;
  assign s0_f_DEQ = CAN_FIRE_RL_moveUsrPkt ;
  assign s0_f_CLR = 1'b0 ;

  // submodule s1_f
  assign s1_f_D_IN =
	     WILL_FIRE_RL_moveUsrPkt ?
	       MUX_s1_f_enq_1__VAL_1 :
	       MUX_s1_f_enq_1__VAL_2 ;
  assign s1_f_ENQ = WILL_FIRE_RL_moveUsrPkt || WILL_FIRE_RL_moveInsPkt ;
  assign s1_f_DEQ = CAN_FIRE_RL_mst_ifc_doAlways ;
  assign s1_f_CLR = 1'b0 ;

  // remaining internal signals
  assign cpret__h13912 = { 31'd0, ins_rdy_r } ;
  assign cpret__h13948 = { 31'd0, ts_valid_r } ;
  assign cpret__h13984 = { 16'd0, tx_ptp_tstamp_r[79:64] } ;
  assign toSend_r_0_ULE_64___d61 = toSend_r <= 8'd64 ;
  assign x__h9084 = 64'hFFFFFFFFFFFFFFFF << toSend_r ;
  assign x_keep__h4510 =
	     toSend_r_0_ULE_64___d61 ? ~x__h9084 : 64'hFFFFFFFFFFFFFFFF ;
  always@(beat_r or
	  pktStore_15 or
	  pktStore_14 or
	  pktStore_13 or
	  pktStore_12 or
	  pktStore_11 or
	  pktStore_10 or
	  pktStore_9 or
	  pktStore_8 or
	  pktStore_7 or
	  pktStore_6 or
	  pktStore_5 or
	  pktStore_4 or
	  pktStore_3 or
	  pktStore_2 or
	  pktStore_1 or
	  pktStore_0 or
	  pktStore_31 or
	  pktStore_30 or
	  pktStore_29 or
	  pktStore_28 or
	  pktStore_27 or
	  pktStore_26 or
	  pktStore_25 or
	  pktStore_24 or
	  pktStore_23 or
	  pktStore_22 or
	  pktStore_21 or
	  pktStore_20 or
	  pktStore_19 or pktStore_18 or pktStore_17 or pktStore_16)
  begin
    case (beat_r)
      1'd0:
	  x_data__h4509 =
	      { pktStore_15,
		pktStore_14,
		pktStore_13,
		pktStore_12,
		pktStore_11,
		pktStore_10,
		pktStore_9,
		pktStore_8,
		pktStore_7,
		pktStore_6,
		pktStore_5,
		pktStore_4,
		pktStore_3,
		pktStore_2,
		pktStore_1,
		pktStore_0 };
      1'd1:
	  x_data__h4509 =
	      { pktStore_31,
		pktStore_30,
		pktStore_29,
		pktStore_28,
		pktStore_27,
		pktStore_26,
		pktStore_25,
		pktStore_24,
		pktStore_23,
		pktStore_22,
		pktStore_21,
		pktStore_20,
		pktStore_19,
		pktStore_18,
		pktStore_17,
		pktStore_16 };
    endcase
  end
  always@(saxi_a4rdAddr_q_0 or
	  cpret__h13912 or
	  pktCnt_r or
	  insCnt_r or cpret__h13948 or tx_ptp_tstamp_r or cpret__h13984)
  begin
    case (saxi_a4rdAddr_q_0[7:2])
      6'd0: v__h13836 = 32'd1447842644;
      6'd1: v__h13836 = 32'd808333637;
      6'd2: v__h13836 = 32'd128;
      6'd4: v__h13836 = cpret__h13912;
      6'd8: v__h13836 = pktCnt_r;
      6'd9: v__h13836 = insCnt_r;
      6'd12: v__h13836 = cpret__h13948;
      6'd13: v__h13836 = tx_ptp_tstamp_r[31:0];
      6'd14: v__h13836 = tx_ptp_tstamp_r[63:32];
      6'd15: v__h13836 = cpret__h13984;
      default: v__h13836 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn__DELAYED == `BSV_RESET_VALUE)
      begin
        beat_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ins_rdy_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY 15'd0;
	saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ts_valid_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	usr_sop_r <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (beat_r_EN) beat_r <= `BSV_ASSIGNMENT_DELAY beat_r_D_IN;
	if (insCnt_r_clear_r_EN)
	  insCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_clear_r_D_IN;
	if (insCnt_r_incr_r_EN)
	  insCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_incr_r_D_IN;
	if (ins_rdy_r_EN) ins_rdy_r <= `BSV_ASSIGNMENT_DELAY ins_rdy_r_D_IN;
	if (pktCnt_r_clear_r_EN)
	  pktCnt_r_clear_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_clear_r_D_IN;
	if (pktCnt_r_incr_r_EN)
	  pktCnt_r_incr_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_incr_r_D_IN;
	if (saxi_a4rdAddr_cntr_r_EN)
	  saxi_a4rdAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdAddr_cntr_r_D_IN;
	if (saxi_a4rdAddr_q_0_EN)
	  saxi_a4rdAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdAddr_q_0_D_IN;
	if (saxi_a4rdResp_cntr_r_EN)
	  saxi_a4rdResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4rdResp_cntr_r_D_IN;
	if (saxi_a4rdResp_q_0_EN)
	  saxi_a4rdResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4rdResp_q_0_D_IN;
	if (saxi_a4wrAddr_cntr_r_EN)
	  saxi_a4wrAddr_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrAddr_cntr_r_D_IN;
	if (saxi_a4wrAddr_q_0_EN)
	  saxi_a4wrAddr_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrAddr_q_0_D_IN;
	if (saxi_a4wrData_cntr_r_EN)
	  saxi_a4wrData_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrData_cntr_r_D_IN;
	if (saxi_a4wrData_q_0_EN)
	  saxi_a4wrData_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrData_q_0_D_IN;
	if (saxi_a4wrResp_cntr_r_EN)
	  saxi_a4wrResp_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      saxi_a4wrResp_cntr_r_D_IN;
	if (saxi_a4wrResp_q_0_EN)
	  saxi_a4wrResp_q_0 <= `BSV_ASSIGNMENT_DELAY saxi_a4wrResp_q_0_D_IN;
	if (ts_valid_r_EN)
	  ts_valid_r <= `BSV_ASSIGNMENT_DELAY ts_valid_r_D_IN;
	if (usr_sop_r_EN) usr_sop_r <= `BSV_ASSIGNMENT_DELAY usr_sop_r_D_IN;
      end
    if (insCnt_r_EN) insCnt_r <= `BSV_ASSIGNMENT_DELAY insCnt_r_D_IN;
    if (pktCnt_r_EN) pktCnt_r <= `BSV_ASSIGNMENT_DELAY pktCnt_r_D_IN;
    if (pktStore_0_EN) pktStore_0 <= `BSV_ASSIGNMENT_DELAY pktStore_0_D_IN;
    if (pktStore_1_EN) pktStore_1 <= `BSV_ASSIGNMENT_DELAY pktStore_1_D_IN;
    if (pktStore_10_EN) pktStore_10 <= `BSV_ASSIGNMENT_DELAY pktStore_10_D_IN;
    if (pktStore_11_EN) pktStore_11 <= `BSV_ASSIGNMENT_DELAY pktStore_11_D_IN;
    if (pktStore_12_EN) pktStore_12 <= `BSV_ASSIGNMENT_DELAY pktStore_12_D_IN;
    if (pktStore_13_EN) pktStore_13 <= `BSV_ASSIGNMENT_DELAY pktStore_13_D_IN;
    if (pktStore_14_EN) pktStore_14 <= `BSV_ASSIGNMENT_DELAY pktStore_14_D_IN;
    if (pktStore_15_EN) pktStore_15 <= `BSV_ASSIGNMENT_DELAY pktStore_15_D_IN;
    if (pktStore_16_EN) pktStore_16 <= `BSV_ASSIGNMENT_DELAY pktStore_16_D_IN;
    if (pktStore_17_EN) pktStore_17 <= `BSV_ASSIGNMENT_DELAY pktStore_17_D_IN;
    if (pktStore_18_EN) pktStore_18 <= `BSV_ASSIGNMENT_DELAY pktStore_18_D_IN;
    if (pktStore_19_EN) pktStore_19 <= `BSV_ASSIGNMENT_DELAY pktStore_19_D_IN;
    if (pktStore_2_EN) pktStore_2 <= `BSV_ASSIGNMENT_DELAY pktStore_2_D_IN;
    if (pktStore_20_EN) pktStore_20 <= `BSV_ASSIGNMENT_DELAY pktStore_20_D_IN;
    if (pktStore_21_EN) pktStore_21 <= `BSV_ASSIGNMENT_DELAY pktStore_21_D_IN;
    if (pktStore_22_EN) pktStore_22 <= `BSV_ASSIGNMENT_DELAY pktStore_22_D_IN;
    if (pktStore_23_EN) pktStore_23 <= `BSV_ASSIGNMENT_DELAY pktStore_23_D_IN;
    if (pktStore_24_EN) pktStore_24 <= `BSV_ASSIGNMENT_DELAY pktStore_24_D_IN;
    if (pktStore_25_EN) pktStore_25 <= `BSV_ASSIGNMENT_DELAY pktStore_25_D_IN;
    if (pktStore_26_EN) pktStore_26 <= `BSV_ASSIGNMENT_DELAY pktStore_26_D_IN;
    if (pktStore_27_EN) pktStore_27 <= `BSV_ASSIGNMENT_DELAY pktStore_27_D_IN;
    if (pktStore_28_EN) pktStore_28 <= `BSV_ASSIGNMENT_DELAY pktStore_28_D_IN;
    if (pktStore_29_EN) pktStore_29 <= `BSV_ASSIGNMENT_DELAY pktStore_29_D_IN;
    if (pktStore_3_EN) pktStore_3 <= `BSV_ASSIGNMENT_DELAY pktStore_3_D_IN;
    if (pktStore_30_EN) pktStore_30 <= `BSV_ASSIGNMENT_DELAY pktStore_30_D_IN;
    if (pktStore_31_EN) pktStore_31 <= `BSV_ASSIGNMENT_DELAY pktStore_31_D_IN;
    if (pktStore_4_EN) pktStore_4 <= `BSV_ASSIGNMENT_DELAY pktStore_4_D_IN;
    if (pktStore_5_EN) pktStore_5 <= `BSV_ASSIGNMENT_DELAY pktStore_5_D_IN;
    if (pktStore_6_EN) pktStore_6 <= `BSV_ASSIGNMENT_DELAY pktStore_6_D_IN;
    if (pktStore_7_EN) pktStore_7 <= `BSV_ASSIGNMENT_DELAY pktStore_7_D_IN;
    if (pktStore_8_EN) pktStore_8 <= `BSV_ASSIGNMENT_DELAY pktStore_8_D_IN;
    if (pktStore_9_EN) pktStore_9 <= `BSV_ASSIGNMENT_DELAY pktStore_9_D_IN;
    if (toSend_r_EN) toSend_r <= `BSV_ASSIGNMENT_DELAY toSend_r_D_IN;
    if (tx_ptp_tstamp_r_EN)
      tx_ptp_tstamp_r <= `BSV_ASSIGNMENT_DELAY tx_ptp_tstamp_r_D_IN;
    if (userOut_0_EN) userOut_0 <= `BSV_ASSIGNMENT_DELAY userOut_0_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    beat_r = 1'h0;
    insCnt_r = 32'hAAAAAAAA;
    insCnt_r_clear_r = 1'h0;
    insCnt_r_incr_r = 1'h0;
    ins_rdy_r = 1'h0;
    pktCnt_r = 32'hAAAAAAAA;
    pktCnt_r_clear_r = 1'h0;
    pktCnt_r_incr_r = 1'h0;
    pktStore_0 = 32'hAAAAAAAA;
    pktStore_1 = 32'hAAAAAAAA;
    pktStore_10 = 32'hAAAAAAAA;
    pktStore_11 = 32'hAAAAAAAA;
    pktStore_12 = 32'hAAAAAAAA;
    pktStore_13 = 32'hAAAAAAAA;
    pktStore_14 = 32'hAAAAAAAA;
    pktStore_15 = 32'hAAAAAAAA;
    pktStore_16 = 32'hAAAAAAAA;
    pktStore_17 = 32'hAAAAAAAA;
    pktStore_18 = 32'hAAAAAAAA;
    pktStore_19 = 32'hAAAAAAAA;
    pktStore_2 = 32'hAAAAAAAA;
    pktStore_20 = 32'hAAAAAAAA;
    pktStore_21 = 32'hAAAAAAAA;
    pktStore_22 = 32'hAAAAAAAA;
    pktStore_23 = 32'hAAAAAAAA;
    pktStore_24 = 32'hAAAAAAAA;
    pktStore_25 = 32'hAAAAAAAA;
    pktStore_26 = 32'hAAAAAAAA;
    pktStore_27 = 32'hAAAAAAAA;
    pktStore_28 = 32'hAAAAAAAA;
    pktStore_29 = 32'hAAAAAAAA;
    pktStore_3 = 32'hAAAAAAAA;
    pktStore_30 = 32'hAAAAAAAA;
    pktStore_31 = 32'hAAAAAAAA;
    pktStore_4 = 32'hAAAAAAAA;
    pktStore_5 = 32'hAAAAAAAA;
    pktStore_6 = 32'hAAAAAAAA;
    pktStore_7 = 32'hAAAAAAAA;
    pktStore_8 = 32'hAAAAAAAA;
    pktStore_9 = 32'hAAAAAAAA;
    saxi_a4rdAddr_cntr_r = 1'h0;
    saxi_a4rdAddr_q_0 = 15'h2AAA;
    saxi_a4rdResp_cntr_r = 1'h0;
    saxi_a4rdResp_q_0 = 34'h2AAAAAAAA;
    saxi_a4wrAddr_cntr_r = 1'h0;
    saxi_a4wrAddr_q_0 = 15'h2AAA;
    saxi_a4wrData_cntr_r = 1'h0;
    saxi_a4wrData_q_0 = 36'hAAAAAAAAA;
    saxi_a4wrResp_cntr_r = 1'h0;
    saxi_a4wrResp_q_0 = 2'h2;
    toSend_r = 8'hAA;
    ts_valid_r = 1'h0;
    tx_ptp_tstamp_r = 80'hAAAAAAAAAAAAAAAAAAAA;
    userOut_0 = 32'hAAAAAAAA;
    usr_sop_r = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgRead && saxi_a4rdAddr_q_0[7:2] != 6'd0 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd1 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd2 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd4 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd8 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd9 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd12 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd13 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd14 &&
	  saxi_a4rdAddr_q_0[7:2] != 6'd15)
	$display("%m Bad read address, 0x%0h\n",
		 $unsigned(saxi_a4rdAddr_q_0[11:0]));
    if (s_axi_aresetn__DELAYED != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cfgWrite && saxi_a4wrAddr_q_0[10:2] != 9'd5 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd6 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd12 &&
	  saxi_a4wrAddr_q_0[10:2] != 9'd128 &&
	  !saxi_a4wrAddr_q_0[10])
	$display("%m Bad write address, 0x%0h\n",
		 $unsigned(saxi_a4wrAddr_q_0[11:0]));
  end
  // synopsys translate_on
endmodule  // mkEgressMerge_64

